{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetOneAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetTwoAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "addressNotCorrect",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "assetNotCorrect",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "initialLiquidityAlreadyProvided",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "needToCallExistingFunction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "notEnoughGas",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "notEnoughTimePassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "notEnoughTokens",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_assetOneAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_assetTwoAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_assetOneAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_assetTwoAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "priceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "yieldFarmed",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetOneAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_assetTwoAmount",
          "type": "uint256"
        }
      ],
      "name": "addInitialLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "amountOfOppositeTokenNeeded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetOneAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetOnePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetTwoAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetTwoPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getAssetBalace",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetTwo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getLpTokenQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sellingAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getSwapQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYield",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialLiquidityProvidedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTime",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTimeInitialLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastYieldFarmedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lpTokenQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sellAssetOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sellAssetTwo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "yieldTaken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "srcAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "zkReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd62a302d1b0fc677d9d6517001219a51f84dfe5e43b8f9b974d95506fbc81cfc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "2997864",
    "logsBloom": "0x
    "blockHash": "0x7e26bd0aea8afbbcf15954e898bd34c0a38243c017bb6e9b7af0d8e3bab63c21",
    "transactionHash": "0xd62a302d1b0fc677d9d6517001219a51f84dfe5e43b8f9b974d95506fbc81cfc",
    "logs": [],
    "blockNumber": 11,
    "cumulativeGasUsed": "2997864",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "0x0165878A594ca255338adfa4d48449f69242Eb8F"
  ],
  "numDeployments": 1,
  "solcInputHash": "48cb509c8d796d601f6af2caafafc13b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetOneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetTwoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addressNotCorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"assetNotCorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"initialLiquidityAlreadyProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"needToCallExistingFunction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notEnoughGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notEnoughTimePassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notEnoughTokens\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assetOneAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assetTwoAmount\",\"type\":\"uint256\"}],\"name\":\"liquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assetOneAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assetTwoAmount\",\"type\":\"uint256\"}],\"name\":\"liquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"priceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"yieldFarmed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetOneAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetTwoAmount\",\"type\":\"uint256\"}],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"amountOfOppositeTokenNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetOneAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetOnePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetTwoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetTwoPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAssetBalace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLpTokenQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSwapQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYield\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialLiquidityProvidedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimeInitialLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastYieldFarmedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpTokenQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellAssetOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellAssetTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yieldTaken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"srcAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"zkReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Implements IZKBridgeReceiver interface for cross-chain interactions and yield farming computations.\",\"kind\":\"dev\",\"methods\":{\"addInitialLiquidity(uint256,uint256)\":{\"details\":\"Function to add initial liquidity to the pool. Only callable by the owner.Needs the ERC-20 approval for transferFrom.\",\"params\":{\"_assetOneAmount\":\"The amount of the first asset to add.\",\"_assetTwoAmount\":\"The amount of the second asset to add.\"}},\"addLiquidity(address,address,uint256)\":{\"details\":\"Function to add additional liquidity to the pool.Needs the ERC-20 approval for transferFrom.\",\"params\":{\"_amount\":\"The amount of the first asset to add.\",\"_asset\":\"The address of the first asset.\",\"_secondAsset\":\"The address of the second asset.\"}},\"addressBalance()\":{\"details\":\"Function to get the current ETH balance of the contract.\",\"returns\":{\"_0\":\"The current ETH balance of the contract.\"}},\"amountOfOppositeTokenNeeded(address,uint256)\":{\"details\":\"Function to get the second part of the liquidity token pair needed for providing liquidity.\",\"params\":{\"_amount\":\"The amount of the asset.\",\"_asset\":\"The address of the asset.\"},\"returns\":{\"_0\":\"The quantity of the second asset needed for providing liquidity.\"}},\"assetOnePrice()\":{\"details\":\"Function to get the current price of the first asset in terms of the second asset.\",\"returns\":{\"_0\":\"The current price of the first asset * 10**18.\"}},\"assetTwoPrice()\":{\"details\":\"Function to get the current price of the second asset in terms of the first asset.\",\"returns\":{\"_0\":\"The current price of the second asset * 10**18.\"}},\"constructor\":{\"details\":\"Constructor to initialize the liquidity pool with two asset addresses.\",\"params\":{\"_assetOneAddress\":\"The address of the first asset.\",\"_assetTwoAddress\":\"The address of the second asset.\"}},\"getAssetBalace(address)\":{\"details\":\"Function to get the current balance of a given asset held by the contract.\",\"params\":{\"_address\":\"The address of the asset.\"},\"returns\":{\"_0\":\"The current balance of the asset.\"}},\"getAssetOne()\":{\"details\":\"Function to get the amount of the first asset held by the contract.\",\"returns\":{\"_0\":\"The current balance of the first asset.\"}},\"getAssetTwo()\":{\"details\":\"Function to get the amount of the second asset held by the contract.\",\"returns\":{\"_0\":\"The current balance of the second asset.\"}},\"getLpTokenQuantity(address)\":{\"details\":\"Function to get the quantity of LP tokens owned by a specific address.\",\"params\":{\"_address\":\"The address of the LP token holder.\"},\"returns\":{\"_0\":\"The quantity of LP tokens owned by the address.\"}},\"getSwapQuantity(address,uint256)\":{\"details\":\"Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\",\"params\":{\"_amount\":\"The amount of the first asset being sold.\",\"sellingAsset\":\"The address of the asset being sold.\"},\"returns\":{\"_0\":\"The quantity of the second asset that would be returned\"}},\"getYield()\":{\"details\":\"Function to allow users to claim their yield. Can be called once a day.\"},\"isTime()\":{\"details\":\"Function to check if enough time has passed for the user to claim yield.\",\"returns\":{\"_0\":\"Whether enough time has passed or not.\"}},\"isTimeInitialLiquidity()\":{\"details\":\"Function to check if enough time has passed since the initial liquidity was provided.\",\"returns\":{\"_0\":\"Whether enough time has passed or not.\"}},\"removeLiquidity(uint256)\":{\"details\":\"Function to remove liquidity from the pool.\",\"params\":{\"_amount\":\"The percentage of liquidity to withdraw(10 -> 10%).\"}},\"sellAssetOne(uint256)\":{\"details\":\"Function to sell the first asset and receive the second asset.\",\"params\":{\"_amount\":\"The amount of the first asset to sell.\"}},\"sellAssetTwo(uint256)\":{\"details\":\"Function to sell the second asset and receive the first asset.\",\"params\":{\"_amount\":\"The amount of the second asset to sell.\"}},\"zkReceive(uint16,address,uint64,bytes)\":{\"details\":\"Returns the request for lower gas fee computation\",\"params\":{\"payload\":\"returns the computation\"}}},\"title\":\"LiquidityPool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getYield()\":{\"notice\":\"sends the request to yield Calculator smart contract to compute yield with lower gas fee\"}},\"notice\":\"Manages liquidity provision, asset swapping, and yield generation in a decentralized manner.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex/LiquidityPool.sol\":\"LiquidityPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Dex/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../Router/InterfaceBridge.sol\\\";\\nimport \\\"./PoolTracker.sol\\\";\\n\\n// Custom errors for more descriptive and gas-efficient failure handling.\\nerror assetNotCorrect();\\nerror notEnoughTokens();\\nerror notEnoughGas();\\nerror notEnoughTimePassed();\\nerror initialLiquidityAlreadyProvided();\\nerror addressNotCorrect();\\nerror amountTooBig();\\nerror needToCallExistingFunction();\\n\\n/**\\n * @title LiquidityPool\\n * @notice Manages liquidity provision, asset swapping, and yield generation in a decentralized manner.\\n * @dev Implements IZKBridgeReceiver interface for cross-chain interactions and yield farming computations.\\n */\\ncontract LiquidityPool is IZKBridgeReceiver {\\n    // Events\\n    event priceChanged(address _asset, uint256 price);\\n    event liquidityAdded(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event liquidityRemoved(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event yieldFarmed(address indexed _address, uint256 _amount);\\n\\n    // State variables\\n    address public assetOneAddress;\\n    address public assetTwoAddress;\\n    uint256 public initialLiquidity;\\n    uint256 public liquidity;\\n    uint256 public yield;\\n    uint256 public swapFee = 1000000000000000;\\n    address public owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\\n    mapping(address => uint256) public lpTokenQuantity;\\n\\n    // Daily yield tracking\\n    mapping(address => uint256) public yieldTaken;\\n\\n    // Timestamp mapping for yield farming\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n    mapping(address => uint256) public initialLiquidityProvidedTime;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions only to the owner.\\n     */\\n    modifier onlyOwner() {\\n        msg.sender == owner;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\\n     * @param _assetOneAddress The address of the first asset.\\n     * @param _assetTwoAddress The address of the second asset.\\n     */\\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\\n        assetOneAddress = _assetOneAddress;\\n        assetTwoAddress = _assetTwoAddress;\\n        owner = msg.sender;\\n        swapFee = 1000000000000000; // 0.001 ether\\n    }\\n\\n    /**\\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _assetOneAmount The amount of the first asset to add.\\n     * @param _assetTwoAmount The amount of the second asset to add.\\n     */\\n    function addInitialLiquidity(\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    ) public onlyOwner {\\n        if (initialLiquidityProvidedTime[owner] > 0) {\\n            revert initialLiquidityAlreadyProvided();\\n        }\\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\\n\\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetOneAmount\\n        );\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetTwoAmount\\n        );\\n\\n        // SET THE INITIAL LIQUIDITY\\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\\n        liquidity = initialLiquidity;\\n\\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\\n        lpTokenQuantity[msg.sender] = initialLiquidity;\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\\n    }\\n\\n    /**\\n     * @dev Function to add additional liquidity to the pool.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _asset The address of the first asset.\\n     * @param _secondAsset The address of the second asset.\\n     * @param _amount The amount of the first asset to add.\\n     */\\n    function addLiquidity(\\n        address _asset,\\n        address _secondAsset,\\n        uint256 _amount\\n    ) external noReentrancy {\\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\\n        IERC20(_secondAsset).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOfOppositeTokenNeeded(_asset, _amount)\\n        );\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n\\n        // give lp tokens to new liquidity provider\\n        lpTokenQuantity[msg.sender] += (_amount *\\n            amountOfOppositeTokenNeeded(_asset, _amount));\\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(\\n            msg.sender,\\n            amountOfOppositeTokenNeeded(_asset, _amount),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to remove liquidity from the pool.\\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\\n     */\\n    function removeLiquidity(uint256 _amount) external noReentrancy {\\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) /\\n            100; // How much out of their liquidity they want to withdraw in percentage\\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) /\\n            1 ether;\\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) /\\n            1 ether;\\n        // condition for owner, because of the initial liquidity timer\\n        if (\\n            (msg.sender == owner) &&\\n            (isTimeInitialLiquidity() == false) &&\\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) <\\n                initialLiquidity)\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\\n        if (\\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\\n\\n        // EMIT EVENT\\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\\n    }\\n\\n    /**\\n     * @dev Function to sell the first asset and receive the second asset.\\n     * @param _amount The amount of the first asset to sell.\\n     */\\n    function sellAssetOne(\\n        uint256 _amount\\n    ) external payable noReentrancy returns (uint256) {\\n        // //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        // if (_amount >= getAssetOne()) {\\n        //     payable(msg.sender).transfer(msg.value);\\n        //     revert amountTooBig();\\n        // }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetTwo();\\n        uint256 assetOne = getAssetOne() + _amount;\\n        uint256 assetTwo = liquidity / assetOne;\\n        uint256 result = n - assetTwo;\\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n        // Returns the amount of token\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Function to sell the second asset and receive the first asset.\\n     * @param _amount The amount of the second asset to sell.\\n     */\\n    function sellAssetTwo(\\n        uint256 _amount\\n    ) external payable noReentrancy returns (uint256) {\\n        // //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        // if (_amount >= getAssetTwo()) {\\n        //     payable(msg.sender).transfer(msg.value); // Transfer value back\\n        //     revert amountTooBig();\\n        // }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetOne();\\n        uint256 assetTwo = getAssetTwo() + _amount;\\n        uint256 assetOne = liquidity / assetTwo;\\n        uint256 result = n - assetOne;\\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetOneAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n        //Returns amount of token\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Function to get the current balance of a given asset held by the contract.\\n     * @param _address The address of the asset.\\n     * @return The current balance of the asset.\\n     */\\n    function getAssetBalace(address _address) public view returns (uint256) {\\n        return IERC20(_address).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the first asset in terms of the second asset.\\n     * @return The current price of the first asset * 10**18.\\n     */\\n    function assetOnePrice() public view returns (uint256) {\\n        return (getAssetTwo() * 1 ether) / getAssetOne();\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the second asset in terms of the first asset.\\n     * @return The current price of the second asset * 10**18.\\n     */\\n    function assetTwoPrice() public view returns (uint256) {\\n        return (getAssetOne() * 1 ether) / getAssetTwo();\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the first asset held by the contract.\\n     * @return The current balance of the first asset.\\n     */\\n    function getAssetOne() public view returns (uint256) {\\n        return IERC20(assetOneAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the second asset held by the contract.\\n     * @return The current balance of the second asset.\\n     */\\n    function getAssetTwo() public view returns (uint256) {\\n        return IERC20(assetTwoAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\\n     * @param _address The address of the LP token holder.\\n     * @return The quantity of LP tokens owned by the address.\\n     */\\n    function getLpTokenQuantity(\\n        address _address\\n    ) public view returns (uint256) {\\n        if (msg.sender != owner && _address == msg.sender) {\\n            revert addressNotCorrect();\\n        }\\n        return lpTokenQuantity[_address];\\n    }\\n\\n    /**\\n     * @dev Function to get the current ETH balance of the contract.\\n     * @return The current ETH balance of the contract.\\n     */\\n    function addressBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\\n     * @param sellingAsset The address of the asset being sold.\\n     * @param _amount The amount of the first asset being sold.\\n     * @return The quantity of the second asset that would be returned\\n     */\\n    function getSwapQuantity(\\n        address sellingAsset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        if (sellingAsset == assetOneAddress) {\\n            uint256 newAssetOne = getAssetOne() + _amount;\\n            uint256 newAssetTwo = liquidity / newAssetOne;\\n            return getAssetTwo() - newAssetTwo;\\n        } else if (sellingAsset == assetTwoAddress) {\\n            uint256 newAssetTwo = getAssetTwo() + _amount;\\n            uint256 newAssetOne = liquidity / newAssetTwo;\\n            return getAssetOne() - newAssetOne;\\n        } else {\\n            revert assetNotCorrect();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\\n     * @param _asset The address of the asset.\\n     * @param _amount The amount of the asset.\\n     * @return The quantity of the second asset needed for providing liquidity.\\n     */\\n    function amountOfOppositeTokenNeeded(\\n        address _asset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        uint256 ratio;\\n        if (_asset == assetOneAddress) {\\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\\n        } else {\\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\\n        }\\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\\n        return amountNeeded;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    // Yield Farming and Time Locks\\n\\n    /**\\n     * @dev Function to allow users to claim their yield. Can be called once a day.\\n     *\\n     * @notice sends the request to yield Calculator smart contract to compute yield with lower gas fee\\n     */\\n    function getYield() public payable {\\n        if (isTime() == false) {\\n            revert notEnoughTimePassed();\\n        }\\n        //NOW SEND BACK THE AVAILABLE YIELD\\n        uint16 destinationChain = PoolTracker(owner).destinationChain();\\n        IZKBridge zkBridge = PoolTracker(owner).zkBridge();\\n        address yieldCalculator = PoolTracker(owner).yieldCalculator();\\n        bytes memory newPayload = abi.encode(msg.sender);\\n        uint256 fee = zkBridge.estimateFee(destinationChain);\\n        zkBridge.send{value: fee}(\\n            destinationChain,\\n            yieldCalculator,\\n            newPayload\\n        );\\n        // Pay this to our contract which will fund the bridge contract with tokens\\n        uint256 bridgeFee = zkBridge.estimateFee(destinationChain);\\n        (bool sent, ) = payable(owner).call{value: bridgeFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the request for lower gas fee computation\\n     *\\n     * @param payload returns the computation\\n     *\\n     */\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external {\\n        (uint256 availableYield, address user) = abi.decode(\\n            payload,\\n            (uint256, address)\\n        );\\n        //TODO handle your business\\n        if (availableYield > address(this).balance) {\\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[user] += availableYield;\\n        (bool sent, ) = payable(user).call{value: availableYield}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        // EMIT EVENT\\n        emit yieldFarmed(msg.sender, availableYield);\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed for the user to claim yield.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTime() public view returns (bool) {\\n        lastYieldFarmedTime[msg.sender];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTimeInitialLiquidity() public view returns (bool) {\\n        if (\\n            block.timestamp >\\n            (initialLiquidityProvidedTime[msg.sender] + 365 days)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    fallback() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    receive() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0xf9580fa904abc680af85468d281756a2e3ee43b19580c0483f3c02ca8888440a\",\"license\":\"MIT\"},\"contracts/Dex/PoolTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../Router/InterfaceBridge.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror PoolTracker_pairAlreadyExists();\\nerror PoolTracker_cantSwapSameToken();\\n\\n/**\\n * @title PoolTracker\\n * @dev Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem.\\n * Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions.\\n * Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\\n */\\ncontract PoolTracker {\\n    // Tracker for created pools, will add to database\\n    event poolCreated(LiquidityPool pool, address assetOne, address assetTwo);\\n\\n    // The owner of the PoolTracker contract, set to the deployer.\\n    address private owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // Hardcoded destination chain identifier and ZK Bridge address\\n    uint16 public destinationChain = 23;\\n    IZKBridge public zkBridge =\\n        IZKBridge(0xb20F0105f3598652a3bE569132F7b3F341106dDC);\\n\\n    // Address of the yield calculator contract, for bridging computational parts.\\n    address public yieldCalculator;\\n\\n    // Constructor: Sets the contract deployer as the owner.\\n    constructor(address _yieldCalculator) {\\n        owner = msg.sender;\\n        yieldCalculator = _yieldCalculator;\\n    }\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert();\\n        }\\n        _;\\n    }\\n\\n    // Mapping of pool Pairs, to store existing ones\\n    mapping(address => address[]) public poolPairs;\\n\\n    // Mapping a pool to the contracts, in case we wont store it in the database\\n    mapping(address => mapping(address => LiquidityPool)) public pairToPool;\\n\\n    // All the available tokens\\n    address[] public tokens;\\n\\n    /**\\n     * @dev Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial\\n     * transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings.\\n     * Emits a PoolCreated event upon successful creation.\\n     *\\n     * Requirements:\\n     * - The token pair must not already have an existing pool.\\n     * - The caller must have approved the contract to spend the necessary token amounts.\\n     *\\n     * @param _assetOneAddress The address of the first token in the pair.\\n     * @param _assetTwoAddress The address of the second token in the pair.\\n     * @param amountOne The amount of the first token to add to the pool.\\n     * @param amountTwo The amount of the second token to add to the pool.\\n     */\\n    function createPool(\\n        address _assetOneAddress,\\n        address _assetTwoAddress,\\n        uint256 amountOne,\\n        uint256 amountTwo\\n    ) external noReentrancy {\\n        if (\\n            exists(_assetOneAddress, _assetTwoAddress)\\n        ) // To prevent duplicate pools\\n        {\\n            revert PoolTracker_pairAlreadyExists();\\n        }\\n        // Transfer of tokens\\n        IERC20(_assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOne\\n        );\\n        IERC20(_assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountTwo\\n        );\\n        // Creation of pool\\n        LiquidityPool poolAddress = new LiquidityPool(\\n            _assetOneAddress,\\n            _assetTwoAddress\\n        );\\n        // Approve\\n        IERC20(_assetOneAddress).approve(address(poolAddress), amountOne);\\n        IERC20(_assetTwoAddress).approve(address(poolAddress), amountTwo);\\n        // Add initial liquidity\\n        poolAddress.addInitialLiquidity(amountOne, amountTwo);\\n        // Update mappings\\n        poolPairs[_assetOneAddress].push(_assetTwoAddress);\\n        poolPairs[_assetTwoAddress].push(_assetOneAddress);\\n        pairToPool[_assetOneAddress][_assetTwoAddress] = poolAddress;\\n        pairToPool[_assetTwoAddress][_assetOneAddress] = poolAddress;\\n\\n        if (tokenExists(_assetOneAddress) == false) {\\n            tokens.push(_assetOneAddress);\\n        }\\n        if (tokenExists(_assetTwoAddress) == false) {\\n            tokens.push(_assetTwoAddress);\\n        }\\n        // Emit the event\\n        emit poolCreated(poolAddress, _assetOneAddress, _assetTwoAddress);\\n    }\\n\\n    /**\\n     * @dev Checks if a liquidity pool exists for a given pair of tokens.\\n     *\\n     * @param token1 The address of the first token.\\n     * @param token2 The address of the second token.\\n     * @return bool Returns true if the pool exists, false otherwise.\\n     */\\n    function exists(address token1, address token2) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < poolPairs[token1].length; i++) {\\n            if (poolPairs[token1][i] == token2) {\\n                exist = true;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    /**\\n     * @dev Checks if a token is already tracked by the contract.\\n     *\\n     * @param tokenAddress The address of the token to check.\\n     * @return bool Returns true if the token is tracked, false otherwise.\\n     */\\n    function tokenExists(address tokenAddress) internal view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokenAddress == tokens[i]) {\\n                exist = true;\\n                break;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    // Routing token\\n    struct routingAddress {\\n        address tokenAddress;\\n        address priceFeed;\\n    }\\n\\n    // Array of routing Tokens\\n    routingAddress[] public routingAddresses;\\n\\n    /**\\n     * @dev Allows the contract owner to add or update the routing address for a token.\\n     * This is used for token swaps and price feed lookups.\\n     *\\n     * @param tokenAddress The token for which to set the routing.\\n     * @param priceFeed The Chainlink price feed address for the token.\\n     */\\n    function addRoutingAddress(\\n        address tokenAddress,\\n        address priceFeed\\n    ) external onlyOwner {\\n        if (routingAddresses.length == 0) {\\n            routingAddresses.push(routingAddress(tokenAddress, priceFeed));\\n        } else {\\n            for (uint256 i = 0; i < routingAddresses.length; i++) {\\n                if (routingAddresses[i].tokenAddress == tokenAddress) {\\n                    routingAddresses[i] = routingAddress(\\n                        tokenAddress,\\n                        priceFeed\\n                    );\\n                    break;\\n                } else if (i == routingAddresses.length - 1) {\\n                    routingAddresses.push(\\n                        routingAddress(tokenAddress, priceFeed)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Determines the optimal routing token for a swap between two tokens,\\n     * based on available liquidity and price feeds.\\n     *\\n     * @param address1 The address of the first token.\\n     * @param address2 The address of the second token.\\n     * @return address The address of the optimal routing token.\\n     */\\n    function tokenToRoute(\\n        address address1,\\n        address address2\\n    ) external view returns (address) {\\n        if (address1 == address2) {\\n            revert PoolTracker_cantSwapSameToken();\\n        }\\n        address[] memory token1pairs = poolPairs[address1];\\n        address[] memory token2pairs = poolPairs[address2];\\n\\n        address routingToken;\\n        int routingTokenLiquidity;\\n\\n        for (uint256 i; i < token1pairs.length; i++) {\\n            for (uint256 a; a < token2pairs.length; a++) {\\n                if (token1pairs[i] == token2pairs[a]) {\\n                    for (uint256 b; b < routingAddresses.length; b++) {\\n                        if (\\n                            routingAddresses[b].tokenAddress == token1pairs[i]\\n                        ) {\\n                            (, int answer, , , ) = AggregatorV3Interface(\\n                                routingAddresses[b].priceFeed\\n                            ).latestRoundData();\\n                            int liquidity;\\n                            LiquidityPool pool1 = pairToPool[address1][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            LiquidityPool pool2 = pairToPool[address2][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            uint256 balance1 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool1));\\n                            uint256 balance2 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool2));\\n                            liquidity =\\n                                (int(balance1) + int(balance2)) *\\n                                answer;\\n                            if (liquidity > routingTokenLiquidity) {\\n                                // Best choice so far if the liquidity is bigger than previous best token\\n                                routingToken = routingAddresses[b].tokenAddress;\\n                                routingTokenLiquidity = liquidity;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return routingToken;\\n    }\\n\\n    /**\\n     * @dev Returns all array of all tradable tokens on the platform\\n     *\\n     * @return array Returns tokens array.\\n     */\\n    function tokenList() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    /**\\n     * @dev Returns length or routingAddresses array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getRoutingAddressesLength() external view returns (uint256) {\\n        return routingAddresses.length;\\n    }\\n\\n    /**\\n     * @dev Returns length or poolPairs array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getPoolPairsLength(\\n        address tokenAddress\\n    ) external view returns (uint256) {\\n        return poolPairs[tokenAddress].length;\\n    }\\n\\n    /**\\n     * @dev owner can withdraw the fees to deposit to yield Calculator\\n     */\\n    function withdrawEther() external onlyOwner {\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1e28b114bbb312ef730baff55fee62eb2d231840eed9a442a378f6edabf3746f\",\"license\":\"MIT\"},\"contracts/Router/InterfaceBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IZKBridge {\\n    // @notice send a zkBridge message to the specified address at a zkBridge endpoint.\\n    // @param dstChainId - the destination chain identifier\\n    // @param dstAddress - the address on destination chain\\n    // @param payload - a custom bytes payload to send to the destination contract\\n    function send(\\n        uint16 dstChainId,\\n        address dstAddress,\\n        bytes memory payload\\n    ) external payable returns (uint64 nonce);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param dstChainId - the destination chain identifier\\n    function estimateFee(uint16 dstChainId) external view returns (uint256 fee);\\n}\\n\\ninterface IZKBridgeReceiver {\\n    // @notice zkBridge endpoint will invoke this function to deliver the message on the destination\\n    // @param srcChainId - the source endpoint identifier\\n    // @param srcAddress - the source sending contract address from the source chain\\n    // @param nonce - the ordered message nonce\\n    // @param payload - a custom bytes payload from send chain\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x57b2588179cffda143a904e7f55db5eebc526fa479fd3004ea2f521a7fa438a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c680006005553480156200001c57600080fd5b506040516200358338038062003583833981810160405281019062000042919062000184565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555066038d7ea4c680006005819055505050620001cb565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014c826200011f565b9050919050565b6200015e816200013f565b81146200016a57600080fd5b50565b6000815190506200017e8162000153565b92915050565b600080604083850312156200019e576200019d6200011a565b5b6000620001ae858286016200016d565b9250506020620001c1858286016200016d565b9150509250929050565b6133a880620001db6000396000f3fe6080604052600436106101c65760003560e01c80638477a634116100f7578063a97533b811610095578063e35ba8ab11610064578063e35ba8ab146106c3578063e4a76726146106ee578063f318e55714610717578063ffebfc8c14610742576101fd565b8063a97533b814610612578063aa03f2ed1461063d578063ce5efee314610668578063dc17162414610693576101fd565b80639a61c36a116100d15780639a61c36a146105585780639c8f9f2314610595578063a40f4fa1146105be578063a8754803146105e7576101fd565b80638477a634146104b35780638da5cb5b146104f057806395cc4c5e1461051b576101fd565b8063405eae91116101645780634d2d757c1161013e5780634d2d757c1461041657806354cf2aeb146104415780637c2628711461046c57806381bace7d14610476576101fd565b8063405eae911461039057806340702adc146103bb5780634257dc4c146103e6576101fd565b806328593984116101a057806328593984146102c257806328da1aef146102ed5780632d4ce6691461032a5780632de9952a14610367576101fd565b8063131a6f011461022f5780631a6865021461025a57806324aabb9214610285576101fd565b366101fd576040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561023b57600080fd5b5061024461077f565b6040516102519190612959565b60405180910390f35b34801561026657600080fd5b5061026f610831565b60405161027c9190612959565b60405180910390f35b34801561029157600080fd5b506102ac60048036038101906102a791906129dc565b610837565b6040516102b99190612959565b60405180910390f35b3480156102ce57600080fd5b506102d761084f565b6040516102e49190612959565b60405180910390f35b3480156102f957600080fd5b50610314600480360381019061030f9190612a35565b610855565b6040516103219190612959565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c91906129dc565b6109c4565b60405161035e9190612959565b60405180910390f35b34801561037357600080fd5b5061038e60048036038101906103899190612b54565b610a56565b005b34801561039c57600080fd5b506103a5610c00565b6040516103b29190612bf7565b60405180910390f35b3480156103c757600080fd5b506103d0610caf565b6040516103dd9190612959565b60405180910390f35b61040060048036038101906103fb9190612c12565b610cb5565b60405161040d9190612959565b60405180910390f35b34801561042257600080fd5b5061042b6110c7565b6040516104389190612bf7565b60405180910390f35b34801561044d57600080fd5b50610456611130565b6040516104639190612959565b60405180910390f35b610474611136565b005b34801561048257600080fd5b5061049d600480360381019061049891906129dc565b61160e565b6040516104aa9190612959565b60405180910390f35b3480156104bf57600080fd5b506104da60048036038101906104d591906129dc565b611717565b6040516104e79190612959565b60405180910390f35b3480156104fc57600080fd5b5061050561172f565b6040516105129190612c4e565b60405180910390f35b34801561052757600080fd5b50610542600480360381019061053d9190612a35565b611755565b60405161054f9190612959565b60405180910390f35b34801561056457600080fd5b5061057f600480360381019061057a91906129dc565b61183e565b60405161058c9190612959565b60405180910390f35b3480156105a157600080fd5b506105bc60048036038101906105b79190612c12565b611856565b005b3480156105ca57600080fd5b506105e560048036038101906105e09190612c69565b611e02565b005b3480156105f357600080fd5b506105fc612107565b6040516106099190612c4e565b60405180910390f35b34801561061e57600080fd5b5061062761212d565b6040516106349190612959565b60405180910390f35b34801561064957600080fd5b50610652612161565b60405161065f9190612959565b60405180910390f35b34801561067457600080fd5b5061067d612212565b60405161068a9190612c4e565b60405180910390f35b6106ad60048036038101906106a89190612c12565b612236565b6040516106ba9190612959565b60405180910390f35b3480156106cf57600080fd5b506106d8612648565b6040516106e59190612959565b60405180910390f35b3480156106fa57600080fd5b5061071560048036038101906107109190612ca9565b61267c565b005b34801561072357600080fd5b5061072c612920565b6040516107399190612959565b60405180910390f35b34801561074e57600080fd5b50610769600480360381019061076491906129dc565b612928565b6040516107769190612959565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107dc9190612c4e565b60206040518083038186803b1580156107f457600080fd5b505afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190612d11565b905090565b60035481565b60076020528060005260406000206000915090505481565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108f1576000826108b7612161565b6108c19190612d6d565b90506000816003546108d39190612df2565b9050806108de61077f565b6108e89190612e23565b925050506109be565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561098c5760008261095261077f565b61095c9190612d6d565b905060008160035461096e9190612df2565b905080610979612161565b6109839190612e23565b925050506109be565b6040517fd526485500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109ff9190612c4e565b60206040518083038186803b158015610a1757600080fd5b505afa158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f9190612d11565b9050919050565b6000808383810190610a689190612e95565b9150915047821115610aa6576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610af59190612d6d565b9250508190555060008173ffffffffffffffffffffffffffffffffffffffff1683604051610b2290612f06565b60006040518083038185875af1925050503d8060008114610b5f576040519150601f19603f3d011682016040523d82523d6000602084013e610b64565b606091505b5050905080610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f90612f78565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fbf630ce062dbeaeb6c23a21390208b25de2ac16fb8502eab6054a70d9e34b8ec84604051610bee9190612959565b60405180910390a25050505050505050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205060004290508062015180600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c969190612d6d565b1015610ca6576001915050610cac565b60009150505b90565b60025481565b6000600660149054906101000a900460ff1615610d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfe90612fe4565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550600554341015610d5e576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460046000828254610d729190612d6d565b92505081905550600060055434610d899190612e23565b90506000610d9561077f565b9050600084610da2612161565b610dac9190612d6d565b9050600081600354610dbe9190612df2565b905060008184610dce9190612e23565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b8152600401610e2d93929190613004565b602060405180830381600087803b158015610e4757600080fd5b505af1158015610e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7f9190613067565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610edd929190613094565b602060405180830381600087803b158015610ef757600080fd5b505af1158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190613067565b5060003373ffffffffffffffffffffffffffffffffffffffff1686604051610f5690612f06565b60006040518083038185875af1925050503d8060008114610f93576040519150601f19603f3d011682016040523d82523d6000602084013e610f98565b606091505b5050905080610fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd390612f78565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661102661212d565b604051611034929190613094565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611088612648565b604051611096929190613094565b60405180910390a18196505050505050506000600660146101000a81548160ff021916908315150217905550919050565b60006301e13380600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111189190612d6d565b421115611128576001905061112d565b600090505b90565b60055481565b60001515611142610c00565b1515141561117c576040517ffdbfe33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd1337a66040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e657600080fd5b505afa1580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e91906130d2565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b42446596040518163ffffffff1660e01b815260040160206040518083038186803b15801561128a57600080fd5b505afa15801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c2919061313d565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663620e3a646040518163ffffffff1660e01b815260040160206040518083038186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611366919061317f565b905060003360405160200161137b9190612c4e565b604051602081830303815290604052905060008373ffffffffffffffffffffffffffffffffffffffff1663207bae8a866040518263ffffffff1660e01b81526004016113c791906131bb565b60206040518083038186803b1580156113df57600080fd5b505afa1580156113f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114179190612d11565b90508373ffffffffffffffffffffffffffffffffffffffff1663b1d995dd828786866040518563ffffffff1660e01b81526004016114579392919061326f565b6020604051808303818588803b15801561147057600080fd5b505af1158015611484573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906114a991906132c2565b5060008473ffffffffffffffffffffffffffffffffffffffff1663207bae8a876040518263ffffffff1660e01b81526004016114e591906131bb565b60206040518083038186803b1580156114fd57600080fd5b505afa158015611511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115359190612d11565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161157f90612f06565b60006040518083038185875af1925050503d80600081146115bc576040519150601f19603f3d011682016040523d82523d6000602084013e6115c1565b606091505b5050905080611605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fc90612f78565b60405180910390fd5b50505050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561169957503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156116d0576040517f2ffae41300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a6020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156117e0576117b4612161565b670de0b6b3a76400006117c561077f565b6117cf91906132ef565b6117d99190612df2565b9050611810565b6117e861077f565b670de0b6b3a76400006117f9612161565b61180391906132ef565b61180d9190612df2565b90505b6000670de0b6b3a7640000828561182791906132ef565b6118319190612df2565b9050809250505092915050565b60086020528060005260406000206000915090505481565b600660149054906101000a900460ff16156118a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189d90612fe4565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600354670de0b6b3a76400008361191e91906132ef565b6119289190612df2565b905060006064848361193a91906132ef565b6119449190612df2565b90506000670de0b6b3a7640000611959612161565b8361196491906132ef565b61196e9190612df2565b90506000670de0b6b3a764000061198361077f565b8461198e91906132ef565b6119989190612df2565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611a025750600015156119fe6110c7565b1515145b8015611a6457506002548183611a1891906132ef565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a629190612e23565b105b15611a9b576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611af59190612c4e565b60206040518083038186803b158015611b0d57600080fd5b505afa158015611b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b459190612d11565b1080611bfa575080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ba89190612c4e565b60206040518083038186803b158015611bc057600080fd5b505afa158015611bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf89190612d11565b105b15611c31576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611c8c929190613094565b602060405180830381600087803b158015611ca657600080fd5b505af1158015611cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cde9190613067565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611d3c929190613094565b602060405180830381600087803b158015611d5657600080fd5b505af1158015611d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8e9190613067565b503373ffffffffffffffffffffffffffffffffffffffff167fbad053f5b243c76f17611a28d4554167bd09e3491be13032dd4af620e8e228728383604051611dd7929190613349565b60405180910390a250505050506000600660146101000a81548160ff02191690831515021790555050565b600660009054906101000a9050506000600a6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611eac576040517f17ebf42200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611f4d93929190613004565b602060405180830381600087803b158015611f6757600080fd5b505af1158015611f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9f9190613067565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611fff93929190613004565b602060405180830381600087803b15801561201957600080fd5b505af115801561202d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120519190613067565b50808261205e91906132ef565b600281905550600254600381905550600254600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba61483836040516120fb929190613349565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612137612161565b670de0b6b3a764000061214861077f565b61215291906132ef565b61215c9190612df2565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016121bd9190612c4e565b60206040518083038186803b1580156121d557600080fd5b505afa1580156121e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220d9190612d11565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660149054906101000a900460ff1615612288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227f90612fe4565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055506005543410156122df576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554600460008282546122f39190612d6d565b9250508190555060006005543461230a9190612e23565b90506000612316612161565b905060008461232361077f565b61232d9190612d6d565b905060008160035461233f9190612df2565b90506000818461234f9190612e23565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b81526004016123b093929190613004565b602060405180830381600087803b1580156123ca57600080fd5b505af11580156123de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124029190613067565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161245e929190613094565b602060405180830381600087803b15801561247857600080fd5b505af115801561248c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b09190613067565b5060003373ffffffffffffffffffffffffffffffffffffffff16866040516124d790612f06565b60006040518083038185875af1925050503d8060008114612514576040519150601f19603f3d011682016040523d82523d6000602084013e612519565b606091505b505090508061255d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255490612f78565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166125a761212d565b6040516125b5929190613094565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612609612648565b604051612617929190613094565b60405180910390a18196505050505050506000600660146101000a81548160ff021916908315150217905550919050565b600061265261077f565b670de0b6b3a7640000612663612161565b61266d91906132ef565b6126779190612df2565b905090565b600660149054906101000a900460ff16156126cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c390612fe4565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd333061270f8786611755565b6040518463ffffffff1660e01b815260040161272d93929190613004565b602060405180830381600087803b15801561274757600080fd5b505af115801561275b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277f9190613067565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016127bd93929190613004565b602060405180830381600087803b1580156127d757600080fd5b505af11580156127eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280f9190613067565b5061281a8382611755565b8161282591906132ef565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128739190612d6d565b925050819055506128848382611755565b8161288f91906132ef565b600360008282546128a09190612d6d565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6146128e98584611755565b836040516128f8929190613349565b60405180910390a26000600660146101000a81548160ff021916908315150217905550505050565b600047905090565b60096020528060005260406000206000915090505481565b6000819050919050565b61295381612940565b82525050565b600060208201905061296e600083018461294a565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129a98261297e565b9050919050565b6129b98161299e565b81146129c457600080fd5b50565b6000813590506129d6816129b0565b92915050565b6000602082840312156129f2576129f1612974565b5b6000612a00848285016129c7565b91505092915050565b612a1281612940565b8114612a1d57600080fd5b50565b600081359050612a2f81612a09565b92915050565b60008060408385031215612a4c57612a4b612974565b5b6000612a5a858286016129c7565b9250506020612a6b85828601612a20565b9150509250929050565b600061ffff82169050919050565b612a8c81612a75565b8114612a9757600080fd5b50565b600081359050612aa981612a83565b92915050565b600067ffffffffffffffff82169050919050565b612acc81612aaf565b8114612ad757600080fd5b50565b600081359050612ae981612ac3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612b1457612b13612aef565b5b8235905067ffffffffffffffff811115612b3157612b30612af4565b5b602083019150836001820283011115612b4d57612b4c612af9565b5b9250929050565b600080600080600060808688031215612b7057612b6f612974565b5b6000612b7e88828901612a9a565b9550506020612b8f888289016129c7565b9450506040612ba088828901612ada565b935050606086013567ffffffffffffffff811115612bc157612bc0612979565b5b612bcd88828901612afe565b92509250509295509295909350565b60008115159050919050565b612bf181612bdc565b82525050565b6000602082019050612c0c6000830184612be8565b92915050565b600060208284031215612c2857612c27612974565b5b6000612c3684828501612a20565b91505092915050565b612c488161299e565b82525050565b6000602082019050612c636000830184612c3f565b92915050565b60008060408385031215612c8057612c7f612974565b5b6000612c8e85828601612a20565b9250506020612c9f85828601612a20565b9150509250929050565b600080600060608486031215612cc257612cc1612974565b5b6000612cd0868287016129c7565b9350506020612ce1868287016129c7565b9250506040612cf286828701612a20565b9150509250925092565b600081519050612d0b81612a09565b92915050565b600060208284031215612d2757612d26612974565b5b6000612d3584828501612cfc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d7882612940565b9150612d8383612940565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612db857612db7612d3e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612dfd82612940565b9150612e0883612940565b925082612e1857612e17612dc3565b5b828204905092915050565b6000612e2e82612940565b9150612e3983612940565b925082821015612e4c57612e4b612d3e565b5b828203905092915050565b6000612e628261297e565b9050919050565b612e7281612e57565b8114612e7d57600080fd5b50565b600081359050612e8f81612e69565b92915050565b60008060408385031215612eac57612eab612974565b5b6000612eba85828601612a20565b9250506020612ecb85828601612e80565b9150509250929050565b600081905092915050565b50565b6000612ef0600083612ed5565b9150612efb82612ee0565b600082019050919050565b6000612f1182612ee3565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000612f62601483612f1b565b9150612f6d82612f2c565b602082019050919050565b60006020820190508181036000830152612f9181612f55565b9050919050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b6000612fce600e83612f1b565b9150612fd982612f98565b602082019050919050565b60006020820190508181036000830152612ffd81612fc1565b9050919050565b60006060820190506130196000830186612c3f565b6130266020830185612c3f565b613033604083018461294a565b949350505050565b61304481612bdc565b811461304f57600080fd5b50565b6000815190506130618161303b565b92915050565b60006020828403121561307d5761307c612974565b5b600061308b84828501613052565b91505092915050565b60006040820190506130a96000830185612c3f565b6130b6602083018461294a565b9392505050565b6000815190506130cc81612a83565b92915050565b6000602082840312156130e8576130e7612974565b5b60006130f6848285016130bd565b91505092915050565b600061310a8261299e565b9050919050565b61311a816130ff565b811461312557600080fd5b50565b60008151905061313781613111565b92915050565b60006020828403121561315357613152612974565b5b600061316184828501613128565b91505092915050565b600081519050613179816129b0565b92915050565b60006020828403121561319557613194612974565b5b60006131a38482850161316a565b91505092915050565b6131b581612a75565b82525050565b60006020820190506131d060008301846131ac565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156132105780820151818401526020810190506131f5565b8381111561321f576000848401525b50505050565b6000601f19601f8301169050919050565b6000613241826131d6565b61324b81856131e1565b935061325b8185602086016131f2565b61326481613225565b840191505092915050565b600060608201905061328460008301866131ac565b6132916020830185612c3f565b81810360408301526132a38184613236565b9050949350505050565b6000815190506132bc81612ac3565b92915050565b6000602082840312156132d8576132d7612974565b5b60006132e6848285016132ad565b91505092915050565b60006132fa82612940565b915061330583612940565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561333e5761333d612d3e565b5b828202905092915050565b600060408201905061335e600083018561294a565b61336b602083018461294a565b939250505056fea264697066735822122092a0cbeb99007ee164e60064a0d8a6430e1fa85d1526833d5a6ce39de87e48b464736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c80638477a634116100f7578063a97533b811610095578063e35ba8ab11610064578063e35ba8ab146106c3578063e4a76726146106ee578063f318e55714610717578063ffebfc8c14610742576101fd565b8063a97533b814610612578063aa03f2ed1461063d578063ce5efee314610668578063dc17162414610693576101fd565b80639a61c36a116100d15780639a61c36a146105585780639c8f9f2314610595578063a40f4fa1146105be578063a8754803146105e7576101fd565b80638477a634146104b35780638da5cb5b146104f057806395cc4c5e1461051b576101fd565b8063405eae91116101645780634d2d757c1161013e5780634d2d757c1461041657806354cf2aeb146104415780637c2628711461046c57806381bace7d14610476576101fd565b8063405eae911461039057806340702adc146103bb5780634257dc4c146103e6576101fd565b806328593984116101a057806328593984146102c257806328da1aef146102ed5780632d4ce6691461032a5780632de9952a14610367576101fd565b8063131a6f011461022f5780631a6865021461025a57806324aabb9214610285576101fd565b366101fd576040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561023b57600080fd5b5061024461077f565b6040516102519190612959565b60405180910390f35b34801561026657600080fd5b5061026f610831565b60405161027c9190612959565b60405180910390f35b34801561029157600080fd5b506102ac60048036038101906102a791906129dc565b610837565b6040516102b99190612959565b60405180910390f35b3480156102ce57600080fd5b506102d761084f565b6040516102e49190612959565b60405180910390f35b3480156102f957600080fd5b50610314600480360381019061030f9190612a35565b610855565b6040516103219190612959565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c91906129dc565b6109c4565b60405161035e9190612959565b60405180910390f35b34801561037357600080fd5b5061038e60048036038101906103899190612b54565b610a56565b005b34801561039c57600080fd5b506103a5610c00565b6040516103b29190612bf7565b60405180910390f35b3480156103c757600080fd5b506103d0610caf565b6040516103dd9190612959565b60405180910390f35b61040060048036038101906103fb9190612c12565b610cb5565b60405161040d9190612959565b60405180910390f35b34801561042257600080fd5b5061042b6110c7565b6040516104389190612bf7565b60405180910390f35b34801561044d57600080fd5b50610456611130565b6040516104639190612959565b60405180910390f35b610474611136565b005b34801561048257600080fd5b5061049d600480360381019061049891906129dc565b61160e565b6040516104aa9190612959565b60405180910390f35b3480156104bf57600080fd5b506104da60048036038101906104d591906129dc565b611717565b6040516104e79190612959565b60405180910390f35b3480156104fc57600080fd5b5061050561172f565b6040516105129190612c4e565b60405180910390f35b34801561052757600080fd5b50610542600480360381019061053d9190612a35565b611755565b60405161054f9190612959565b60405180910390f35b34801561056457600080fd5b5061057f600480360381019061057a91906129dc565b61183e565b60405161058c9190612959565b60405180910390f35b3480156105a157600080fd5b506105bc60048036038101906105b79190612c12565b611856565b005b3480156105ca57600080fd5b506105e560048036038101906105e09190612c69565b611e02565b005b3480156105f357600080fd5b506105fc612107565b6040516106099190612c4e565b60405180910390f35b34801561061e57600080fd5b5061062761212d565b6040516106349190612959565b60405180910390f35b34801561064957600080fd5b50610652612161565b60405161065f9190612959565b60405180910390f35b34801561067457600080fd5b5061067d612212565b60405161068a9190612c4e565b60405180910390f35b6106ad60048036038101906106a89190612c12565b612236565b6040516106ba9190612959565b60405180910390f35b3480156106cf57600080fd5b506106d8612648565b6040516106e59190612959565b60405180910390f35b3480156106fa57600080fd5b5061071560048036038101906107109190612ca9565b61267c565b005b34801561072357600080fd5b5061072c612920565b6040516107399190612959565b60405180910390f35b34801561074e57600080fd5b50610769600480360381019061076491906129dc565b612928565b6040516107769190612959565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107dc9190612c4e565b60206040518083038186803b1580156107f457600080fd5b505afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190612d11565b905090565b60035481565b60076020528060005260406000206000915090505481565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108f1576000826108b7612161565b6108c19190612d6d565b90506000816003546108d39190612df2565b9050806108de61077f565b6108e89190612e23565b925050506109be565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561098c5760008261095261077f565b61095c9190612d6d565b905060008160035461096e9190612df2565b905080610979612161565b6109839190612e23565b925050506109be565b6040517fd526485500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109ff9190612c4e565b60206040518083038186803b158015610a1757600080fd5b505afa158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f9190612d11565b9050919050565b6000808383810190610a689190612e95565b9150915047821115610aa6576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610af59190612d6d565b9250508190555060008173ffffffffffffffffffffffffffffffffffffffff1683604051610b2290612f06565b60006040518083038185875af1925050503d8060008114610b5f576040519150601f19603f3d011682016040523d82523d6000602084013e610b64565b606091505b5050905080610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f90612f78565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fbf630ce062dbeaeb6c23a21390208b25de2ac16fb8502eab6054a70d9e34b8ec84604051610bee9190612959565b60405180910390a25050505050505050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205060004290508062015180600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c969190612d6d565b1015610ca6576001915050610cac565b60009150505b90565b60025481565b6000600660149054906101000a900460ff1615610d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfe90612fe4565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550600554341015610d5e576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460046000828254610d729190612d6d565b92505081905550600060055434610d899190612e23565b90506000610d9561077f565b9050600084610da2612161565b610dac9190612d6d565b9050600081600354610dbe9190612df2565b905060008184610dce9190612e23565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b8152600401610e2d93929190613004565b602060405180830381600087803b158015610e4757600080fd5b505af1158015610e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7f9190613067565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610edd929190613094565b602060405180830381600087803b158015610ef757600080fd5b505af1158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190613067565b5060003373ffffffffffffffffffffffffffffffffffffffff1686604051610f5690612f06565b60006040518083038185875af1925050503d8060008114610f93576040519150601f19603f3d011682016040523d82523d6000602084013e610f98565b606091505b5050905080610fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd390612f78565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661102661212d565b604051611034929190613094565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611088612648565b604051611096929190613094565b60405180910390a18196505050505050506000600660146101000a81548160ff021916908315150217905550919050565b60006301e13380600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111189190612d6d565b421115611128576001905061112d565b600090505b90565b60055481565b60001515611142610c00565b1515141561117c576040517ffdbfe33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd1337a66040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e657600080fd5b505afa1580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e91906130d2565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b42446596040518163ffffffff1660e01b815260040160206040518083038186803b15801561128a57600080fd5b505afa15801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c2919061313d565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663620e3a646040518163ffffffff1660e01b815260040160206040518083038186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611366919061317f565b905060003360405160200161137b9190612c4e565b604051602081830303815290604052905060008373ffffffffffffffffffffffffffffffffffffffff1663207bae8a866040518263ffffffff1660e01b81526004016113c791906131bb565b60206040518083038186803b1580156113df57600080fd5b505afa1580156113f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114179190612d11565b90508373ffffffffffffffffffffffffffffffffffffffff1663b1d995dd828786866040518563ffffffff1660e01b81526004016114579392919061326f565b6020604051808303818588803b15801561147057600080fd5b505af1158015611484573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906114a991906132c2565b5060008473ffffffffffffffffffffffffffffffffffffffff1663207bae8a876040518263ffffffff1660e01b81526004016114e591906131bb565b60206040518083038186803b1580156114fd57600080fd5b505afa158015611511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115359190612d11565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161157f90612f06565b60006040518083038185875af1925050503d80600081146115bc576040519150601f19603f3d011682016040523d82523d6000602084013e6115c1565b606091505b5050905080611605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fc90612f78565b60405180910390fd5b50505050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561169957503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156116d0576040517f2ffae41300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a6020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156117e0576117b4612161565b670de0b6b3a76400006117c561077f565b6117cf91906132ef565b6117d99190612df2565b9050611810565b6117e861077f565b670de0b6b3a76400006117f9612161565b61180391906132ef565b61180d9190612df2565b90505b6000670de0b6b3a7640000828561182791906132ef565b6118319190612df2565b9050809250505092915050565b60086020528060005260406000206000915090505481565b600660149054906101000a900460ff16156118a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189d90612fe4565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600354670de0b6b3a76400008361191e91906132ef565b6119289190612df2565b905060006064848361193a91906132ef565b6119449190612df2565b90506000670de0b6b3a7640000611959612161565b8361196491906132ef565b61196e9190612df2565b90506000670de0b6b3a764000061198361077f565b8461198e91906132ef565b6119989190612df2565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611a025750600015156119fe6110c7565b1515145b8015611a6457506002548183611a1891906132ef565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a629190612e23565b105b15611a9b576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611af59190612c4e565b60206040518083038186803b158015611b0d57600080fd5b505afa158015611b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b459190612d11565b1080611bfa575080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ba89190612c4e565b60206040518083038186803b158015611bc057600080fd5b505afa158015611bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf89190612d11565b105b15611c31576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611c8c929190613094565b602060405180830381600087803b158015611ca657600080fd5b505af1158015611cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cde9190613067565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611d3c929190613094565b602060405180830381600087803b158015611d5657600080fd5b505af1158015611d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8e9190613067565b503373ffffffffffffffffffffffffffffffffffffffff167fbad053f5b243c76f17611a28d4554167bd09e3491be13032dd4af620e8e228728383604051611dd7929190613349565b60405180910390a250505050506000600660146101000a81548160ff02191690831515021790555050565b600660009054906101000a9050506000600a6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611eac576040517f17ebf42200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611f4d93929190613004565b602060405180830381600087803b158015611f6757600080fd5b505af1158015611f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9f9190613067565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611fff93929190613004565b602060405180830381600087803b15801561201957600080fd5b505af115801561202d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120519190613067565b50808261205e91906132ef565b600281905550600254600381905550600254600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba61483836040516120fb929190613349565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612137612161565b670de0b6b3a764000061214861077f565b61215291906132ef565b61215c9190612df2565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016121bd9190612c4e565b60206040518083038186803b1580156121d557600080fd5b505afa1580156121e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220d9190612d11565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660149054906101000a900460ff1615612288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227f90612fe4565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055506005543410156122df576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554600460008282546122f39190612d6d565b9250508190555060006005543461230a9190612e23565b90506000612316612161565b905060008461232361077f565b61232d9190612d6d565b905060008160035461233f9190612df2565b90506000818461234f9190612e23565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b81526004016123b093929190613004565b602060405180830381600087803b1580156123ca57600080fd5b505af11580156123de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124029190613067565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161245e929190613094565b602060405180830381600087803b15801561247857600080fd5b505af115801561248c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b09190613067565b5060003373ffffffffffffffffffffffffffffffffffffffff16866040516124d790612f06565b60006040518083038185875af1925050503d8060008114612514576040519150601f19603f3d011682016040523d82523d6000602084013e612519565b606091505b505090508061255d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255490612f78565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166125a761212d565b6040516125b5929190613094565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612609612648565b604051612617929190613094565b60405180910390a18196505050505050506000600660146101000a81548160ff021916908315150217905550919050565b600061265261077f565b670de0b6b3a7640000612663612161565b61266d91906132ef565b6126779190612df2565b905090565b600660149054906101000a900460ff16156126cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c390612fe4565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd333061270f8786611755565b6040518463ffffffff1660e01b815260040161272d93929190613004565b602060405180830381600087803b15801561274757600080fd5b505af115801561275b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277f9190613067565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016127bd93929190613004565b602060405180830381600087803b1580156127d757600080fd5b505af11580156127eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280f9190613067565b5061281a8382611755565b8161282591906132ef565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128739190612d6d565b925050819055506128848382611755565b8161288f91906132ef565b600360008282546128a09190612d6d565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6146128e98584611755565b836040516128f8929190613349565b60405180910390a26000600660146101000a81548160ff021916908315150217905550505050565b600047905090565b60096020528060005260406000206000915090505481565b6000819050919050565b61295381612940565b82525050565b600060208201905061296e600083018461294a565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129a98261297e565b9050919050565b6129b98161299e565b81146129c457600080fd5b50565b6000813590506129d6816129b0565b92915050565b6000602082840312156129f2576129f1612974565b5b6000612a00848285016129c7565b91505092915050565b612a1281612940565b8114612a1d57600080fd5b50565b600081359050612a2f81612a09565b92915050565b60008060408385031215612a4c57612a4b612974565b5b6000612a5a858286016129c7565b9250506020612a6b85828601612a20565b9150509250929050565b600061ffff82169050919050565b612a8c81612a75565b8114612a9757600080fd5b50565b600081359050612aa981612a83565b92915050565b600067ffffffffffffffff82169050919050565b612acc81612aaf565b8114612ad757600080fd5b50565b600081359050612ae981612ac3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612b1457612b13612aef565b5b8235905067ffffffffffffffff811115612b3157612b30612af4565b5b602083019150836001820283011115612b4d57612b4c612af9565b5b9250929050565b600080600080600060808688031215612b7057612b6f612974565b5b6000612b7e88828901612a9a565b9550506020612b8f888289016129c7565b9450506040612ba088828901612ada565b935050606086013567ffffffffffffffff811115612bc157612bc0612979565b5b612bcd88828901612afe565b92509250509295509295909350565b60008115159050919050565b612bf181612bdc565b82525050565b6000602082019050612c0c6000830184612be8565b92915050565b600060208284031215612c2857612c27612974565b5b6000612c3684828501612a20565b91505092915050565b612c488161299e565b82525050565b6000602082019050612c636000830184612c3f565b92915050565b60008060408385031215612c8057612c7f612974565b5b6000612c8e85828601612a20565b9250506020612c9f85828601612a20565b9150509250929050565b600080600060608486031215612cc257612cc1612974565b5b6000612cd0868287016129c7565b9350506020612ce1868287016129c7565b9250506040612cf286828701612a20565b9150509250925092565b600081519050612d0b81612a09565b92915050565b600060208284031215612d2757612d26612974565b5b6000612d3584828501612cfc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d7882612940565b9150612d8383612940565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612db857612db7612d3e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612dfd82612940565b9150612e0883612940565b925082612e1857612e17612dc3565b5b828204905092915050565b6000612e2e82612940565b9150612e3983612940565b925082821015612e4c57612e4b612d3e565b5b828203905092915050565b6000612e628261297e565b9050919050565b612e7281612e57565b8114612e7d57600080fd5b50565b600081359050612e8f81612e69565b92915050565b60008060408385031215612eac57612eab612974565b5b6000612eba85828601612a20565b9250506020612ecb85828601612e80565b9150509250929050565b600081905092915050565b50565b6000612ef0600083612ed5565b9150612efb82612ee0565b600082019050919050565b6000612f1182612ee3565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000612f62601483612f1b565b9150612f6d82612f2c565b602082019050919050565b60006020820190508181036000830152612f9181612f55565b9050919050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b6000612fce600e83612f1b565b9150612fd982612f98565b602082019050919050565b60006020820190508181036000830152612ffd81612fc1565b9050919050565b60006060820190506130196000830186612c3f565b6130266020830185612c3f565b613033604083018461294a565b949350505050565b61304481612bdc565b811461304f57600080fd5b50565b6000815190506130618161303b565b92915050565b60006020828403121561307d5761307c612974565b5b600061308b84828501613052565b91505092915050565b60006040820190506130a96000830185612c3f565b6130b6602083018461294a565b9392505050565b6000815190506130cc81612a83565b92915050565b6000602082840312156130e8576130e7612974565b5b60006130f6848285016130bd565b91505092915050565b600061310a8261299e565b9050919050565b61311a816130ff565b811461312557600080fd5b50565b60008151905061313781613111565b92915050565b60006020828403121561315357613152612974565b5b600061316184828501613128565b91505092915050565b600081519050613179816129b0565b92915050565b60006020828403121561319557613194612974565b5b60006131a38482850161316a565b91505092915050565b6131b581612a75565b82525050565b60006020820190506131d060008301846131ac565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156132105780820151818401526020810190506131f5565b8381111561321f576000848401525b50505050565b6000601f19601f8301169050919050565b6000613241826131d6565b61324b81856131e1565b935061325b8185602086016131f2565b61326481613225565b840191505092915050565b600060608201905061328460008301866131ac565b6132916020830185612c3f565b81810360408301526132a38184613236565b9050949350505050565b6000815190506132bc81612ac3565b92915050565b6000602082840312156132d8576132d7612974565b5b60006132e6848285016132ad565b91505092915050565b60006132fa82612940565b915061330583612940565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561333e5761333d612d3e565b5b828202905092915050565b600060408201905061335e600083018561294a565b61336b602083018461294a565b939250505056fea264697066735822122092a0cbeb99007ee164e60064a0d8a6430e1fa85d1526833d5a6ce39de87e48b464736f6c63430008090033",
  "devdoc": {
    "details": "Implements IZKBridgeReceiver interface for cross-chain interactions and yield farming computations.",
    "kind": "dev",
    "methods": {
      "addInitialLiquidity(uint256,uint256)": {
        "details": "Function to add initial liquidity to the pool. Only callable by the owner.Needs the ERC-20 approval for transferFrom.",
        "params": {
          "_assetOneAmount": "The amount of the first asset to add.",
          "_assetTwoAmount": "The amount of the second asset to add."
        }
      },
      "addLiquidity(address,address,uint256)": {
        "details": "Function to add additional liquidity to the pool.Needs the ERC-20 approval for transferFrom.",
        "params": {
          "_amount": "The amount of the first asset to add.",
          "_asset": "The address of the first asset.",
          "_secondAsset": "The address of the second asset."
        }
      },
      "addressBalance()": {
        "details": "Function to get the current ETH balance of the contract.",
        "returns": {
          "_0": "The current ETH balance of the contract."
        }
      },
      "amountOfOppositeTokenNeeded(address,uint256)": {
        "details": "Function to get the second part of the liquidity token pair needed for providing liquidity.",
        "params": {
          "_amount": "The amount of the asset.",
          "_asset": "The address of the asset."
        },
        "returns": {
          "_0": "The quantity of the second asset needed for providing liquidity."
        }
      },
      "assetOnePrice()": {
        "details": "Function to get the current price of the first asset in terms of the second asset.",
        "returns": {
          "_0": "The current price of the first asset * 10**18."
        }
      },
      "assetTwoPrice()": {
        "details": "Function to get the current price of the second asset in terms of the first asset.",
        "returns": {
          "_0": "The current price of the second asset * 10**18."
        }
      },
      "constructor": {
        "details": "Constructor to initialize the liquidity pool with two asset addresses.",
        "params": {
          "_assetOneAddress": "The address of the first asset.",
          "_assetTwoAddress": "The address of the second asset."
        }
      },
      "getAssetBalace(address)": {
        "details": "Function to get the current balance of a given asset held by the contract.",
        "params": {
          "_address": "The address of the asset."
        },
        "returns": {
          "_0": "The current balance of the asset."
        }
      },
      "getAssetOne()": {
        "details": "Function to get the amount of the first asset held by the contract.",
        "returns": {
          "_0": "The current balance of the first asset."
        }
      },
      "getAssetTwo()": {
        "details": "Function to get the amount of the second asset held by the contract.",
        "returns": {
          "_0": "The current balance of the second asset."
        }
      },
      "getLpTokenQuantity(address)": {
        "details": "Function to get the quantity of LP tokens owned by a specific address.",
        "params": {
          "_address": "The address of the LP token holder."
        },
        "returns": {
          "_0": "The quantity of LP tokens owned by the address."
        }
      },
      "getSwapQuantity(address,uint256)": {
        "details": "Function to get the quantity of the second asset that would be returned for a given amount of the first asset.",
        "params": {
          "_amount": "The amount of the first asset being sold.",
          "sellingAsset": "The address of the asset being sold."
        },
        "returns": {
          "_0": "The quantity of the second asset that would be returned"
        }
      },
      "getYield()": {
        "details": "Function to allow users to claim their yield. Can be called once a day."
      },
      "isTime()": {
        "details": "Function to check if enough time has passed for the user to claim yield.",
        "returns": {
          "_0": "Whether enough time has passed or not."
        }
      },
      "isTimeInitialLiquidity()": {
        "details": "Function to check if enough time has passed since the initial liquidity was provided.",
        "returns": {
          "_0": "Whether enough time has passed or not."
        }
      },
      "removeLiquidity(uint256)": {
        "details": "Function to remove liquidity from the pool.",
        "params": {
          "_amount": "The percentage of liquidity to withdraw(10 -> 10%)."
        }
      },
      "sellAssetOne(uint256)": {
        "details": "Function to sell the first asset and receive the second asset.",
        "params": {
          "_amount": "The amount of the first asset to sell."
        }
      },
      "sellAssetTwo(uint256)": {
        "details": "Function to sell the second asset and receive the first asset.",
        "params": {
          "_amount": "The amount of the second asset to sell."
        }
      },
      "zkReceive(uint16,address,uint64,bytes)": {
        "details": "Returns the request for lower gas fee computation",
        "params": {
          "payload": "returns the computation"
        }
      }
    },
    "title": "LiquidityPool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getYield()": {
        "notice": "sends the request to yield Calculator smart contract to compute yield with lower gas fee"
      }
    },
    "notice": "Manages liquidity provision, asset swapping, and yield generation in a decentralized manner.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 180,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "assetOneAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 182,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "assetTwoAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 184,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "initialLiquidity",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 186,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "liquidity",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 188,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "yield",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 191,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "swapFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 193,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 195,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "locked",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 199,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "lpTokenQuantity",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 203,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "yieldTaken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 207,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "lastYieldFarmedTime",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 211,
        "contract": "contracts/Dex/LiquidityPool.sol:LiquidityPool",
        "label": "initialLiquidityProvidedTime",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}