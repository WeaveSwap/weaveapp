{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PoolTracker_addressNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolTracker_cantSwapSameToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolTracker_pairAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract LiquidityPool",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetOne",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetTwo",
          "type": "address"
        }
      ],
      "name": "poolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "addRoutingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetOneAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetTwoAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOne",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTwo",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2",
          "type": "address"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairToPool",
      "outputs": [
        {
          "internalType": "contract LiquidityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolOwner",
      "outputs": [
        {
          "internalType": "contract LiquidityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routingAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "tokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address2",
          "type": "address"
        }
      ],
      "name": "tokenToRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8893c0c5c80cb4fd48a507179f78f8a7c5e5493cfbfc1a6198b1461fb52f284",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "4773730",
    "logsBloom": "0x
    "blockHash": "0x63798b58ddb6badcf77c5bd84656d8e4254b422111604d002696243a51489eff",
    "transactionHash": "0xe8893c0c5c80cb4fd48a507179f78f8a7c5e5493cfbfc1a6198b1461fb52f284",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "4773730",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "30e751f29dc882e93d446105100fc085",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PoolTracker_addressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolTracker_cantSwapSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolTracker_pairAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract LiquidityPool\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOne\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetTwo\",\"type\":\"address\"}],\"name\":\"poolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"addRoutingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetOneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetTwoAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTwo\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairToPool\",\"outputs\":[{\"internalType\":\"contract LiquidityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolOwner\",\"outputs\":[{\"internalType\":\"contract LiquidityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"}],\"name\":\"tokenToRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem. Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions. Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\",\"kind\":\"dev\",\"methods\":{\"addRoutingAddress(address,address)\":{\"details\":\"Allows the contract owner to add or update the routing address for a token. This is used for token swaps and price feed lookups.\",\"params\":{\"priceFeed\":\"The Chainlink price feed address for the token.\",\"tokenAddress\":\"The token for which to set the routing.\"}},\"createPool(address,address,uint256,uint256)\":{\"details\":\"Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings. Emits a PoolCreated event upon successful creation. Requirements: - The token pair must not already have an existing pool. - The caller must have approved the contract to spend the necessary token amounts.\",\"params\":{\"_assetOneAddress\":\"The address of the first token in the pair.\",\"_assetTwoAddress\":\"The address of the second token in the pair.\",\"amountOne\":\"The amount of the first token to add to the pool.\",\"amountTwo\":\"The amount of the second token to add to the pool.\"}},\"exists(address,address)\":{\"details\":\"Checks if a liquidity pool exists for a given pair of tokens.\",\"params\":{\"token1\":\"The address of the first token.\",\"token2\":\"The address of the second token.\"},\"returns\":{\"_0\":\"bool Returns true if the pool exists, false otherwise.\"}},\"tokenExists(address)\":{\"details\":\"Checks if a token is already tracked by the contract.\",\"params\":{\"tokenAddress\":\"The address of the token to check.\"},\"returns\":{\"_0\":\"bool Returns true if the token is tracked, false otherwise.\"}},\"tokenList()\":{\"details\":\"Returns all array of all tradable tokens on the platform\",\"returns\":{\"_0\":\"array Returns tokens array.\"}},\"tokenToRoute(address,address)\":{\"details\":\"Determines the optimal routing token for a swap between two tokens, based on available liquidity and price feeds.\",\"params\":{\"address1\":\"The address of the first token.\",\"address2\":\"The address of the second token.\"},\"returns\":{\"_0\":\"address The address of the optimal routing token.\"}}},\"title\":\"PoolTracker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex/PoolTracker.sol\":\"PoolTracker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Dex/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nerror assetNotCorrect();\\nerror notEnoughTokens();\\nerror notEnoughGas();\\nerror notEnoughTimePassed();\\nerror initialLiquidityAlreadyProvided();\\nerror addressNotCorrect();\\nerror amountTooBig();\\nerror needToCallExistingFunction();\\n\\n/**\\n * @title LiquidityPool\\n * @dev A decentralized liquidity pool contract for swapping assets and providing liquidity.\\n */\\ncontract LiquidityPool {\\n    // Events\\n    event priceChanged(address _asset, uint256 price);\\n    event liquidityAdded(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event liquidityRemoved(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event yieldFarmed(address indexed _address, uint256 _amount);\\n\\n    // Token Addresses\\n    address public assetOneAddress;\\n    address public assetTwoAddress;\\n\\n    // Liquidity and Yield (fees)\\n    uint256 public initialLiquidity;\\n    uint256 public liquidity;\\n    uint256 public yield;\\n    uint256 public swapFee = 1000000000000000;\\n    address public owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions only to the owner.\\n     */\\n    modifier onlyOwner() {\\n        msg.sender == owner;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\\n     * @param _assetOneAddress The address of the first asset.\\n     * @param _assetTwoAddress The address of the second asset.\\n     */\\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\\n        assetOneAddress = _assetOneAddress;\\n        assetTwoAddress = _assetTwoAddress;\\n        owner = msg.sender;\\n        swapFee = 1000000000000000; // 0.001 ether\\n    }\\n\\n    /**\\n     * @dev Function to change the swap fee. Only callable by the owner.\\n     * @param newSwapFee The new swap fee to set.\\n     */\\n    function changeSwapFee(uint256 newSwapFee) public onlyOwner {\\n        swapFee = newSwapFee;\\n    }\\n\\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\\n    mapping(address => uint256) public lpTokenQuantity;\\n\\n    /**\\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _assetOneAmount The amount of the first asset to add.\\n     * @param _assetTwoAmount The amount of the second asset to add.\\n     */\\n    function addInitialLiquidity(\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    ) public onlyOwner {\\n        if (initialLiquidityProvidedTime[owner] > 0) {\\n            revert initialLiquidityAlreadyProvided();\\n        }\\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\\n\\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetOneAmount\\n        );\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetTwoAmount\\n        );\\n\\n        // SET THE INITIAL LIQUIDITY\\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\\n        liquidity = initialLiquidity;\\n\\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\\n        lpTokenQuantity[msg.sender] = initialLiquidity;\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\\n    }\\n\\n    /**\\n     * @dev Function to add additional liquidity to the pool.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _asset The address of the first asset.\\n     * @param _secondAsset The address of the second asset.\\n     * @param _amount The amount of the first asset to add.\\n     */\\n    function addLiquidity(\\n        address _asset,\\n        address _secondAsset,\\n        uint256 _amount\\n    ) public noReentrancy {\\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\\n        IERC20(_secondAsset).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOfOppositeTokenNeeded(_asset, _amount)\\n        );\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n\\n        // give lp tokens to new liquidity provider\\n        lpTokenQuantity[msg.sender] += (_amount *\\n            amountOfOppositeTokenNeeded(_asset, _amount));\\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(\\n            msg.sender,\\n            amountOfOppositeTokenNeeded(_asset, _amount),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to remove liquidity from the pool.\\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\\n     */\\n    function removeLiquidity(uint256 _amount) public noReentrancy {\\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) /\\n            100; // How much out of their liquidity they want to withdraw in percentage\\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) /\\n            1 ether;\\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) /\\n            1 ether;\\n        // condition for owner, because of the initial liquidity timer\\n        if (\\n            (msg.sender == owner) &&\\n            (isTimeInitialLiquidity() == false) &&\\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) <\\n                initialLiquidity)\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\\n        if (\\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\\n\\n        // EMIT EVENT\\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\\n    }\\n\\n    /**\\n     * @dev Function to sell the first asset and receive the second asset.\\n     * @param _amount The amount of the first asset to sell.\\n     */\\n    function sellAssetOne(uint256 _amount) public payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetOne()) {\\n            payable(msg.sender).transfer(msg.value);\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetTwo();\\n        uint256 assetOne = getAssetOne() + _amount;\\n        uint256 assetTwo = liquidity / assetOne;\\n        uint256 result = n - assetTwo;\\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to sell the second asset and receive the first asset.\\n     * @param _amount The amount of the second asset to sell.\\n     */\\n    function sellAssetTwo(uint256 _amount) public payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetTwo()) {\\n            payable(msg.sender).transfer(msg.value); // Transfer value back\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetOne();\\n        uint256 assetTwo = getAssetTwo() + _amount;\\n        uint256 assetOne = liquidity / assetTwo;\\n        uint256 result = n - assetOne;\\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetOneAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to get the current balance of a given asset held by the contract.\\n     * @param _address The address of the asset.\\n     * @return The current balance of the asset.\\n     */\\n    function getAssetBalace(address _address) public view returns (uint256) {\\n        return IERC20(_address).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the first asset in terms of the second asset.\\n     * @return The current price of the first asset * 10**18.\\n     */\\n    function assetOnePrice() public view returns (uint256) {\\n        return (getAssetTwo() * 1 ether) / getAssetOne();\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the second asset in terms of the first asset.\\n     * @return The current price of the second asset * 10**18.\\n     */\\n    function assetTwoPrice() public view returns (uint256) {\\n        return (getAssetOne() * 1 ether) / getAssetTwo();\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the first asset held by the contract.\\n     * @return The current balance of the first asset.\\n     */\\n    function getAssetOne() public view returns (uint256) {\\n        return IERC20(assetOneAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the second asset held by the contract.\\n     * @return The current balance of the second asset.\\n     */\\n    function getAssetTwo() public view returns (uint256) {\\n        return IERC20(assetTwoAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\\n     * @param _address The address of the LP token holder.\\n     * @return The quantity of LP tokens owned by the address.\\n     */\\n    function getLpTokenQuantity(\\n        address _address\\n    ) public view returns (uint256) {\\n        if (msg.sender != owner && _address == msg.sender) {\\n            revert addressNotCorrect();\\n        }\\n        return lpTokenQuantity[_address];\\n    }\\n\\n    /**\\n     * @dev Function to get the total liquidity in the pool.\\n     * @return The total liquidity in the pool.\\n     */\\n    function getLiquidity() public view returns (uint256) {\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @dev Function to get the current swap fee percentage.\\n     * @return The current swap fee percentage.\\n     */\\n    function getSwapFee() public view returns (uint256) {\\n        return swapFee;\\n    }\\n\\n    /**\\n     * @dev Function to get the current ETH balance of the contract.\\n     * @return The current ETH balance of the contract.\\n     */\\n    function addressBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\\n     * @param sellingAsset The address of the asset being sold.\\n     * @param _amount The amount of the first asset being sold.\\n     * @return The quantity of the second asset that would be returned\\n     */\\n    function getSwapQuantity(\\n        address sellingAsset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        if (sellingAsset == assetOneAddress) {\\n            uint256 newAssetOne = getAssetOne() + _amount;\\n            uint256 newAssetTwo = liquidity / newAssetOne;\\n            return getAssetTwo() - newAssetTwo;\\n        } else if (sellingAsset == assetTwoAddress) {\\n            uint256 newAssetTwo = getAssetTwo() + _amount;\\n            uint256 newAssetOne = liquidity / newAssetTwo;\\n            return getAssetOne() - newAssetOne;\\n        } else {\\n            revert assetNotCorrect();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\\n     * @param _asset The address of the asset.\\n     * @param _amount The amount of the asset.\\n     * @return The quantity of the second asset needed for providing liquidity.\\n     */\\n    function amountOfOppositeTokenNeeded(\\n        address _asset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        uint256 ratio;\\n        if (_asset == assetOneAddress) {\\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\\n        } else {\\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\\n        }\\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\\n        return amountNeeded;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    // Yield Farming and Time Locks\\n\\n    // Daily yield tracking\\n    mapping(address => uint256) public yieldTaken;\\n\\n    /**\\n     * @dev Function to get the current yield amount available in the pool.\\n     * @return The current yield amount.\\n     */\\n    function yieldAmount() public view returns (uint256) {\\n        return yield;\\n    }\\n\\n    /**\\n     * @dev Function to allow users to claim their yield. Can be called once a day.\\n     */\\n    function getYield() public {\\n        if (isTime() == false) {\\n            revert notEnoughTimePassed();\\n        }\\n        lastYieldFarmedTime[msg.sender] = block.timestamp; // Reentrancy guard\\n        uint256 yieldSoFar = yieldTaken[msg.sender];\\n        uint256 userLiquidity = (lpTokenQuantity[msg.sender] * 100) / liquidity;\\n        uint256 availableYield = ((yield -\\n            ((yieldSoFar * 100) / userLiquidity)) * userLiquidity) / 100;\\n        if (availableYield > address(this).balance) {\\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[msg.sender] += availableYield;\\n        payable(msg.sender).transfer(availableYield);\\n\\n        // EMIT EVENT\\n        emit yieldFarmed(msg.sender, availableYield);\\n    }\\n\\n    // Timestamp mapping for yield farming\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n    mapping(address => uint256) public initialLiquidityProvidedTime;\\n\\n    /**\\n     * @dev Function to check if enough time has passed for the user to claim yield.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTime() public view returns (bool) {\\n        lastYieldFarmedTime[msg.sender];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTimeInitialLiquidity() public view returns (bool) {\\n        if (\\n            block.timestamp >\\n            (initialLiquidityProvidedTime[msg.sender] + 365 days)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    fallback() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    receive() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0x4bc005b7f88cb28d6d2937e3bb8d7b0bc2dec6cae097e58bc816832148ef479e\",\"license\":\"MIT\"},\"contracts/Dex/PoolTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror PoolTracker_noTokensDetected();\\nerror PoolTracker_pairAlreadyExists();\\nerror PoolTracker_addressNotAllowed();\\nerror PoolTracker_cantSwapSameToken();\\n\\n/**\\n * @title PoolTracker\\n * @dev Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem.\\n * Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions.\\n * Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\\n */\\ncontract PoolTracker {\\n    // The owner of the PoolTracker contract, set to the deployer.\\n    address owner;\\n\\n    // Constructor: Sets the contract deployer as the owner.\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    // Tracker for created pools, will add to database\\n    event poolCreated(LiquidityPool pool, address assetOne, address assetTwo);\\n\\n    // Mapping of pool Pairs, to store existing ones\\n    mapping(address => address[]) public poolPairs;\\n\\n    // Mapping a pool to the contracts, in case we wont store it in the database\\n    mapping(address => mapping(address => LiquidityPool)) public pairToPool;\\n\\n    // All the available tokens\\n    address[] public tokens;\\n\\n    // Mapping of pool per Owner\\n    mapping(address => LiquidityPool[]) public poolOwner;\\n\\n    /**\\n     * @dev Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial\\n     * transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings.\\n     * Emits a PoolCreated event upon successful creation.\\n     *\\n     * Requirements:\\n     * - The token pair must not already have an existing pool.\\n     * - The caller must have approved the contract to spend the necessary token amounts.\\n     *\\n     * @param _assetOneAddress The address of the first token in the pair.\\n     * @param _assetTwoAddress The address of the second token in the pair.\\n     * @param amountOne The amount of the first token to add to the pool.\\n     * @param amountTwo The amount of the second token to add to the pool.\\n     */\\n    function createPool(\\n        address _assetOneAddress,\\n        address _assetTwoAddress,\\n        uint256 amountOne,\\n        uint256 amountTwo\\n    ) external noReentrancy {\\n        if (\\n            exists(_assetOneAddress, _assetTwoAddress)\\n        ) // To prevent duplicate pools\\n        {\\n            revert PoolTracker_pairAlreadyExists();\\n        }\\n        // Transfer of tokens\\n        IERC20(_assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOne\\n        );\\n        IERC20(_assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountTwo\\n        );\\n        // Creation of pool\\n        LiquidityPool poolAddress = new LiquidityPool(\\n            _assetOneAddress,\\n            _assetTwoAddress\\n        );\\n        // Approve\\n        IERC20(_assetOneAddress).approve(address(poolAddress), amountOne);\\n        IERC20(_assetTwoAddress).approve(address(poolAddress), amountTwo);\\n        // Add initial liquidity\\n        poolAddress.addInitialLiquidity(amountOne, amountTwo);\\n        // Update mappings\\n        poolOwner[msg.sender].push(poolAddress);\\n        poolPairs[_assetOneAddress].push(_assetTwoAddress);\\n        poolPairs[_assetTwoAddress].push(_assetOneAddress);\\n        pairToPool[_assetOneAddress][_assetTwoAddress] = poolAddress;\\n        pairToPool[_assetTwoAddress][_assetOneAddress] = poolAddress;\\n\\n        if (tokenExists(_assetOneAddress) == false) {\\n            tokens.push(_assetOneAddress);\\n        }\\n        if (tokenExists(_assetTwoAddress) == false) {\\n            tokens.push(_assetTwoAddress);\\n        }\\n        // Emit the event\\n        emit poolCreated(poolAddress, _assetOneAddress, _assetTwoAddress);\\n    }\\n\\n    /**\\n     * @dev Checks if a liquidity pool exists for a given pair of tokens.\\n     *\\n     * @param token1 The address of the first token.\\n     * @param token2 The address of the second token.\\n     * @return bool Returns true if the pool exists, false otherwise.\\n     */\\n    function exists(address token1, address token2) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < poolPairs[token1].length; i++) {\\n            if (poolPairs[token1][i] == token2) {\\n                exist = true;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    /**\\n     * @dev Checks if a token is already tracked by the contract.\\n     *\\n     * @param tokenAddress The address of the token to check.\\n     * @return bool Returns true if the token is tracked, false otherwise.\\n     */\\n    function tokenExists(address tokenAddress) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokenAddress == tokens[i]) {\\n                exist = true;\\n                break;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    // Routing token\\n    struct routingAddress {\\n        address tokenAddress;\\n        address priceFeed;\\n    }\\n\\n    // Array of routing Tokens\\n    routingAddress[] public routingAddresses;\\n\\n    /**\\n     * @dev Allows the contract owner to add or update the routing address for a token.\\n     * This is used for token swaps and price feed lookups.\\n     *\\n     * @param tokenAddress The token for which to set the routing.\\n     * @param priceFeed The Chainlink price feed address for the token.\\n     */\\n    function addRoutingAddress(address tokenAddress, address priceFeed) public {\\n        if (msg.sender != owner) {\\n            revert PoolTracker_addressNotAllowed();\\n        }\\n        if (routingAddresses.length == 0) {\\n            routingAddresses.push(routingAddress(tokenAddress, priceFeed));\\n        } else {\\n            for (uint256 i = 0; i < routingAddresses.length; i++) {\\n                if (routingAddresses[i].tokenAddress == tokenAddress) {\\n                    routingAddresses[i] = routingAddress(\\n                        tokenAddress,\\n                        priceFeed\\n                    );\\n                    break;\\n                } else if (i == routingAddresses.length - 1) {\\n                    routingAddresses.push(\\n                        routingAddress(tokenAddress, priceFeed)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Determines the optimal routing token for a swap between two tokens,\\n     * based on available liquidity and price feeds.\\n     *\\n     * @param address1 The address of the first token.\\n     * @param address2 The address of the second token.\\n     * @return address The address of the optimal routing token.\\n     */\\n    function tokenToRoute(\\n        address address1,\\n        address address2\\n    ) public view returns (address) {\\n        if (address1 == address2) {\\n            revert PoolTracker_cantSwapSameToken();\\n        }\\n        address[] memory token1pairs = poolPairs[address1];\\n        address[] memory token2pairs = poolPairs[address2];\\n\\n        address routingToken;\\n        int routingTokenLiquidity;\\n\\n        for (uint256 i; i < token1pairs.length; i++) {\\n            for (uint256 a; a < token2pairs.length; a++) {\\n                if (token1pairs[i] == token2pairs[a]) {\\n                    for (uint256 b; b < routingAddresses.length; b++) {\\n                        if (\\n                            routingAddresses[b].tokenAddress == token1pairs[i]\\n                        ) {\\n                            (, int answer, , , ) = AggregatorV3Interface(\\n                                routingAddresses[b].priceFeed\\n                            ).latestRoundData();\\n                            int liquidity;\\n                            LiquidityPool pool1 = pairToPool[address1][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            LiquidityPool pool2 = pairToPool[address2][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            uint256 balance1 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool1));\\n                            uint256 balance2 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool2));\\n                            liquidity =\\n                                (int(balance1) + int(balance2)) *\\n                                answer;\\n                            if (liquidity > routingTokenLiquidity) {\\n                                // Best choice so far if the liquidity is bigger than previous best token\\n                                routingToken = routingAddresses[b].tokenAddress;\\n                                routingTokenLiquidity = liquidity;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return routingToken;\\n    }\\n\\n    /**\\n     * @dev Returns all array of all tradable tokens on the platform\\n     *\\n     * @return array Returns tokens array.\\n     */\\n    function tokenList() public view returns (address[] memory) {\\n        return tokens;\\n    }\\n}\\n\",\"keccak256\":\"0x76fe8fa772abb7406c978b9e4d76b0fc286476f73e6ccd72e43c402f72380a6a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550615547806100606000396000f3fe60806040523480156200001157600080fd5b5060043610620000b85760003560e01c80638aad070f116200007b5780638aad070f146200019f5780638b273a6814620001d55780638c75d89d146200020b578063930186f214620002415780639e2c58ca1462000278578063b33f78ca146200029a57620000b8565b80634f64b2be14620000bd5780635553246014620000f35780636fbe6fea14620001295780637663f8221462000149578063884db063146200017f575b600080fd5b620000db6004803603810190620000d5919062001c38565b620002d0565b604051620000ea919062001caf565b60405180910390f35b6200011160048036038101906200010b919062001cfd565b62000310565b60405162000120919062001caf565b60405180910390f35b62000147600480360381019062000141919062001cfd565b62000b6e565b005b62000167600480360381019062000161919062001cfd565b62000fc5565b60405162000176919062001d61565b60405180910390f35b6200019d600480360381019062000197919062001d7e565b620010ef565b005b620001bd6004803603810190620001b7919062001df0565b62001951565b604051620001cc919062001ea2565b60405180910390f35b620001f36004803603810190620001ed919062001cfd565b620019a0565b60405162000202919062001ea2565b60405180910390f35b62000229600480360381019062000223919062001df0565b620019e2565b60405162000238919062001caf565b60405180910390f35b6200025f600480360381019062000259919062001c38565b62001a31565b6040516200026f92919062001ebf565b60405180910390f35b6200028262001aa6565b60405162000291919062001fba565b60405180910390f35b620002b86004803603810190620002b2919062001fde565b62001b36565b604051620002c7919062001d61565b60405180910390f35b60038181548110620002e157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000379576040517fef107d8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200043c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620003f1575b505050505090506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200050657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620004bb575b5050505050905060008060005b845181101562000b605760005b845181101562000b495784818151811062000540576200053f62002010565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1686838151811062000574576200057362002010565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141562000b335760005b60058054905081101562000b3157868381518110620005c057620005bf62002010565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1660058281548110620005f557620005f462002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000b1b576000600582815481106200065d576200065c62002010565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015620006d557600080fd5b505afa158015620006ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007109190620020d8565b505050915050600080600260008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006005868154811062000771576200077062002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600587815481106200085a576200085962002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006005868154811062000902576200090162002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016200096e919062001caf565b60206040518083038186803b1580156200098757600080fd5b505afa1580156200099c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c2919062002160565b9050600060058781548110620009dd57620009dc62002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040162000a49919062001caf565b60206040518083038186803b15801562000a6257600080fd5b505afa15801562000a77573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a9d919062002160565b905085818362000aae9190620021c1565b62000aba91906200225f565b94508985131562000b14576005878154811062000adc5762000adb62002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169a508499505b5050505050505b808062000b289062002386565b9150506200059c565b505b808062000b409062002386565b91505062000520565b50808062000b579062002386565b91505062000513565b508194505050505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000bf4576040517fa3da448900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600580549050141562000d0557600560405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000fc1565b60005b60058054905081101562000fbf578273ffffffffffffffffffffffffffffffffffffffff166005828154811062000d445762000d4362002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000e905760405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152506005828154811062000deb5762000dea62002010565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505062000fbf565b600160058054905062000ea49190620023d4565b81141562000fa957600560405180604001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b808062000fb69062002386565b91505062000d08565b505b5050565b60008060005b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015620010e4578373ffffffffffffffffffffffffffffffffffffffff16600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811062001081576200108062002010565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620010ce57600191505b8080620010db9062002386565b91505062000fcb565b508091505092915050565b600060149054906101000a900460ff161562001142576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011399062002470565b60405180910390fd5b6001600060146101000a81548160ff02191690831515021790555062001169848462000fc5565b15620011a1576040517f2f5f48b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401620011e093929190620024a3565b602060405180830381600087803b158015620011fb57600080fd5b505af115801562001210573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001236919062002511565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016200127693929190620024a3565b602060405180830381600087803b1580156200129157600080fd5b505af1158015620012a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012cc919062002511565b5060008484604051620012df9062001bea565b620012ec92919062001ebf565b604051809103906000f08015801562001309573d6000803e3d6000fd5b5090508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b382856040518363ffffffff1660e01b81526004016200134992919062002543565b602060405180830381600087803b1580156200136457600080fd5b505af115801562001379573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200139f919062002511565b508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b382846040518363ffffffff1660e01b8152600401620013dd92919062002543565b602060405180830381600087803b158015620013f857600080fd5b505af11580156200140d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001433919062002511565b508073ffffffffffffffffffffffffffffffffffffffff1663a40f4fa184846040518363ffffffff1660e01b81526004016200147192919062002570565b600060405180830381600087803b1580156200148c57600080fd5b505af1158015620014a1573d6000803e3d6000fd5b50505050600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600015156200180a8662001b36565b1515141562001877576003859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60001515620018868562001b36565b15151415620018f3576003849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f1bfa76d353829689440900638fb4e4d604519997726fa1ee0f885e3df12ed7f881868660405162001928939291906200259d565b60405180910390a15060008060146101000a81548160ff02191690831515021790555050505050565b600460205281600052604060002081815481106200196e57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528160005260406000208181548110620019ff57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005818154811062001a4257600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6060600380548060200260200160405190810160405280929190818152602001828054801562001b2c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162001ae1575b5050505050905090565b60008060005b60038054905081101562001be0576003818154811062001b615762001b6062002010565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141562001bca576001915062001be0565b808062001bd79062002386565b91505062001b3c565b5080915050919050565b612f3780620025db83390190565b600080fd5b6000819050919050565b62001c128162001bfd565b811462001c1e57600080fd5b50565b60008135905062001c328162001c07565b92915050565b60006020828403121562001c515762001c5062001bf8565b5b600062001c618482850162001c21565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001c978262001c6a565b9050919050565b62001ca98162001c8a565b82525050565b600060208201905062001cc6600083018462001c9e565b92915050565b62001cd78162001c8a565b811462001ce357600080fd5b50565b60008135905062001cf78162001ccc565b92915050565b6000806040838503121562001d175762001d1662001bf8565b5b600062001d278582860162001ce6565b925050602062001d3a8582860162001ce6565b9150509250929050565b60008115159050919050565b62001d5b8162001d44565b82525050565b600060208201905062001d78600083018462001d50565b92915050565b6000806000806080858703121562001d9b5762001d9a62001bf8565b5b600062001dab8782880162001ce6565b945050602062001dbe8782880162001ce6565b935050604062001dd18782880162001c21565b925050606062001de48782880162001c21565b91505092959194509250565b6000806040838503121562001e0a5762001e0962001bf8565b5b600062001e1a8582860162001ce6565b925050602062001e2d8582860162001c21565b9150509250929050565b6000819050919050565b600062001e6262001e5c62001e568462001c6a565b62001e37565b62001c6a565b9050919050565b600062001e768262001e41565b9050919050565b600062001e8a8262001e69565b9050919050565b62001e9c8162001e7d565b82525050565b600060208201905062001eb9600083018462001e91565b92915050565b600060408201905062001ed6600083018562001c9e565b62001ee5602083018462001c9e565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62001f238162001c8a565b82525050565b600062001f37838362001f18565b60208301905092915050565b6000602082019050919050565b600062001f5d8262001eec565b62001f69818562001ef7565b935062001f768362001f08565b8060005b8381101562001fad57815162001f91888262001f29565b975062001f9e8362001f43565b92505060018101905062001f7a565b5085935050505092915050565b6000602082019050818103600083015262001fd6818462001f50565b905092915050565b60006020828403121562001ff75762001ff662001bf8565b5b6000620020078482850162001ce6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600069ffffffffffffffffffff82169050919050565b62002060816200203f565b81146200206c57600080fd5b50565b600081519050620020808162002055565b92915050565b6000819050919050565b6200209b8162002086565b8114620020a757600080fd5b50565b600081519050620020bb8162002090565b92915050565b600081519050620020d28162001c07565b92915050565b600080600080600060a08688031215620020f757620020f662001bf8565b5b600062002107888289016200206f565b95505060206200211a88828901620020aa565b94505060406200212d88828901620020c1565b93505060606200214088828901620020c1565b925050608062002153888289016200206f565b9150509295509295909350565b60006020828403121562002179576200217862001bf8565b5b60006200218984828501620020c1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620021ce8262002086565b9150620021db8362002086565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161562002219576200221862002192565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161562002254576200225362002192565b5b828201905092915050565b60006200226c8262002086565b9150620022798362002086565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615620022bb57620022ba62002192565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615620022fb57620022fa62002192565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156200233b576200233a62002192565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156200237b576200237a62002192565b5b828202905092915050565b6000620023938262001bfd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620023c957620023c862002192565b5b600182019050919050565b6000620023e18262001bfd565b9150620023ee8362001bfd565b92508282101562002404576200240362002192565b5b828203905092915050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b600062002458600e836200240f565b9150620024658262002420565b602082019050919050565b600060208201905081810360008301526200248b8162002449565b9050919050565b6200249d8162001bfd565b82525050565b6000606082019050620024ba600083018662001c9e565b620024c9602083018562001c9e565b620024d8604083018462002492565b949350505050565b620024eb8162001d44565b8114620024f757600080fd5b50565b6000815190506200250b81620024e0565b92915050565b6000602082840312156200252a576200252962001bf8565b5b60006200253a84828501620024fa565b91505092915050565b60006040820190506200255a600083018562001c9e565b62002569602083018462002492565b9392505050565b600060408201905062002587600083018562002492565b62002596602083018462002492565b9392505050565b6000606082019050620025b4600083018662001e91565b620025c3602083018562001c9e565b620025d2604083018462001c9e565b94935050505056fe608060405266038d7ea4c680006005553480156200001c57600080fd5b5060405162002f3738038062002f37833981810160405281019062000042919062000184565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555066038d7ea4c680006005819055505050620001cb565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014c826200011f565b9050919050565b6200015e816200013f565b81146200016a57600080fd5b50565b6000815190506200017e8162000153565b92915050565b600080604083850312156200019e576200019d6200011a565b5b6000620001ae858286016200016d565b9250506020620001c1858286016200016d565b9150509250929050565b612d5c80620001db6000396000f3fe6080604052600436106101e75760003560e01c80638da5cb5b11610102578063aa03f2ed11610095578063e35ba8ab11610064578063e35ba8ab1461074a578063e4a7672614610775578063f318e5571461079e578063ffebfc8c146107c95761021e565b8063aa03f2ed146106ad578063ce5efee3146106d8578063d4cadf6814610703578063dc1716241461072e5761021e565b8063a04f6639116100d1578063a04f663914610603578063a40f4fa11461062e578063a875480314610657578063a97533b8146106825761021e565b80638da5cb5b1461053557806395cc4c5e146105605780639a61c36a1461059d5780639c8f9f23146105da5761021e565b806340702adc1161017a578063696c613111610149578063696c61311461047b5780637c262871146104a457806381bace7d146104bb5780638477a634146104f85761021e565b806340702adc146103de5780634257dc4c146104095780634d2d757c1461042557806354cf2aeb146104505761021e565b806328593984116101b6578063285939841461030e57806328da1aef146103395780632d4ce66914610376578063405eae91146103b35761021e565b80630910a51014610250578063131a6f011461027b5780631a686502146102a657806324aabb92146102d15761021e565b3661021e576040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561025c57600080fd5b50610265610806565b6040516102729190612729565b60405180910390f35b34801561028757600080fd5b50610290610810565b60405161029d9190612729565b60405180910390f35b3480156102b257600080fd5b506102bb6108c2565b6040516102c89190612729565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f391906127a7565b6108c8565b6040516103059190612729565b60405180910390f35b34801561031a57600080fd5b506103236108e0565b6040516103309190612729565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b9190612800565b6108e6565b60405161036d9190612729565b60405180910390f35b34801561038257600080fd5b5061039d600480360381019061039891906127a7565b610a55565b6040516103aa9190612729565b60405180910390f35b3480156103bf57600080fd5b506103c8610ae7565b6040516103d5919061285b565b60405180910390f35b3480156103ea57600080fd5b506103f3610b96565b6040516104009190612729565b60405180910390f35b610423600480360381019061041e9190612876565b610b9c565b005b34801561043157600080fd5b5061043a61102e565b604051610447919061285b565b60405180910390f35b34801561045c57600080fd5b50610465611097565b6040516104729190612729565b60405180910390f35b34801561048757600080fd5b506104a2600480360381019061049d9190612876565b61109d565b005b3480156104b057600080fd5b506104b96110b5565b005b3480156104c757600080fd5b506104e260048036038101906104dd91906127a7565b61134a565b6040516104ef9190612729565b60405180910390f35b34801561050457600080fd5b5061051f600480360381019061051a91906127a7565b611453565b60405161052c9190612729565b60405180910390f35b34801561054157600080fd5b5061054a61146b565b60405161055791906128b2565b60405180910390f35b34801561056c57600080fd5b5061058760048036038101906105829190612800565b611491565b6040516105949190612729565b60405180910390f35b3480156105a957600080fd5b506105c460048036038101906105bf91906127a7565b61157a565b6040516105d19190612729565b60405180910390f35b3480156105e657600080fd5b5061060160048036038101906105fc9190612876565b611592565b005b34801561060f57600080fd5b50610618611b3e565b6040516106259190612729565b60405180910390f35b34801561063a57600080fd5b50610655600480360381019061065091906128cd565b611b48565b005b34801561066357600080fd5b5061066c611e4d565b60405161067991906128b2565b60405180910390f35b34801561068e57600080fd5b50610697611e73565b6040516106a49190612729565b60405180910390f35b3480156106b957600080fd5b506106c2611ea7565b6040516106cf9190612729565b60405180910390f35b3480156106e457600080fd5b506106ed611f58565b6040516106fa91906128b2565b60405180910390f35b34801561070f57600080fd5b50610718611f7c565b6040516107259190612729565b60405180910390f35b61074860048036038101906107439190612876565b611f86565b005b34801561075657600080fd5b5061075f612418565b60405161076c9190612729565b60405180910390f35b34801561078157600080fd5b5061079c6004803603810190610797919061290d565b61244c565b005b3480156107aa57600080fd5b506107b36126f0565b6040516107c09190612729565b60405180910390f35b3480156107d557600080fd5b506107f060048036038101906107eb91906127a7565b6126f8565b6040516107fd9190612729565b60405180910390f35b6000600354905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161086d91906128b2565b60206040518083038186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190612975565b905090565b60035481565b60076020528060005260406000206000915090505481565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561098257600082610948611ea7565b61095291906129d1565b90506000816003546109649190612a56565b90508061096f610810565b6109799190612a87565b92505050610a4f565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a1d576000826109e3610810565b6109ed91906129d1565b90506000816003546109ff9190612a56565b905080610a0a611ea7565b610a149190612a87565b92505050610a4f565b6040517fd526485500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a9091906128b2565b60206040518083038186803b158015610aa857600080fd5b505afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae09190612975565b9050919050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205060004290508062015180600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b7d91906129d1565b1015610b8d576001915050610b93565b60009150505b90565b60025481565b600660149054906101000a900460ff1615610bec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be390612b18565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550610c0f611ea7565b8110610c8e573373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610c5b573d6000803e3d6000fd5b506040517fe45bfdc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554341015610cca576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460046000828254610cde91906129d1565b92505081905550600060055434610cf59190612a87565b90506000610d01610810565b9050600083610d0e611ea7565b610d1891906129d1565b9050600081600354610d2a9190612a56565b905060008184610d3a9190612a87565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b8152600401610d9993929190612b38565b602060405180830381600087803b158015610db357600080fd5b505af1158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190612b9b565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610e49929190612bc8565b602060405180830381600087803b158015610e6357600080fd5b505af1158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190612b9b565b5060003373ffffffffffffffffffffffffffffffffffffffff1686604051610ec290612c22565b60006040518083038185875af1925050503d8060008114610eff576040519150601f19603f3d011682016040523d82523d6000602084013e610f04565b606091505b5050905080610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3f90612c83565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f92611e73565b604051610fa0929190612bc8565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff4612418565b604051611002929190612bc8565b60405180910390a15050505050506000600660146101000a81548160ff02191690831515021790555050565b60006301e13380600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461107f91906129d1565b42111561108f5760019050611094565b600090505b90565b60055481565b600660009054906101000a9050508060058190555050565b600015156110c1610ae7565b151514156110fb576040517ffdbfe33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006003546064600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111d49190612ca3565b6111de9190612a56565b90506000606482836064866111f39190612ca3565b6111fd9190612a56565b60045461120a9190612a87565b6112149190612ca3565b61121e9190612a56565b90504781111561125a576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a991906129d1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156112f6573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fbf630ce062dbeaeb6c23a21390208b25de2ac16fb8502eab6054a70d9e34b8ec8260405161133d9190612729565b60405180910390a2505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156113d557503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561140c576040517f2ffae41300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a6020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561151c576114f0611ea7565b670de0b6b3a7640000611501610810565b61150b9190612ca3565b6115159190612a56565b905061154c565b611524610810565b670de0b6b3a7640000611535611ea7565b61153f9190612ca3565b6115499190612a56565b90505b6000670de0b6b3a764000082856115639190612ca3565b61156d9190612a56565b9050809250505092915050565b60086020528060005260406000206000915090505481565b600660149054906101000a900460ff16156115e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d990612b18565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600354670de0b6b3a76400008361165a9190612ca3565b6116649190612a56565b90506000606484836116769190612ca3565b6116809190612a56565b90506000670de0b6b3a7640000611695611ea7565b836116a09190612ca3565b6116aa9190612a56565b90506000670de0b6b3a76400006116bf610810565b846116ca9190612ca3565b6116d49190612a56565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801561173e57506000151561173a61102e565b1515145b80156117a0575060025481836117549190612ca3565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461179e9190612a87565b105b156117d7576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161183191906128b2565b60206040518083038186803b15801561184957600080fd5b505afa15801561185d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118819190612975565b1080611936575080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118e491906128b2565b60206040518083038186803b1580156118fc57600080fd5b505afa158015611910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119349190612975565b105b1561196d576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016119c8929190612bc8565b602060405180830381600087803b1580156119e257600080fd5b505af11580156119f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1a9190612b9b565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611a78929190612bc8565b602060405180830381600087803b158015611a9257600080fd5b505af1158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca9190612b9b565b503373ffffffffffffffffffffffffffffffffffffffff167fbad053f5b243c76f17611a28d4554167bd09e3491be13032dd4af620e8e228728383604051611b13929190612cfd565b60405180910390a250505050506000600660146101000a81548160ff02191690831515021790555050565b6000600454905090565b600660009054906101000a9050506000600a6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611bf2576040517f17ebf42200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611c9393929190612b38565b602060405180830381600087803b158015611cad57600080fd5b505af1158015611cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce59190612b9b565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611d4593929190612b38565b602060405180830381600087803b158015611d5f57600080fd5b505af1158015611d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d979190612b9b565b508082611da49190612ca3565b600281905550600254600381905550600254600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6148383604051611e41929190612cfd565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611e7d611ea7565b670de0b6b3a7640000611e8e610810565b611e989190612ca3565b611ea29190612a56565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f0391906128b2565b60206040518083038186803b158015611f1b57600080fd5b505afa158015611f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f539190612975565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b600660149054906101000a900460ff1615611fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fcd90612b18565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550611ff9610810565b8110612078573373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015612045573d6000803e3d6000fd5b506040517fe45bfdc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005543410156120b4576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554600460008282546120c891906129d1565b925050819055506000600554346120df9190612a87565b905060006120eb611ea7565b90506000836120f8610810565b61210291906129d1565b90506000816003546121149190612a56565b9050600081846121249190612a87565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161218593929190612b38565b602060405180830381600087803b15801561219f57600080fd5b505af11580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d79190612b9b565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612233929190612bc8565b602060405180830381600087803b15801561224d57600080fd5b505af1158015612261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122859190612b9b565b5060003373ffffffffffffffffffffffffffffffffffffffff16866040516122ac90612c22565b60006040518083038185875af1925050503d80600081146122e9576040519150601f19603f3d011682016040523d82523d6000602084013e6122ee565b606091505b5050905080612332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232990612c83565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661237c611e73565b60405161238a929190612bc8565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166123de612418565b6040516123ec929190612bc8565b60405180910390a15050505050506000600660146101000a81548160ff02191690831515021790555050565b6000612422610810565b670de0b6b3a7640000612433611ea7565b61243d9190612ca3565b6124479190612a56565b905090565b600660149054906101000a900460ff161561249c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249390612b18565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd33306124df8786611491565b6040518463ffffffff1660e01b81526004016124fd93929190612b38565b602060405180830381600087803b15801561251757600080fd5b505af115801561252b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254f9190612b9b565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161258d93929190612b38565b602060405180830381600087803b1580156125a757600080fd5b505af11580156125bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125df9190612b9b565b506125ea8382611491565b816125f59190612ca3565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461264391906129d1565b925050819055506126548382611491565b8161265f9190612ca3565b6003600082825461267091906129d1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6146126b98584611491565b836040516126c8929190612cfd565b60405180910390a26000600660146101000a81548160ff021916908315150217905550505050565b600047905090565b60096020528060005260406000206000915090505481565b6000819050919050565b61272381612710565b82525050565b600060208201905061273e600083018461271a565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061277482612749565b9050919050565b61278481612769565b811461278f57600080fd5b50565b6000813590506127a18161277b565b92915050565b6000602082840312156127bd576127bc612744565b5b60006127cb84828501612792565b91505092915050565b6127dd81612710565b81146127e857600080fd5b50565b6000813590506127fa816127d4565b92915050565b6000806040838503121561281757612816612744565b5b600061282585828601612792565b9250506020612836858286016127eb565b9150509250929050565b60008115159050919050565b61285581612840565b82525050565b6000602082019050612870600083018461284c565b92915050565b60006020828403121561288c5761288b612744565b5b600061289a848285016127eb565b91505092915050565b6128ac81612769565b82525050565b60006020820190506128c760008301846128a3565b92915050565b600080604083850312156128e4576128e3612744565b5b60006128f2858286016127eb565b9250506020612903858286016127eb565b9150509250929050565b60008060006060848603121561292657612925612744565b5b600061293486828701612792565b935050602061294586828701612792565b9250506040612956868287016127eb565b9150509250925092565b60008151905061296f816127d4565b92915050565b60006020828403121561298b5761298a612744565b5b600061299984828501612960565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129dc82612710565b91506129e783612710565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a1c57612a1b6129a2565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612a6182612710565b9150612a6c83612710565b925082612a7c57612a7b612a27565b5b828204905092915050565b6000612a9282612710565b9150612a9d83612710565b925082821015612ab057612aaf6129a2565b5b828203905092915050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b6000612b02600e83612abb565b9150612b0d82612acc565b602082019050919050565b60006020820190508181036000830152612b3181612af5565b9050919050565b6000606082019050612b4d60008301866128a3565b612b5a60208301856128a3565b612b67604083018461271a565b949350505050565b612b7881612840565b8114612b8357600080fd5b50565b600081519050612b9581612b6f565b92915050565b600060208284031215612bb157612bb0612744565b5b6000612bbf84828501612b86565b91505092915050565b6000604082019050612bdd60008301856128a3565b612bea602083018461271a565b9392505050565b600081905092915050565b50565b6000612c0c600083612bf1565b9150612c1782612bfc565b600082019050919050565b6000612c2d82612bff565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000612c6d601483612abb565b9150612c7882612c37565b602082019050919050565b60006020820190508181036000830152612c9c81612c60565b9050919050565b6000612cae82612710565b9150612cb983612710565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cf257612cf16129a2565b5b828202905092915050565b6000604082019050612d12600083018561271a565b612d1f602083018461271a565b939250505056fea2646970667358221220ae1800e6dc35bda83e1522b7503410c1b9093f516e365d432465b384dfd4240b64736f6c63430008090033a2646970667358221220d85e3e876aa72b34f923ee779abf2eae92324bc976eb76bd1cdedea76f030d3064736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000b85760003560e01c80638aad070f116200007b5780638aad070f146200019f5780638b273a6814620001d55780638c75d89d146200020b578063930186f214620002415780639e2c58ca1462000278578063b33f78ca146200029a57620000b8565b80634f64b2be14620000bd5780635553246014620000f35780636fbe6fea14620001295780637663f8221462000149578063884db063146200017f575b600080fd5b620000db6004803603810190620000d5919062001c38565b620002d0565b604051620000ea919062001caf565b60405180910390f35b6200011160048036038101906200010b919062001cfd565b62000310565b60405162000120919062001caf565b60405180910390f35b62000147600480360381019062000141919062001cfd565b62000b6e565b005b62000167600480360381019062000161919062001cfd565b62000fc5565b60405162000176919062001d61565b60405180910390f35b6200019d600480360381019062000197919062001d7e565b620010ef565b005b620001bd6004803603810190620001b7919062001df0565b62001951565b604051620001cc919062001ea2565b60405180910390f35b620001f36004803603810190620001ed919062001cfd565b620019a0565b60405162000202919062001ea2565b60405180910390f35b62000229600480360381019062000223919062001df0565b620019e2565b60405162000238919062001caf565b60405180910390f35b6200025f600480360381019062000259919062001c38565b62001a31565b6040516200026f92919062001ebf565b60405180910390f35b6200028262001aa6565b60405162000291919062001fba565b60405180910390f35b620002b86004803603810190620002b2919062001fde565b62001b36565b604051620002c7919062001d61565b60405180910390f35b60038181548110620002e157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000379576040517fef107d8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200043c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620003f1575b505050505090506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200050657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620004bb575b5050505050905060008060005b845181101562000b605760005b845181101562000b495784818151811062000540576200053f62002010565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1686838151811062000574576200057362002010565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141562000b335760005b60058054905081101562000b3157868381518110620005c057620005bf62002010565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1660058281548110620005f557620005f462002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000b1b576000600582815481106200065d576200065c62002010565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015620006d557600080fd5b505afa158015620006ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007109190620020d8565b505050915050600080600260008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006005868154811062000771576200077062002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600587815481106200085a576200085962002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006005868154811062000902576200090162002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016200096e919062001caf565b60206040518083038186803b1580156200098757600080fd5b505afa1580156200099c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c2919062002160565b9050600060058781548110620009dd57620009dc62002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040162000a49919062001caf565b60206040518083038186803b15801562000a6257600080fd5b505afa15801562000a77573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a9d919062002160565b905085818362000aae9190620021c1565b62000aba91906200225f565b94508985131562000b14576005878154811062000adc5762000adb62002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169a508499505b5050505050505b808062000b289062002386565b9150506200059c565b505b808062000b409062002386565b91505062000520565b50808062000b579062002386565b91505062000513565b508194505050505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000bf4576040517fa3da448900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600580549050141562000d0557600560405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000fc1565b60005b60058054905081101562000fbf578273ffffffffffffffffffffffffffffffffffffffff166005828154811062000d445762000d4362002010565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000e905760405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152506005828154811062000deb5762000dea62002010565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505062000fbf565b600160058054905062000ea49190620023d4565b81141562000fa957600560405180604001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b808062000fb69062002386565b91505062000d08565b505b5050565b60008060005b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015620010e4578373ffffffffffffffffffffffffffffffffffffffff16600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811062001081576200108062002010565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620010ce57600191505b8080620010db9062002386565b91505062000fcb565b508091505092915050565b600060149054906101000a900460ff161562001142576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011399062002470565b60405180910390fd5b6001600060146101000a81548160ff02191690831515021790555062001169848462000fc5565b15620011a1576040517f2f5f48b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401620011e093929190620024a3565b602060405180830381600087803b158015620011fb57600080fd5b505af115801562001210573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001236919062002511565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016200127693929190620024a3565b602060405180830381600087803b1580156200129157600080fd5b505af1158015620012a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012cc919062002511565b5060008484604051620012df9062001bea565b620012ec92919062001ebf565b604051809103906000f08015801562001309573d6000803e3d6000fd5b5090508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b382856040518363ffffffff1660e01b81526004016200134992919062002543565b602060405180830381600087803b1580156200136457600080fd5b505af115801562001379573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200139f919062002511565b508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b382846040518363ffffffff1660e01b8152600401620013dd92919062002543565b602060405180830381600087803b158015620013f857600080fd5b505af11580156200140d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001433919062002511565b508073ffffffffffffffffffffffffffffffffffffffff1663a40f4fa184846040518363ffffffff1660e01b81526004016200147192919062002570565b600060405180830381600087803b1580156200148c57600080fd5b505af1158015620014a1573d6000803e3d6000fd5b50505050600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600015156200180a8662001b36565b1515141562001877576003859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60001515620018868562001b36565b15151415620018f3576003849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f1bfa76d353829689440900638fb4e4d604519997726fa1ee0f885e3df12ed7f881868660405162001928939291906200259d565b60405180910390a15060008060146101000a81548160ff02191690831515021790555050505050565b600460205281600052604060002081815481106200196e57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528160005260406000208181548110620019ff57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005818154811062001a4257600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6060600380548060200260200160405190810160405280929190818152602001828054801562001b2c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162001ae1575b5050505050905090565b60008060005b60038054905081101562001be0576003818154811062001b615762001b6062002010565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141562001bca576001915062001be0565b808062001bd79062002386565b91505062001b3c565b5080915050919050565b612f3780620025db83390190565b600080fd5b6000819050919050565b62001c128162001bfd565b811462001c1e57600080fd5b50565b60008135905062001c328162001c07565b92915050565b60006020828403121562001c515762001c5062001bf8565b5b600062001c618482850162001c21565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001c978262001c6a565b9050919050565b62001ca98162001c8a565b82525050565b600060208201905062001cc6600083018462001c9e565b92915050565b62001cd78162001c8a565b811462001ce357600080fd5b50565b60008135905062001cf78162001ccc565b92915050565b6000806040838503121562001d175762001d1662001bf8565b5b600062001d278582860162001ce6565b925050602062001d3a8582860162001ce6565b9150509250929050565b60008115159050919050565b62001d5b8162001d44565b82525050565b600060208201905062001d78600083018462001d50565b92915050565b6000806000806080858703121562001d9b5762001d9a62001bf8565b5b600062001dab8782880162001ce6565b945050602062001dbe8782880162001ce6565b935050604062001dd18782880162001c21565b925050606062001de48782880162001c21565b91505092959194509250565b6000806040838503121562001e0a5762001e0962001bf8565b5b600062001e1a8582860162001ce6565b925050602062001e2d8582860162001c21565b9150509250929050565b6000819050919050565b600062001e6262001e5c62001e568462001c6a565b62001e37565b62001c6a565b9050919050565b600062001e768262001e41565b9050919050565b600062001e8a8262001e69565b9050919050565b62001e9c8162001e7d565b82525050565b600060208201905062001eb9600083018462001e91565b92915050565b600060408201905062001ed6600083018562001c9e565b62001ee5602083018462001c9e565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62001f238162001c8a565b82525050565b600062001f37838362001f18565b60208301905092915050565b6000602082019050919050565b600062001f5d8262001eec565b62001f69818562001ef7565b935062001f768362001f08565b8060005b8381101562001fad57815162001f91888262001f29565b975062001f9e8362001f43565b92505060018101905062001f7a565b5085935050505092915050565b6000602082019050818103600083015262001fd6818462001f50565b905092915050565b60006020828403121562001ff75762001ff662001bf8565b5b6000620020078482850162001ce6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600069ffffffffffffffffffff82169050919050565b62002060816200203f565b81146200206c57600080fd5b50565b600081519050620020808162002055565b92915050565b6000819050919050565b6200209b8162002086565b8114620020a757600080fd5b50565b600081519050620020bb8162002090565b92915050565b600081519050620020d28162001c07565b92915050565b600080600080600060a08688031215620020f757620020f662001bf8565b5b600062002107888289016200206f565b95505060206200211a88828901620020aa565b94505060406200212d88828901620020c1565b93505060606200214088828901620020c1565b925050608062002153888289016200206f565b9150509295509295909350565b60006020828403121562002179576200217862001bf8565b5b60006200218984828501620020c1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620021ce8262002086565b9150620021db8362002086565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161562002219576200221862002192565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161562002254576200225362002192565b5b828201905092915050565b60006200226c8262002086565b9150620022798362002086565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615620022bb57620022ba62002192565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615620022fb57620022fa62002192565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156200233b576200233a62002192565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156200237b576200237a62002192565b5b828202905092915050565b6000620023938262001bfd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620023c957620023c862002192565b5b600182019050919050565b6000620023e18262001bfd565b9150620023ee8362001bfd565b92508282101562002404576200240362002192565b5b828203905092915050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b600062002458600e836200240f565b9150620024658262002420565b602082019050919050565b600060208201905081810360008301526200248b8162002449565b9050919050565b6200249d8162001bfd565b82525050565b6000606082019050620024ba600083018662001c9e565b620024c9602083018562001c9e565b620024d8604083018462002492565b949350505050565b620024eb8162001d44565b8114620024f757600080fd5b50565b6000815190506200250b81620024e0565b92915050565b6000602082840312156200252a576200252962001bf8565b5b60006200253a84828501620024fa565b91505092915050565b60006040820190506200255a600083018562001c9e565b62002569602083018462002492565b9392505050565b600060408201905062002587600083018562002492565b62002596602083018462002492565b9392505050565b6000606082019050620025b4600083018662001e91565b620025c3602083018562001c9e565b620025d2604083018462001c9e565b94935050505056fe608060405266038d7ea4c680006005553480156200001c57600080fd5b5060405162002f3738038062002f37833981810160405281019062000042919062000184565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555066038d7ea4c680006005819055505050620001cb565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014c826200011f565b9050919050565b6200015e816200013f565b81146200016a57600080fd5b50565b6000815190506200017e8162000153565b92915050565b600080604083850312156200019e576200019d6200011a565b5b6000620001ae858286016200016d565b9250506020620001c1858286016200016d565b9150509250929050565b612d5c80620001db6000396000f3fe6080604052600436106101e75760003560e01c80638da5cb5b11610102578063aa03f2ed11610095578063e35ba8ab11610064578063e35ba8ab1461074a578063e4a7672614610775578063f318e5571461079e578063ffebfc8c146107c95761021e565b8063aa03f2ed146106ad578063ce5efee3146106d8578063d4cadf6814610703578063dc1716241461072e5761021e565b8063a04f6639116100d1578063a04f663914610603578063a40f4fa11461062e578063a875480314610657578063a97533b8146106825761021e565b80638da5cb5b1461053557806395cc4c5e146105605780639a61c36a1461059d5780639c8f9f23146105da5761021e565b806340702adc1161017a578063696c613111610149578063696c61311461047b5780637c262871146104a457806381bace7d146104bb5780638477a634146104f85761021e565b806340702adc146103de5780634257dc4c146104095780634d2d757c1461042557806354cf2aeb146104505761021e565b806328593984116101b6578063285939841461030e57806328da1aef146103395780632d4ce66914610376578063405eae91146103b35761021e565b80630910a51014610250578063131a6f011461027b5780631a686502146102a657806324aabb92146102d15761021e565b3661021e576040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561025c57600080fd5b50610265610806565b6040516102729190612729565b60405180910390f35b34801561028757600080fd5b50610290610810565b60405161029d9190612729565b60405180910390f35b3480156102b257600080fd5b506102bb6108c2565b6040516102c89190612729565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f391906127a7565b6108c8565b6040516103059190612729565b60405180910390f35b34801561031a57600080fd5b506103236108e0565b6040516103309190612729565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b9190612800565b6108e6565b60405161036d9190612729565b60405180910390f35b34801561038257600080fd5b5061039d600480360381019061039891906127a7565b610a55565b6040516103aa9190612729565b60405180910390f35b3480156103bf57600080fd5b506103c8610ae7565b6040516103d5919061285b565b60405180910390f35b3480156103ea57600080fd5b506103f3610b96565b6040516104009190612729565b60405180910390f35b610423600480360381019061041e9190612876565b610b9c565b005b34801561043157600080fd5b5061043a61102e565b604051610447919061285b565b60405180910390f35b34801561045c57600080fd5b50610465611097565b6040516104729190612729565b60405180910390f35b34801561048757600080fd5b506104a2600480360381019061049d9190612876565b61109d565b005b3480156104b057600080fd5b506104b96110b5565b005b3480156104c757600080fd5b506104e260048036038101906104dd91906127a7565b61134a565b6040516104ef9190612729565b60405180910390f35b34801561050457600080fd5b5061051f600480360381019061051a91906127a7565b611453565b60405161052c9190612729565b60405180910390f35b34801561054157600080fd5b5061054a61146b565b60405161055791906128b2565b60405180910390f35b34801561056c57600080fd5b5061058760048036038101906105829190612800565b611491565b6040516105949190612729565b60405180910390f35b3480156105a957600080fd5b506105c460048036038101906105bf91906127a7565b61157a565b6040516105d19190612729565b60405180910390f35b3480156105e657600080fd5b5061060160048036038101906105fc9190612876565b611592565b005b34801561060f57600080fd5b50610618611b3e565b6040516106259190612729565b60405180910390f35b34801561063a57600080fd5b50610655600480360381019061065091906128cd565b611b48565b005b34801561066357600080fd5b5061066c611e4d565b60405161067991906128b2565b60405180910390f35b34801561068e57600080fd5b50610697611e73565b6040516106a49190612729565b60405180910390f35b3480156106b957600080fd5b506106c2611ea7565b6040516106cf9190612729565b60405180910390f35b3480156106e457600080fd5b506106ed611f58565b6040516106fa91906128b2565b60405180910390f35b34801561070f57600080fd5b50610718611f7c565b6040516107259190612729565b60405180910390f35b61074860048036038101906107439190612876565b611f86565b005b34801561075657600080fd5b5061075f612418565b60405161076c9190612729565b60405180910390f35b34801561078157600080fd5b5061079c6004803603810190610797919061290d565b61244c565b005b3480156107aa57600080fd5b506107b36126f0565b6040516107c09190612729565b60405180910390f35b3480156107d557600080fd5b506107f060048036038101906107eb91906127a7565b6126f8565b6040516107fd9190612729565b60405180910390f35b6000600354905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161086d91906128b2565b60206040518083038186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190612975565b905090565b60035481565b60076020528060005260406000206000915090505481565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561098257600082610948611ea7565b61095291906129d1565b90506000816003546109649190612a56565b90508061096f610810565b6109799190612a87565b92505050610a4f565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a1d576000826109e3610810565b6109ed91906129d1565b90506000816003546109ff9190612a56565b905080610a0a611ea7565b610a149190612a87565b92505050610a4f565b6040517fd526485500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a9091906128b2565b60206040518083038186803b158015610aa857600080fd5b505afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae09190612975565b9050919050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205060004290508062015180600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b7d91906129d1565b1015610b8d576001915050610b93565b60009150505b90565b60025481565b600660149054906101000a900460ff1615610bec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be390612b18565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550610c0f611ea7565b8110610c8e573373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610c5b573d6000803e3d6000fd5b506040517fe45bfdc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554341015610cca576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460046000828254610cde91906129d1565b92505081905550600060055434610cf59190612a87565b90506000610d01610810565b9050600083610d0e611ea7565b610d1891906129d1565b9050600081600354610d2a9190612a56565b905060008184610d3a9190612a87565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b8152600401610d9993929190612b38565b602060405180830381600087803b158015610db357600080fd5b505af1158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190612b9b565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610e49929190612bc8565b602060405180830381600087803b158015610e6357600080fd5b505af1158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190612b9b565b5060003373ffffffffffffffffffffffffffffffffffffffff1686604051610ec290612c22565b60006040518083038185875af1925050503d8060008114610eff576040519150601f19603f3d011682016040523d82523d6000602084013e610f04565b606091505b5050905080610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3f90612c83565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f92611e73565b604051610fa0929190612bc8565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff4612418565b604051611002929190612bc8565b60405180910390a15050505050506000600660146101000a81548160ff02191690831515021790555050565b60006301e13380600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461107f91906129d1565b42111561108f5760019050611094565b600090505b90565b60055481565b600660009054906101000a9050508060058190555050565b600015156110c1610ae7565b151514156110fb576040517ffdbfe33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006003546064600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111d49190612ca3565b6111de9190612a56565b90506000606482836064866111f39190612ca3565b6111fd9190612a56565b60045461120a9190612a87565b6112149190612ca3565b61121e9190612a56565b90504781111561125a576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a991906129d1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156112f6573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fbf630ce062dbeaeb6c23a21390208b25de2ac16fb8502eab6054a70d9e34b8ec8260405161133d9190612729565b60405180910390a2505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156113d557503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561140c576040517f2ffae41300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a6020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561151c576114f0611ea7565b670de0b6b3a7640000611501610810565b61150b9190612ca3565b6115159190612a56565b905061154c565b611524610810565b670de0b6b3a7640000611535611ea7565b61153f9190612ca3565b6115499190612a56565b90505b6000670de0b6b3a764000082856115639190612ca3565b61156d9190612a56565b9050809250505092915050565b60086020528060005260406000206000915090505481565b600660149054906101000a900460ff16156115e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d990612b18565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600354670de0b6b3a76400008361165a9190612ca3565b6116649190612a56565b90506000606484836116769190612ca3565b6116809190612a56565b90506000670de0b6b3a7640000611695611ea7565b836116a09190612ca3565b6116aa9190612a56565b90506000670de0b6b3a76400006116bf610810565b846116ca9190612ca3565b6116d49190612a56565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801561173e57506000151561173a61102e565b1515145b80156117a0575060025481836117549190612ca3565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461179e9190612a87565b105b156117d7576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161183191906128b2565b60206040518083038186803b15801561184957600080fd5b505afa15801561185d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118819190612975565b1080611936575080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118e491906128b2565b60206040518083038186803b1580156118fc57600080fd5b505afa158015611910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119349190612975565b105b1561196d576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016119c8929190612bc8565b602060405180830381600087803b1580156119e257600080fd5b505af11580156119f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1a9190612b9b565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611a78929190612bc8565b602060405180830381600087803b158015611a9257600080fd5b505af1158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca9190612b9b565b503373ffffffffffffffffffffffffffffffffffffffff167fbad053f5b243c76f17611a28d4554167bd09e3491be13032dd4af620e8e228728383604051611b13929190612cfd565b60405180910390a250505050506000600660146101000a81548160ff02191690831515021790555050565b6000600454905090565b600660009054906101000a9050506000600a6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611bf2576040517f17ebf42200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611c9393929190612b38565b602060405180830381600087803b158015611cad57600080fd5b505af1158015611cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce59190612b9b565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611d4593929190612b38565b602060405180830381600087803b158015611d5f57600080fd5b505af1158015611d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d979190612b9b565b508082611da49190612ca3565b600281905550600254600381905550600254600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6148383604051611e41929190612cfd565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611e7d611ea7565b670de0b6b3a7640000611e8e610810565b611e989190612ca3565b611ea29190612a56565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f0391906128b2565b60206040518083038186803b158015611f1b57600080fd5b505afa158015611f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f539190612975565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b600660149054906101000a900460ff1615611fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fcd90612b18565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550611ff9610810565b8110612078573373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015612045573d6000803e3d6000fd5b506040517fe45bfdc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005543410156120b4576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554600460008282546120c891906129d1565b925050819055506000600554346120df9190612a87565b905060006120eb611ea7565b90506000836120f8610810565b61210291906129d1565b90506000816003546121149190612a56565b9050600081846121249190612a87565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161218593929190612b38565b602060405180830381600087803b15801561219f57600080fd5b505af11580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d79190612b9b565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612233929190612bc8565b602060405180830381600087803b15801561224d57600080fd5b505af1158015612261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122859190612b9b565b5060003373ffffffffffffffffffffffffffffffffffffffff16866040516122ac90612c22565b60006040518083038185875af1925050503d80600081146122e9576040519150601f19603f3d011682016040523d82523d6000602084013e6122ee565b606091505b5050905080612332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232990612c83565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661237c611e73565b60405161238a929190612bc8565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166123de612418565b6040516123ec929190612bc8565b60405180910390a15050505050506000600660146101000a81548160ff02191690831515021790555050565b6000612422610810565b670de0b6b3a7640000612433611ea7565b61243d9190612ca3565b6124479190612a56565b905090565b600660149054906101000a900460ff161561249c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249390612b18565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd33306124df8786611491565b6040518463ffffffff1660e01b81526004016124fd93929190612b38565b602060405180830381600087803b15801561251757600080fd5b505af115801561252b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254f9190612b9b565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161258d93929190612b38565b602060405180830381600087803b1580156125a757600080fd5b505af11580156125bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125df9190612b9b565b506125ea8382611491565b816125f59190612ca3565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461264391906129d1565b925050819055506126548382611491565b8161265f9190612ca3565b6003600082825461267091906129d1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6146126b98584611491565b836040516126c8929190612cfd565b60405180910390a26000600660146101000a81548160ff021916908315150217905550505050565b600047905090565b60096020528060005260406000206000915090505481565b6000819050919050565b61272381612710565b82525050565b600060208201905061273e600083018461271a565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061277482612749565b9050919050565b61278481612769565b811461278f57600080fd5b50565b6000813590506127a18161277b565b92915050565b6000602082840312156127bd576127bc612744565b5b60006127cb84828501612792565b91505092915050565b6127dd81612710565b81146127e857600080fd5b50565b6000813590506127fa816127d4565b92915050565b6000806040838503121561281757612816612744565b5b600061282585828601612792565b9250506020612836858286016127eb565b9150509250929050565b60008115159050919050565b61285581612840565b82525050565b6000602082019050612870600083018461284c565b92915050565b60006020828403121561288c5761288b612744565b5b600061289a848285016127eb565b91505092915050565b6128ac81612769565b82525050565b60006020820190506128c760008301846128a3565b92915050565b600080604083850312156128e4576128e3612744565b5b60006128f2858286016127eb565b9250506020612903858286016127eb565b9150509250929050565b60008060006060848603121561292657612925612744565b5b600061293486828701612792565b935050602061294586828701612792565b9250506040612956868287016127eb565b9150509250925092565b60008151905061296f816127d4565b92915050565b60006020828403121561298b5761298a612744565b5b600061299984828501612960565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129dc82612710565b91506129e783612710565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a1c57612a1b6129a2565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612a6182612710565b9150612a6c83612710565b925082612a7c57612a7b612a27565b5b828204905092915050565b6000612a9282612710565b9150612a9d83612710565b925082821015612ab057612aaf6129a2565b5b828203905092915050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b6000612b02600e83612abb565b9150612b0d82612acc565b602082019050919050565b60006020820190508181036000830152612b3181612af5565b9050919050565b6000606082019050612b4d60008301866128a3565b612b5a60208301856128a3565b612b67604083018461271a565b949350505050565b612b7881612840565b8114612b8357600080fd5b50565b600081519050612b9581612b6f565b92915050565b600060208284031215612bb157612bb0612744565b5b6000612bbf84828501612b86565b91505092915050565b6000604082019050612bdd60008301856128a3565b612bea602083018461271a565b9392505050565b600081905092915050565b50565b6000612c0c600083612bf1565b9150612c1782612bfc565b600082019050919050565b6000612c2d82612bff565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000612c6d601483612abb565b9150612c7882612c37565b602082019050919050565b60006020820190508181036000830152612c9c81612c60565b9050919050565b6000612cae82612710565b9150612cb983612710565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cf257612cf16129a2565b5b828202905092915050565b6000604082019050612d12600083018561271a565b612d1f602083018461271a565b939250505056fea2646970667358221220ae1800e6dc35bda83e1522b7503410c1b9093f516e365d432465b384dfd4240b64736f6c63430008090033a2646970667358221220d85e3e876aa72b34f923ee779abf2eae92324bc976eb76bd1cdedea76f030d3064736f6c63430008090033",
  "devdoc": {
    "details": "Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem. Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions. Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.",
    "kind": "dev",
    "methods": {
      "addRoutingAddress(address,address)": {
        "details": "Allows the contract owner to add or update the routing address for a token. This is used for token swaps and price feed lookups.",
        "params": {
          "priceFeed": "The Chainlink price feed address for the token.",
          "tokenAddress": "The token for which to set the routing."
        }
      },
      "createPool(address,address,uint256,uint256)": {
        "details": "Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings. Emits a PoolCreated event upon successful creation. Requirements: - The token pair must not already have an existing pool. - The caller must have approved the contract to spend the necessary token amounts.",
        "params": {
          "_assetOneAddress": "The address of the first token in the pair.",
          "_assetTwoAddress": "The address of the second token in the pair.",
          "amountOne": "The amount of the first token to add to the pool.",
          "amountTwo": "The amount of the second token to add to the pool."
        }
      },
      "exists(address,address)": {
        "details": "Checks if a liquidity pool exists for a given pair of tokens.",
        "params": {
          "token1": "The address of the first token.",
          "token2": "The address of the second token."
        },
        "returns": {
          "_0": "bool Returns true if the pool exists, false otherwise."
        }
      },
      "tokenExists(address)": {
        "details": "Checks if a token is already tracked by the contract.",
        "params": {
          "tokenAddress": "The address of the token to check."
        },
        "returns": {
          "_0": "bool Returns true if the token is tracked, false otherwise."
        }
      },
      "tokenList()": {
        "details": "Returns all array of all tradable tokens on the platform",
        "returns": {
          "_0": "array Returns tokens array."
        }
      },
      "tokenToRoute(address,address)": {
        "details": "Determines the optimal routing token for a swap between two tokens, based on available liquidity and price feeds.",
        "params": {
          "address1": "The address of the first token.",
          "address2": "The address of the second token."
        },
        "returns": {
          "_0": "address The address of the optimal routing token."
        }
      }
    },
    "title": "PoolTracker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2282,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2293,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "locked",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2326,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "poolPairs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2333,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "pairToPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_contract(LiquidityPool)2266))"
      },
      {
        "astId": 2336,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "tokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2342,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "poolOwner",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_contract(LiquidityPool)2266)dyn_storage)"
      },
      {
        "astId": 2591,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "routingAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(routingAddress)2587_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(LiquidityPool)2266)dyn_storage": {
        "base": "t_contract(LiquidityPool)2266",
        "encoding": "dynamic_array",
        "label": "contract LiquidityPool[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(routingAddress)2587_storage)dyn_storage": {
        "base": "t_struct(routingAddress)2587_storage",
        "encoding": "dynamic_array",
        "label": "struct PoolTracker.routingAddress[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(LiquidityPool)2266": {
        "encoding": "inplace",
        "label": "contract LiquidityPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_contract(LiquidityPool)2266)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract LiquidityPool[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(LiquidityPool)2266)dyn_storage"
      },
      "t_mapping(t_address,t_contract(LiquidityPool)2266)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract LiquidityPool)",
        "numberOfBytes": "32",
        "value": "t_contract(LiquidityPool)2266"
      },
      "t_mapping(t_address,t_mapping(t_address,t_contract(LiquidityPool)2266))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => contract LiquidityPool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_contract(LiquidityPool)2266)"
      },
      "t_struct(routingAddress)2587_storage": {
        "encoding": "inplace",
        "label": "struct PoolTracker.routingAddress",
        "members": [
          {
            "astId": 2584,
            "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2586,
            "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
            "label": "priceFeed",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}