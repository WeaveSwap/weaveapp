{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "lendingTracker_addressNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lendingTracker_amountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lendingTracker_poolNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lendingTracker_receiptDoesntExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "collateralTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userFarmedYield",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userLended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        }
      ],
      "name": "userReturnedBorrowedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userStakedCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userUnstakedCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userWithdrawnLendedTokens",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceAddress",
          "type": "address"
        }
      ],
      "name": "addTokenPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowReceipts",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowingId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newAPY",
          "type": "uint256"
        }
      ],
      "name": "changeBorrowingAPY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceAddress",
          "type": "address"
        }
      ],
      "name": "changePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "lendToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "additionalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidityTreshold",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "userTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "newTokenChecker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "returnBorrowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "stakeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "terminateCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToPool",
      "outputs": [
        {
          "internalType": "contract Lending",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "unstakeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceAddress",
          "type": "address"
        }
      ],
      "name": "usdConverter",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBorrowReceipts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLendedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userLendedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLendedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xadecb15eea6a7a75cbee0e00932e546a604e300802d006f1960ffe50b896f08f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "4810317",
    "logsBloom": "0x
    "blockHash": "0x51895d803b2883a4d89bc802ad5367a680cf4a7bda7ff07c09d82f97ba0bdbf9",
    "transactionHash": "0xadecb15eea6a7a75cbee0e00932e546a604e300802d006f1960ffe50b896f08f",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "4810317",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "30e751f29dc882e93d446105100fc085",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"lendingTracker_addressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lendingTracker_amountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lendingTracker_poolNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lendingTracker_receiptDoesntExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"collateralTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userFarmedYield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userLended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"userReturnedBorrowedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userStakedCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userUnstakedCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userWithdrawnLendedTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceAddress\",\"type\":\"address\"}],\"name\":\"addTokenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowReceipts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"borrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAPY\",\"type\":\"uint256\"}],\"name\":\"changeBorrowingAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceAddress\",\"type\":\"address\"}],\"name\":\"changePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"lendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"additionalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"liquidityTreshold\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"newTokenChecker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"returnBorrowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"stakeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"terminateCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToPool\",\"outputs\":[{\"internalType\":\"contract Lending\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"unstakeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceAddress\",\"type\":\"address\"}],\"name\":\"usdConverter\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBorrowReceipts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLendedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLendedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLendedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages lending, borrowing, and collateral operations for a decentralized finance platform. Utilizes external price feeds for valuation and includes functionality for yield farming. This contract is responsible for tracking user interactions with lending pools and their collateralized positions.\",\"kind\":\"dev\",\"methods\":{\"addTokenPool(address,address)\":{\"details\":\"Deploys a new Lending contract for the token and registers it along with its price feed.\",\"params\":{\"priceAddress\":\"Address of the Chainlink price feed for the token.\",\"tokenAddress\":\"Address of the token for the new lending pool.\"}},\"borrowToken(address,uint256)\":{\"details\":\"The function checks for sufficient liquidity and adherence to the loan-to-value (LTV) ratio before permitting the borrow. Updates the user's borrow receipts to keep track of the borrowed amount and terms.\",\"params\":{\"tokenAddress\":\"The address of the token the user wishes to borrow.\",\"tokenAmount\":\"The amount of tokens the user wants to borrow.\"}},\"changeBorrowingAPY(address,uint256)\":{\"params\":{\"newAPY\":\"The new annual percentage yield for borrowing.\",\"tokenAddress\":\"Address of the token whose lending pool APY is to be changed.\"}},\"changePriceFeed(address,address)\":{\"details\":\"Allows the contract owner to update the price feed address in case of changes or migration.\",\"params\":{\"priceAddress\":\"New address of the Chainlink price feed.\",\"tokenAddress\":\"Address of the token whose price feed is being updated.\"}},\"getYield(address)\":{\"details\":\"Calculates the yield based on the amount lent and the time passed, then transfers the yield to the user.\",\"params\":{\"tokenAddress\":\"The address of the token for which yield is being claimed.\"}},\"lendToken(address,uint256)\":{\"details\":\"Transfers tokens from the user to the lending pool contract and updates the tracking of lent amounts. Requires token approval from the user to the LendingTracker contract.\",\"params\":{\"tokenAddress\":\"The address of the token being lent.\",\"tokenAmount\":\"The amount of tokens the user is lending.\"}},\"liquidityTreshold(address,address,uint256)\":{\"details\":\"Used to determine if a user's borrowings are within permissible limits. Can also factor in an additional amount being borrowed or provided as collateral.\",\"params\":{\"additionalTokenAddress\":\"Optionally, the address of a token being considered for borrowing/collateral.\",\"tokenAmount\":\"Optionally, the amount of the additional token being considered.\",\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"The LTV ratio as a percentage.\"}},\"newTokenChecker(address[],address)\":{\"details\":\"Utility function to prevent duplicate entries in user token arrays.\",\"params\":{\"token\":\"Address of the token to check.\",\"userTokens\":\"Array of token addresses the user has interacted with.\"},\"returns\":{\"_0\":\"bool True if the token is not in the array, false otherwise.\"}},\"returnBorrowedToken(uint256,uint256)\":{\"details\":\"Calculates interest based on the borrowing APY and time elapsed since the token was borrowed.\",\"params\":{\"id\":\"The unique identifier of the borrow receipt.\",\"tokenAmount\":\"The amount of the borrowed token being returned.\"}},\"stakeCollateral(address,uint256)\":{\"details\":\"Transfers tokens from the user to this contract for collateralization. Updates the collateral tracking mappings.\",\"params\":{\"tokenAddress\":\"The address of the token being staked as collateral.\",\"tokenAmount\":\"The amount of the token to stake.\"}},\"terminateCollateral(address)\":{\"details\":\"Meant to be called by an external mechanism (like a keeper) that monitors LTV ratios.\",\"params\":{\"userAddress\":\"The address of the user whose collateral is being liquidated.\"}},\"unstakeCollateral(address,uint256)\":{\"details\":\"Ensures that the withdrawal does not violate the loan-to-value (LTV) requirements.\",\"params\":{\"tokenAddress\":\"The address of the token to unstake.\",\"tokenAmount\":\"The amount of the token to unstake.\"}},\"usdConverter(address)\":{\"details\":\"Utility function to assist in calculating collateral values and loan amounts.\",\"params\":{\"priceAddress\":\"Address of the Chainlink price feed for the token.\"},\"returns\":{\"_0\":\"int The USD value of the token amount based on the latest price feed data.\"}},\"withdrawLendedToken(address,uint256)\":{\"details\":\"Ensures the user cannot withdraw more than they have lent. Adjusts the user's lent amount record accordingly.\",\"params\":{\"tokenAddress\":\"The address of the token to withdraw from the lending pool.\",\"tokenAmount\":\"The amount of tokens to withdraw.\"}}},\"title\":\"LendingTracker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTokenPool(address,address)\":{\"notice\":\"Adds a new token pool for lending and borrowing.\"},\"borrowToken(address,uint256)\":{\"notice\":\"Allows a user to borrow tokens from a specific lending pool.\"},\"changeBorrowingAPY(address,uint256)\":{\"notice\":\"Updates the borrowing APY for a specified token pool.\"},\"changePriceFeed(address,address)\":{\"notice\":\"Changes the price feed for a given token.\"},\"getYield(address)\":{\"notice\":\"Claims yield for the user based on the tokens they have lent to the pool.\"},\"lendToken(address,uint256)\":{\"notice\":\"Enables a user to lend tokens to a specific pool.\"},\"liquidityTreshold(address,address,uint256)\":{\"notice\":\"Computes the current loan-to-value (LTV) ratio for a user's borrowed funds against their staked collateral.\"},\"newTokenChecker(address[],address)\":{\"notice\":\"Checks if a new token is not already tracked by the user's token array.\"},\"returnBorrowedToken(uint256,uint256)\":{\"notice\":\"Allows a user to return borrowed tokens along with any accrued interest.\"},\"stakeCollateral(address,uint256)\":{\"notice\":\"Allows users to stake tokens as collateral for borrowing.\"},\"terminateCollateral(address)\":{\"notice\":\"Initiates the liquidation of a user's collateral if their LTV ratio exceeds the maximum permitted value.\"},\"unstakeCollateral(address,uint256)\":{\"notice\":\"Permits users to withdraw their staked collateral, provided they have no outstanding loans.\"},\"usdConverter(address)\":{\"notice\":\"Converts the token amount to its USD equivalent using Chainlink price feeds.\"},\"withdrawLendedToken(address,uint256)\":{\"notice\":\"Withdraws tokens previously lent to the lending pool by the user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lending/LendingTracker.sol\":\"LendingTracker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Lending/Lending.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.9;\\n\\n// OpenZeppelin's ERC20 interface for interactions with ERC20 tokens.\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n// Custom errors for specific failure conditions.\\nerror lending_outOfReserve();\\nerror lending_addressNotAllowed();\\nerror lending_reserveNotAvailable();\\nerror lending_notEnoughTimePassed();\\n\\n/**\\n * @title Lending\\n * @dev Implements lending and yield farming functionalities for a specific ERC20 token.\\n * This contract allows tokens to be lent out and borrowed, tracks yield farming activities,\\n * and allows for the accumulation and withdrawal of yield based on predefined APY.\\n */\\ncontract Lending {\\n    // The ERC20 token used for lending and borrowing.\\n    IERC20 public token;\\n\\n    // Address of the owner contract.\\n    address public ownerContract;\\n\\n    // Total amount of tokens lent out.\\n    uint256 public amoutLended;\\n\\n    // Available reserve for borrowing.\\n    uint256 public reserve;\\n\\n    // Annual Percentage Yield for borrowing.\\n    uint256 public borrowingAPY;\\n\\n    // Total yield generated.\\n    uint256 public yield;\\n\\n    // Yield already farmed.\\n    uint256 public farmedYield;\\n\\n    // Mapping of addresses to their last yield farming timestamp.\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n\\n    // Mapping of addresses to the amount of yield they have taken.\\n    mapping(address => uint256) public yieldTaken;\\n\\n    /**\\n     * @dev Ensures that only the owner contract can call the modified function.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != ownerContract) {\\n            revert lending_addressNotAllowed();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @param _token The ERC20 token address for lending and borrowing.\\n     */\\n    constructor(address _token) {\\n        token = IERC20(_token);\\n        ownerContract = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Allows the owner to borrow tokens from the reserve.\\n     * @param amount The amount of tokens to borrow.\\n     */\\n    function borrow(uint256 amount) public onlyOwner {\\n        if (reserve - amount < 0) {\\n            revert lending_outOfReserve();\\n        }\\n        token.transfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to lend tokens to the contract.\\n     * @param amount The amount of tokens to lend.\\n     */\\n    function lend(uint256 amount) public onlyOwner {\\n        token.transferFrom(msg.sender, address(this), amount);\\n        reserve += amount;\\n    }\\n\\n    /**\\n     * @notice Sets the borrowing APY.\\n     * @param newAPY The new APY value.\\n     */\\n    function setBorrowingAPY(uint256 newAPY) public onlyOwner {\\n        borrowingAPY = newAPY;\\n    }\\n\\n    /**\\n     * @notice Checks if enough time has passed for a user to farm yield again.\\n     * @param user The address of the user.\\n     * @return bool True if enough time has passed, false otherwise.\\n     */\\n    function isTime(address user) public view returns (bool) {\\n        lastYieldFarmedTime[user];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[user] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens from the reserve.\\n     * This function allows the owner to withdraw tokens from the available reserve, reducing the reserve balance.\\n     * @param amount The amount of tokens to withdraw from the reserve.\\n     */\\n    function withdraw(uint256 amount) public onlyOwner {\\n        if (reserve - amount < 0) {\\n            revert lending_reserveNotAvailable();\\n        }\\n        token.transfer(msg.sender, amount);\\n        reserve -= amount;\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the available yield for a user.\\n     * This function updates the yield taken and farmed yield accordingly.\\n     * @param user The address of the user farming yield.\\n     * @param tokenAmount The amount of tokens used for calculating the user's share of the yield.\\n     * @return uint256 The amount of yield available for the user.\\n     */\\n    function getYield(\\n        address user,\\n        uint256 tokenAmount\\n    ) public onlyOwner returns (uint256) {\\n        if (isTime(user) == false) {\\n            revert lending_notEnoughTimePassed();\\n        }\\n        lastYieldFarmedTime[user] = block.timestamp; // Reentrancy guard\\n        uint256 yieldSoFar = yieldTaken[user];\\n        uint256 userLiquidity = (tokenAmount * 100) / amoutLended;\\n        uint256 availableYield = ((yield -\\n            ((yieldSoFar * 100) / userLiquidity)) * userLiquidity) / 100;\\n\\n        if (availableYield > yield - farmedYield) {\\n            revert lending_notEnoughTimePassed(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[msg.sender] += availableYield;\\n        farmedYield += availableYield;\\n        return availableYield;\\n    }\\n}\\n\",\"keccak256\":\"0x17872742894ab2ac12f4fb20f81808285d9bf69d319eb85110cd7fda32f74730\",\"license\":\"MIT\"},\"contracts/Lending/LendingTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./Lending.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror lendingTracker_addressNotAllowed();\\nerror lendingTracker_poolNotAvailable();\\nerror lendingTracker_amountTooHigh();\\nerror lendingTracker_receiptDoesntExist();\\n\\n/**\\n * @title LendingTracker\\n * @dev Manages lending, borrowing, and collateral operations for a decentralized finance platform.\\n * Utilizes external price feeds for valuation and includes functionality for yield farming.\\n * This contract is responsible for tracking user interactions with lending pools and their collateralized positions.\\n */\\ncontract LendingTracker {\\n    // Events for logging various actions within the contract\\n    event userBorrowed(address user, address tokenAddress, uint256 tokenAmount);\\n    event userLended(address user, address tokenAddress, uint256 tokenAmount);\\n    event userWithdrawnLendedTokens(\\n        address user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n    event userStakedCollateral(\\n        address user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n    event userUnstakedCollateral(\\n        address user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n    event userReturnedBorrowedToken(\\n        address user,\\n        address tokenAddress,\\n        uint256 receiptId,\\n        uint256 tokenAmount,\\n        uint256 interest\\n    );\\n    event userFarmedYield(\\n        address user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n    event collateralTerminated(address user);\\n\\n    // Maximum Loan-to-Value (LTV) ratio for borrowing against collateral\\n    int256 ltv = 75;\\n\\n    // Owner of the contract, set at deployment\\n    address owner;\\n\\n    // Constructor sets the deploying address as the owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Struct to hold lending pool and its associated price feed information\\n    struct tokenPool {\\n        Lending poolAddress; // ERC-20 Token address\\n        address priceAddress; // Chainlink price feed\\n    }\\n\\n    // Struct to track borrowing receipts for users\\n    struct borrowReceipt {\\n        address tokenAddress;\\n        uint256 amount;\\n        uint256 time;\\n        uint256 apy;\\n    }\\n\\n    // Mappings to track lending pools, user interactions, and collateral\\n    mapping(address => tokenPool) public tokenToPool; // To find pool for specific ERC20 address\\n\\n    mapping(address => mapping(address => uint256)) public userLendedAmount; // Lended amout of specific token for user\\n    mapping(address => address[]) public userLendedTokens; // All lended token addresses of user\\n\\n    mapping(address => mapping(address => uint256)) public collateral; // Collateral amount of specific token for user\\n    mapping(address => address[]) public collateralTokens; // All collateralized token addresses of user\\n\\n    mapping(address => address[]) public borrowedTokens; // All borrowed token addresses of user\\n    mapping(address => uint256) public borrowingId; // Current borrowing Id of the user, it increments with each borrow\\n    mapping(address => mapping(address => uint256[])) public userBorrowReceipts; // All receipt ids for a certain token address of user\\n    mapping(address => mapping(uint256 => borrowReceipt)) public borrowReceipts; // Id to receipt\\n\\n    /**\\n     * @notice Adds a new token pool for lending and borrowing.\\n     * @dev Deploys a new Lending contract for the token and registers it along with its price feed.\\n     * @param tokenAddress Address of the token for the new lending pool.\\n     * @param priceAddress Address of the Chainlink price feed for the token.\\n     */\\n    function addTokenPool(address tokenAddress, address priceAddress) public {\\n        if (msg.sender != owner) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        Lending newPool = new Lending(tokenAddress);\\n        tokenToPool[tokenAddress] = tokenPool(newPool, priceAddress);\\n    }\\n\\n    /**\\n     * @notice Changes the price feed for a given token.\\n     * @dev Allows the contract owner to update the price feed address in case of changes or migration.\\n     * @param tokenAddress Address of the token whose price feed is being updated.\\n     * @param priceAddress New address of the Chainlink price feed.\\n     */\\n    function changePriceFeed(\\n        address tokenAddress,\\n        address priceAddress\\n    ) public {\\n        // Checks if address is allowed to call this\\n        if (msg.sender != owner) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        // Checks if the pool exists\\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        tokenToPool[tokenAddress].priceAddress = priceAddress;\\n    }\\n\\n    /**\\n     * @notice Updates the borrowing APY for a specified token pool.\\n     * @param tokenAddress Address of the token whose lending pool APY is to be changed.\\n     * @param newAPY The new annual percentage yield for borrowing.\\n     */\\n    function changeBorrowingAPY(address tokenAddress, uint256 newAPY) public {\\n        if (msg.sender != owner) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        tokenToPool[tokenAddress].poolAddress.setBorrowingAPY(newAPY);\\n    }\\n\\n    /**\\n     * @notice Allows a user to borrow tokens from a specific lending pool.\\n     * @dev The function checks for sufficient liquidity and adherence to the loan-to-value (LTV) ratio before permitting the borrow.\\n     * Updates the user's borrow receipts to keep track of the borrowed amount and terms.\\n     * @param tokenAddress The address of the token the user wishes to borrow.\\n     * @param tokenAmount The amount of tokens the user wants to borrow.\\n     */\\n    function borrowToken(address tokenAddress, uint256 tokenAmount) public {\\n        // Checks if the pool exists\\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        // Liquidity treshold, if ltv is too high\\n        if (liquidityTreshold(msg.sender, tokenAddress, tokenAmount) >= ltv) {\\n            revert lendingTracker_amountTooHigh();\\n        }\\n        // Borrows from the pool contract\\n        tokenToPool[tokenAddress].poolAddress.borrow(tokenAmount); // Checks if there is enough reserve\\n\\n        // Maps the token address if needed\\n        if (newTokenChecker(borrowedTokens[msg.sender], tokenAddress) == true) {\\n            borrowedTokens[msg.sender].push(tokenAddress);\\n        }\\n        // Adds funds to a mapping\\n        userBorrowReceipts[msg.sender][tokenAddress].push(\\n            borrowingId[msg.sender]\\n        );\\n        borrowReceipts[msg.sender][borrowingId[msg.sender]] = borrowReceipt(\\n            tokenAddress,\\n            tokenAmount,\\n            block.timestamp,\\n            tokenToPool[tokenAddress].poolAddress.borrowingAPY()\\n        );\\n\\n        // Transfers tokens to user\\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n        // User receipt Id\\n        borrowingId[msg.sender] += 1;\\n\\n        // Event\\n        emit userBorrowed(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Enables a user to lend tokens to a specific pool.\\n     * @dev Transfers tokens from the user to the lending pool contract and updates the tracking of lent amounts.\\n     * Requires token approval from the user to the LendingTracker contract.\\n     * @param tokenAddress The address of the token being lent.\\n     * @param tokenAmount The amount of tokens the user is lending.\\n     */\\n    function lendToken(address tokenAddress, uint256 tokenAmount) public {\\n        // Checks if pool exists\\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        // Transfer and approve tokens\\n        IERC20(tokenAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenAmount\\n        );\\n        IERC20(tokenAddress).approve(\\n            address(tokenToPool[tokenAddress].poolAddress),\\n            tokenAmount\\n        );\\n        // Maps the token address if needed\\n        if (\\n            newTokenChecker(userLendedTokens[msg.sender], tokenAddress) == true\\n        ) {\\n            userLendedTokens[msg.sender].push(tokenAddress);\\n        }\\n        // Add funds to mapping\\n        userLendedAmount[msg.sender][tokenAddress] += tokenAmount;\\n        tokenToPool[tokenAddress].poolAddress.lend(tokenAmount);\\n\\n        // Event\\n        emit userLended(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens previously lent to the lending pool by the user.\\n     * @dev Ensures the user cannot withdraw more than they have lent. Adjusts the user's lent amount record accordingly.\\n     * @param tokenAddress The address of the token to withdraw from the lending pool.\\n     * @param tokenAmount The amount of tokens to withdraw.\\n     */\\n    function withdrawLendedToken(\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    ) public {\\n        // Checks if pool exists\\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        // Checks if there is enough tokens in the pool\\n        if (userLendedAmount[msg.sender][tokenAddress] < tokenAmount) {\\n            revert lendingTracker_amountTooHigh();\\n        }\\n        userLendedAmount[msg.sender][tokenAddress] -= tokenAmount;\\n        tokenToPool[tokenAddress].poolAddress.withdraw(tokenAmount);\\n        // Transfer tokens to user\\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n\\n        // Event\\n        emit userWithdrawnLendedTokens(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Allows users to stake tokens as collateral for borrowing.\\n     * @dev Transfers tokens from the user to this contract for collateralization. Updates the collateral tracking mappings.\\n     * @param tokenAddress The address of the token being staked as collateral.\\n     * @param tokenAmount The amount of the token to stake.\\n     */\\n    function stakeCollateral(address tokenAddress, uint256 tokenAmount) public {\\n        // Checks if pool exists\\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        // Transfers tokens from user to the contract\\n        IERC20(tokenAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenAmount\\n        );\\n        // Maps the token address if needed\\n        if (\\n            newTokenChecker(collateralTokens[msg.sender], tokenAddress) == true\\n        ) {\\n            collateralTokens[msg.sender].push(tokenAddress);\\n        }\\n        // Adds the amount to mapping\\n        collateral[msg.sender][tokenAddress] += tokenAmount;\\n\\n        //Event\\n        emit userStakedCollateral(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Permits users to withdraw their staked collateral, provided they have no outstanding loans.\\n     * @dev Ensures that the withdrawal does not violate the loan-to-value (LTV) requirements.\\n     * @param tokenAddress The address of the token to unstake.\\n     * @param tokenAmount The amount of the token to unstake.\\n     */\\n    function unstakeCollateral(\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    ) public {\\n        // Checks if amount is too high and if the user is borrowing any tokens\\n        if (\\n            collateral[msg.sender][tokenAddress] - tokenAmount < 0 &&\\n            borrowedTokens[msg.sender].length > 0\\n        ) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        // Decreases amount in mapping\\n        collateral[msg.sender][tokenAddress] -= tokenAmount;\\n        // Transfers the tokens to user\\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n        // Maps the token address if needed\\n        if (collateral[msg.sender][tokenAddress] == 0) {\\n            for (uint256 i; i < collateralTokens[msg.sender].length; i++) {\\n                if (collateralTokens[msg.sender][i] == tokenAddress) {\\n                    delete collateralTokens[msg.sender][i];\\n                }\\n            }\\n        }\\n\\n        //Event\\n        emit userUnstakedCollateral(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Computes the current loan-to-value (LTV) ratio for a user's borrowed funds against their staked collateral.\\n     * @dev Used to determine if a user's borrowings are within permissible limits. Can also factor in an additional amount\\n     * being borrowed or provided as collateral.\\n     * @param user The address of the user.\\n     * @param additionalTokenAddress Optionally, the address of a token being considered for borrowing/collateral.\\n     * @param tokenAmount Optionally, the amount of the additional token being considered.\\n     * @return The LTV ratio as a percentage.\\n     */\\n    function liquidityTreshold(\\n        address user,\\n        address additionalTokenAddress,\\n        uint256 tokenAmount\\n    ) public view returns (int) {\\n        // It checks the price in USD if collaterall falls below borrowed amount in usd + the apy till date, the collateral get terminated\\n        int collateralUSD;\\n        int borrowedUSD;\\n        // If we want to calculate ltv with additional funds\\n        if (\\n            tokenAmount != 0 &&\\n            tokenToPool[additionalTokenAddress].priceAddress != address(0)\\n        ) {\\n            int conversion = usdConverter(\\n                tokenToPool[additionalTokenAddress].priceAddress\\n            );\\n            collateralUSD += conversion * int(tokenAmount);\\n        }\\n        for (uint256 i; i < collateralTokens[user].length; i++) {\\n            address tokenAddress = collateralTokens[user][i];\\n            uint256 amountOfToken = collateral[user][tokenAddress];\\n            // Get conversion to USD\\n            int conversion = usdConverter(\\n                tokenToPool[tokenAddress].priceAddress\\n            );\\n            collateralUSD += conversion * int(amountOfToken);\\n        }\\n        for (uint256 i; i < borrowedTokens[user].length; i++) {\\n            address tokenAddress = borrowedTokens[user][i];\\n            uint256[] storage receiptIds = userBorrowReceipts[user][\\n                tokenAddress\\n            ];\\n            for (uint256 a; a < receiptIds.length; a++) {\\n                uint256 receiptTIME = borrowReceipts[msg.sender][receiptIds[a]]\\n                    .time;\\n                uint256 receiptAMOUNT = borrowReceipts[msg.sender][\\n                    receiptIds[a]\\n                ].amount;\\n                address receiptAddress = borrowReceipts[msg.sender][\\n                    receiptIds[a]\\n                ].tokenAddress;\\n                uint256 receiptAPY = borrowReceipts[msg.sender][receiptIds[a]]\\n                    .apy;\\n                uint256 borrowInterest = (receiptAMOUNT *\\n                    receiptTIME *\\n                    receiptAPY) / (365 days * 100);\\n                int conversion = usdConverter(\\n                    tokenToPool[receiptAddress].priceAddress\\n                );\\n                borrowedUSD += conversion * int(borrowInterest + receiptAMOUNT);\\n            }\\n        }\\n        return (borrowedUSD * 100) / collateralUSD;\\n    }\\n\\n    /**\\n     * @notice Initiates the liquidation of a user's collateral if their LTV ratio exceeds the maximum permitted value.\\n     * @dev Meant to be called by an external mechanism (like a keeper) that monitors LTV ratios.\\n     * @param userAddress The address of the user whose collateral is being liquidated.\\n     */\\n    function terminateCollateral(address userAddress) public {\\n        // Check if the ltv is too high, if it is not reverts\\n        if (liquidityTreshold(userAddress, address(0), 0) <= ltv) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        // terminate user collateral and share it between the lenders\\n        for (uint256 i; i < collateralTokens[userAddress].length; i++) {\\n            collateral[msg.sender][collateralTokens[userAddress][i]] = 0;\\n            delete collateralTokens[msg.sender][i];\\n        }\\n        // Add swap on uniswap router or swap between pools\\n\\n        // Event\\n        emit collateralTerminated(userAddress);\\n    }\\n\\n    /**\\n     * @notice Converts the token amount to its USD equivalent using Chainlink price feeds.\\n     * @dev Utility function to assist in calculating collateral values and loan amounts.\\n     * @param priceAddress Address of the Chainlink price feed for the token.\\n     * @return int The USD value of the token amount based on the latest price feed data.\\n     */\\n    function usdConverter(address priceAddress) public view returns (int) {\\n        (, int answer, , , ) = AggregatorV3Interface(priceAddress)\\n            .latestRoundData();\\n        return answer;\\n    }\\n\\n    /**\\n     * @notice Checks if a new token is not already tracked by the user's token array.\\n     * @dev Utility function to prevent duplicate entries in user token arrays.\\n     * @param userTokens Array of token addresses the user has interacted with.\\n     * @param token Address of the token to check.\\n     * @return bool True if the token is not in the array, false otherwise.\\n     */\\n    function newTokenChecker(\\n        address[] memory userTokens,\\n        address token\\n    ) public pure returns (bool) {\\n        bool newToken = true;\\n        for (uint256 i; i < userTokens.length; i++) {\\n            if (token == userTokens[i]) {\\n                newToken = false;\\n            }\\n        }\\n        return newToken;\\n    }\\n\\n    /**\\n     * @notice Claims yield for the user based on the tokens they have lent to the pool.\\n     * @dev Calculates the yield based on the amount lent and the time passed, then transfers the yield to the user.\\n     * @param tokenAddress The address of the token for which yield is being claimed.\\n     */\\n    function getYield(address tokenAddress) public {\\n        uint256 yield = tokenToPool[tokenAddress].poolAddress.getYield(\\n            msg.sender,\\n            userLendedAmount[msg.sender][tokenAddress]\\n        );\\n        IERC20(tokenAddress).transfer(msg.sender, yield);\\n\\n        // Event\\n        emit userFarmedYield(msg.sender, tokenAddress, yield);\\n    }\\n\\n    /**\\n     * @notice Allows a user to return borrowed tokens along with any accrued interest.\\n     * @dev Calculates interest based on the borrowing APY and time elapsed since the token was borrowed.\\n     * @param id The unique identifier of the borrow receipt.\\n     * @param tokenAmount The amount of the borrowed token being returned.\\n     */\\n    function returnBorrowedToken(uint256 id, uint256 tokenAmount) public {\\n        if (borrowReceipts[msg.sender][id].amount == 0) {\\n            revert lendingTracker_receiptDoesntExist();\\n        }\\n        if (borrowReceipts[msg.sender][id].amount - tokenAmount < 0) {\\n            revert lendingTracker_amountTooHigh();\\n        }\\n        uint256 receiptAPY = borrowReceipts[msg.sender][id].apy;\\n        uint256 receiptTIME = borrowReceipts[msg.sender][id].time;\\n        address tokenAddress = borrowReceipts[msg.sender][id].tokenAddress;\\n\\n        uint256 borrowInterest = (tokenAmount * receiptTIME * receiptAPY) /\\n            (365 days * 100);\\n\\n        IERC20(tokenAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenAmount + borrowInterest\\n        );\\n        borrowReceipts[msg.sender][id].amount -= tokenAmount;\\n\\n        // Event\\n        emit userReturnedBorrowedToken(\\n            msg.sender,\\n            tokenAddress,\\n            id,\\n            tokenAmount,\\n            borrowInterest\\n        );\\n    }\\n}\\n\\n// Need to do:\\n// Swap of tokens after termination of collateral(or what to do if not swapping)\\n// If yield number gets too high(uint256), we open up a new pool with same stats\\n// If we make new pool with same token and price address we need to restore lended amount for each person(refreshPool())\\n\",\"keccak256\":\"0x1da89949e38996512aab8732957d3e1186b0640dd6700994a631dd65b0b58fb3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200016c5760003560e01c806359c9851611620000d557806397e07e98116200008757806397e07e981462000418578063989796b5146200044e578063b2f7f9161462000485578063cc218ece14620004bb578063dd2fc71814620004f1578063e1a777a01462000527576200016c565b806359c9851614620003165780635a91b39c14620003365780635cf8f780146200035657806364c33977146200038c578063784eddd814620003ac57806383eaf8bc14620003e2576200016c565b80632cb8f676116200012f5780632cb8f676146200023d578063322de332146200025d5780633e1a52b4146200027d57806343b91303146200029d5780634bb3df9914620002bd578063599dfa8214620002dd576200016c565b806302201c701462000171578063106c6dbc14620001915780632547035514620001b15780632921f39214620001d15780632b798f491462000207575b600080fd5b6200018f6004803603810190620001899190620037bf565b6200055d565b005b620001af6004803603810190620001a9919062003841565b62000734565b005b620001cf6004803603810190620001c9919062003888565b62000b0f565b005b620001ef6004803603810190620001e99190620037bf565b6200108b565b604051620001fe9190620038e0565b60405180910390f35b6200022560048036038101906200021f919062003888565b620010b0565b6040516200023491906200390e565b60405180910390f35b6200025b60048036038101906200025591906200392b565b620010ff565b005b6200027b600480360381019062000275919062003888565b6200136a565b005b6200029b600480360381019062000295919062003888565b6200171f565b005b620002bb6004803603810190620002b59190620037bf565b62001adb565b005b620002db6004803603810190620002d5919062003888565b62001cb6565b005b620002fb6004803603810190620002f5919062003888565b62002155565b6040516200030d94939291906200395d565b60405180910390f35b6200033460048036038101906200032e919062003888565b620021b2565b005b6200035460048036038101906200034e919062003888565b6200230f565b005b6200037460048036038101906200036e919062003888565b62002a92565b6040516200038391906200390e565b60405180910390f35b620003aa6004803603810190620003a491906200392b565b62002ae1565b005b620003ca6004803603810190620003c49190620039aa565b62002d2b565b604051620003d9919062003a21565b60405180910390f35b620004006004803603810190620003fa9190620039aa565b620034e9565b6040516200040f9190620038e0565b60405180910390f35b6200043660048036038101906200043091906200392b565b62003528565b60405162000445919062003a21565b60405180910390f35b6200046c60048036038101906200046691906200392b565b620035bc565b6040516200047c92919062003aa9565b60405180910390f35b620004a360048036038101906200049d91906200392b565b62003620565b604051620004b29190620038e0565b60405180910390f35b620004d96004803603810190620004d39190620037bf565b62003638565b604051620004e89190620038e0565b60405180910390f35b6200050f600480360381019062000509919062003c4b565b6200365d565b6040516200051e919062003cce565b60405180910390f35b6200054560048036038101906200053f919062003888565b620036e9565b6040516200055491906200390e565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620005e5576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620006af576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020600101541415620007c3576040517fd4ca1fe200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206001015462000826919062003d1a565b10156200085f576040517f6fc3494000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206003015490506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206002015490506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600063bbf81e008484876200099d919062003d55565b620009a9919062003d55565b620009b5919062003de5565b90508173ffffffffffffffffffffffffffffffffffffffff166323b872dd33308489620009e3919062003e1d565b6040518463ffffffff1660e01b815260040162000a039392919062003e7a565b602060405180830381600087803b15801562000a1e57600080fd5b505af115801562000a33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a59919062003ee8565b5084600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020600101600082825462000abf919062003d1a565b925050819055507f3d3dc018f55160b3fa5bcc9f5f8f595211524dd7cc1320607df0a09c236dd50e338388888560405162000aff95949392919062003f1a565b60405180910390a1505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000bd9576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040162000c189392919062003e7a565b602060405180830381600087803b15801562000c3357600080fd5b505af115801562000c48573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c6e919062003ee8565b508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040162000d0e92919062003f77565b602060405180830381600087803b15801562000d2957600080fd5b505af115801562000d3e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d64919062003ee8565b506001151562000e3a600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801562000e2e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000de3575b5050505050846200365d565b1515141562000ee457600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462000f72919062003e1d565b92505081905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6aa57ce826040518263ffffffff1660e01b8152600401620010169190620038e0565b600060405180830381600087803b1580156200103157600080fd5b505af115801562001046573d6000803e3d6000fd5b505050507fbae46e7122b75f20fe8069d88135321512a64b320000386d592d5082c26afb643383836040516200107f9392919062003e7a565b60405180910390a15050565b6003602052816000526040600020602052806000526040600020600091509150505481565b60066020528160005260406000208181548110620010cd57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600054620011108260008062002d2b565b1362001148576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156200132d576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106200122d576200122c62003fa4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110620012ea57620012e962003fa4565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558080620013249062003fd3565b9150506200114b565b507fa60d16b35a8ec916b0a7aef27ce91d95bba6c589f01f2d330c04b7ae6e5dd167816040516200135f91906200390e565b60405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562001434576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401620014739392919062003e7a565b602060405180830381600087803b1580156200148e57600080fd5b505af1158015620014a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014c9919062003ee8565b50600115156200159f600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200159357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162001548575b5050505050846200365d565b151514156200164957600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620016d7919062003e1d565b925050819055507fb759534d8717c1bc7cde21fa6affd5a9d205d5ab4c3bce20bd815a1397602922338383604051620017139392919062003e7a565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620017e9576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015620018a0576040517f6fc3494000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200192e919062003d1a565b92505081905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401620019d29190620038e0565b600060405180830381600087803b158015620019ed57600080fd5b505af115801562001a02573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040162001a4392919062003f77565b602060405180830381600087803b15801562001a5e57600080fd5b505af115801562001a73573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a99919062003ee8565b507f86c5c7a77e073d103cb6d0edf1f3809dbf9b9dfbf09656d8ecc9515a4782e38533838360405162001acf9392919062003e7a565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001b63576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008260405162001b749062003738565b62001b8091906200390e565b604051809103906000f08015801562001b9d573d6000803e3d6000fd5b50905060405180604001604052808273ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815250600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050505050565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001d42919062003d1a565b10801562001d9257506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050115b1562001dca576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462001e58919062003d1a565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040162001e9c92919062003f77565b602060405180830381600087803b15801562001eb757600080fd5b505af115801562001ecc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ef2919062003ee8565b506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415620021145760005b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101562002112578273ffffffffffffffffffffffffffffffffffffffff16600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811062002032576200203162003fa4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620020fc57600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110620020ce57620020cd62003fa4565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b8080620021099062003fd3565b91505062001f7c565b505b7fcfe1e6d30a42cc481f02ea9cce49c86f8ae93242f28b0622f864b30a35bbb2d2338383604051620021499392919062003e7a565b60405180910390a15050565b600a602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200223a576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639770b125826040518263ffffffff1660e01b8152600401620022d79190620038e0565b600060405180830381600087803b158015620022f257600080fd5b505af115801562002307573d6000803e3d6000fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620023d9576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054620023e933848462002d2b565b1262002421576040517f6fc3494000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec826040518263ffffffff1660e01b8152600401620024be9190620038e0565b600060405180830381600087803b158015620024d957600080fd5b505af1158015620024ee573d6000803e3d6000fd5b5050505060011515620025c7600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620025bb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162002570575b5050505050846200365d565b151514156200267157600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054908060018154018082558091505060019003906000526020600020016000909190919091505560405180608001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001428152602001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636140dfd06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200282f57600080fd5b505afa15801562002844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200286a919062004038565b815250600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301559050508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401620029a192919062003f77565b602060405180830381600087803b158015620029bc57600080fd5b505af1158015620029d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029f7919062003ee8565b506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462002a4a919062003e1d565b925050819055507fde1ec58d6821a902fd200541e0254901c79b0c05f4a9d50d6dad669c8645805f33838360405162002a869392919062003e7a565b60405180910390a15050565b6007602052816000526040600020818154811062002aaf57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f88cc4a233600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b815260040162002bfe92919062003f77565b602060405180830381600087803b15801562002c1957600080fd5b505af115801562002c2e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002c54919062004038565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040162002c9392919062003f77565b602060405180830381600087803b15801562002cae57600080fd5b505af115801562002cc3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ce9919062003ee8565b507fb24f6706501e087731866f09ba73332b50d43f9f408403653052ab002c45612a33838360405162002d1f9392919062003e7a565b60405180910390a15050565b600080600080841415801562002dd05750600073ffffffffffffffffffffffffffffffffffffffff16600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1562002e6657600062002e45600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662003528565b9050848162002e5591906200406a565b8362002e62919062004191565b9250505b60005b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156200305f576000600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811062002f0a5762002f0962003fa4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600062003027600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662003528565b905081816200303791906200406a565b8662003044919062004191565b95505050508080620030569062003fd3565b91505062002e69565b5060005b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015620034c1576000600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811062003104576200310362003fa4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8180549050811015620034a8576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008484815481106200321a576200321962003fa4565b5b906000526020600020015481526020019081526020016000206002015490506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085858154811062003292576200329162003fa4565b5b906000526020600020015481526020019081526020016000206001015490506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008686815481106200330a576200330962003fa4565b5b9060005260206000200154815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878781548110620033a257620033a162003fa4565b5b90600052602060002001548152602001908152602001600020600301549050600063bbf81e00828686620033d7919062003d55565b620033e3919062003d55565b620033ef919062003de5565b9050600062003460600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662003528565b9050848262003470919062003e1d565b816200347d91906200406a565b8b6200348a919062004191565b9a5050505050505080806200349f9062003fd3565b915050620031b4565b5050508080620034b89062003fd3565b91505062003063565b5081606482620034d291906200406a565b620034de91906200422f565b925050509392505050565b600960205282600052604060002060205281600052604060002081815481106200351257600080fd5b9060005260206000200160009250925050505481565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156200357257600080fd5b505afa15801562003587573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620035ad91906200431b565b50505091505080915050919050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b60086020528060005260406000206000915090505481565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000806001905060005b8451811015620036de5784818151811062003687576200368662003fa4565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620036c857600091505b8080620036d59062003fd3565b91505062003667565b508091505092915050565b600460205281600052604060002081815481106200370657600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6111c080620043a483390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062003787826200375a565b9050919050565b62003799816200377a565b8114620037a557600080fd5b50565b600081359050620037b9816200378e565b92915050565b60008060408385031215620037d957620037d862003750565b5b6000620037e985828601620037a8565b9250506020620037fc85828601620037a8565b9150509250929050565b6000819050919050565b6200381b8162003806565b81146200382757600080fd5b50565b6000813590506200383b8162003810565b92915050565b600080604083850312156200385b576200385a62003750565b5b60006200386b858286016200382a565b92505060206200387e858286016200382a565b9150509250929050565b60008060408385031215620038a257620038a162003750565b5b6000620038b285828601620037a8565b9250506020620038c5858286016200382a565b9150509250929050565b620038da8162003806565b82525050565b6000602082019050620038f76000830184620038cf565b92915050565b62003908816200377a565b82525050565b6000602082019050620039256000830184620038fd565b92915050565b60006020828403121562003944576200394362003750565b5b60006200395484828501620037a8565b91505092915050565b6000608082019050620039746000830187620038fd565b620039836020830186620038cf565b620039926040830185620038cf565b620039a16060830184620038cf565b95945050505050565b600080600060608486031215620039c657620039c562003750565b5b6000620039d686828701620037a8565b9350506020620039e986828701620037a8565b9250506040620039fc868287016200382a565b9150509250925092565b6000819050919050565b62003a1b8162003a06565b82525050565b600060208201905062003a38600083018462003a10565b92915050565b6000819050919050565b600062003a6962003a6362003a5d846200375a565b62003a3e565b6200375a565b9050919050565b600062003a7d8262003a48565b9050919050565b600062003a918262003a70565b9050919050565b62003aa38162003a84565b82525050565b600060408201905062003ac0600083018562003a98565b62003acf6020830184620038fd565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62003b268262003adb565b810181811067ffffffffffffffff8211171562003b485762003b4762003aec565b5b80604052505050565b600062003b5d62003746565b905062003b6b828262003b1b565b919050565b600067ffffffffffffffff82111562003b8e5762003b8d62003aec565b5b602082029050602081019050919050565b600080fd5b600062003bbb62003bb58462003b70565b62003b51565b9050808382526020820190506020840283018581111562003be15762003be062003b9f565b5b835b8181101562003c0e578062003bf98882620037a8565b84526020840193505060208101905062003be3565b5050509392505050565b600082601f83011262003c305762003c2f62003ad6565b5b813562003c4284826020860162003ba4565b91505092915050565b6000806040838503121562003c655762003c6462003750565b5b600083013567ffffffffffffffff81111562003c865762003c8562003755565b5b62003c948582860162003c18565b925050602062003ca785828601620037a8565b9150509250929050565b60008115159050919050565b62003cc88162003cb1565b82525050565b600060208201905062003ce5600083018462003cbd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062003d278262003806565b915062003d348362003806565b92508282101562003d4a5762003d4962003ceb565b5b828203905092915050565b600062003d628262003806565b915062003d6f8362003806565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562003dab5762003daa62003ceb565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062003df28262003806565b915062003dff8362003806565b92508262003e125762003e1162003db6565b5b828204905092915050565b600062003e2a8262003806565b915062003e378362003806565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562003e6f5762003e6e62003ceb565b5b828201905092915050565b600060608201905062003e916000830186620038fd565b62003ea06020830185620038fd565b62003eaf6040830184620038cf565b949350505050565b62003ec28162003cb1565b811462003ece57600080fd5b50565b60008151905062003ee28162003eb7565b92915050565b60006020828403121562003f015762003f0062003750565b5b600062003f118482850162003ed1565b91505092915050565b600060a08201905062003f316000830188620038fd565b62003f406020830187620038fd565b62003f4f6040830186620038cf565b62003f5e6060830185620038cf565b62003f6d6080830184620038cf565b9695505050505050565b600060408201905062003f8e6000830185620038fd565b62003f9d6020830184620038cf565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062003fe08262003806565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562004016576200401562003ceb565b5b600182019050919050565b600081519050620040328162003810565b92915050565b60006020828403121562004051576200405062003750565b5b6000620040618482850162004021565b91505092915050565b6000620040778262003a06565b9150620040848362003a06565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615620040c657620040c562003ceb565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161562004106576200410562003ceb565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161562004146576200414562003ceb565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161562004186576200418562003ceb565b5b828202905092915050565b60006200419e8262003a06565b9150620041ab8362003a06565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615620041e957620041e862003ceb565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161562004224576200422362003ceb565b5b828201905092915050565b60006200423c8262003a06565b9150620042498362003a06565b9250826200425c576200425b62003db6565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161562004298576200429762003ceb565b5b828205905092915050565b600069ffffffffffffffffffff82169050919050565b620042c481620042a3565b8114620042d057600080fd5b50565b600081519050620042e481620042b9565b92915050565b620042f58162003a06565b81146200430157600080fd5b50565b6000815190506200431581620042ea565b92915050565b600080600080600060a086880312156200433a576200433962003750565b5b60006200434a88828901620042d3565b95505060206200435d8882890162004304565b9450506040620043708882890162004021565b9350506060620043838882890162004021565b92505060806200439688828901620042d3565b915050929550929590935056fe60806040523480156200001157600080fd5b50604051620011c0380380620011c0833981810160405281019062000037919062000129565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f182620000c4565b9050919050565b6200010381620000e4565b81146200010f57600080fd5b50565b6000815190506200012381620000f8565b92915050565b600060208284031215620001425762000141620000bf565b5b6000620001528482850162000112565b91505092915050565b611055806200016b6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a2b2c32a11610097578063ed433abc11610066578063ed433abc14610260578063f88cc4a21461027e578063fc0c546a146102ae578063ffebfc8c146102cc576100f5565b8063a2b2c32a146101ec578063a6aa57ce1461020a578063c5ebeaec14610226578063cd3293de14610242576100f5565b80636140dfd0116100d35780636140dfd0146101645780637f74ac15146101825780639770b125146101a05780639a61c36a146101bc576100f5565b806328593984146100fa5780632e1a7d4d1461011857806359eec95b14610134575b600080fd5b6101026102fc565b60405161010f9190610bd5565b60405180910390f35b610132600480360381019061012d9190610c21565b610302565b005b61014e60048036038101906101499190610cac565b61049b565b60405161015b9190610cf4565b60405180910390f35b61016c61054c565b6040516101799190610bd5565b60405180910390f35b61018a610552565b6040516101979190610d1e565b60405180910390f35b6101ba60048036038101906101b59190610c21565b610578565b005b6101d660048036038101906101d19190610cac565b610609565b6040516101e39190610bd5565b60405180910390f35b6101f4610621565b6040516102019190610bd5565b60405180910390f35b610224600480360381019061021f9190610c21565b610627565b005b610240600480360381019061023b9190610c21565b61077a565b005b61024a6108fa565b6040516102579190610bd5565b60405180910390f35b610268610900565b6040516102759190610bd5565b60405180910390f35b61029860048036038101906102939190610d39565b610906565b6040516102a59190610bd5565b60405180910390f35b6102b6610b80565b6040516102c39190610dd8565b60405180910390f35b6102e660048036038101906102e19190610cac565b610ba4565b6040516102f39190610bd5565b60405180910390f35b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610389576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816003546103999190610e22565b10156103d1576040517f5a6c8ab300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161042c929190610e56565b602060405180830381600087803b15801561044657600080fd5b505af115801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190610eab565b5080600360008282546104919190610e22565b9250508190555050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205060004290508062015180600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105319190610ed8565b1015610541576001915050610547565b60009150505b919050565b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105ff576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060048190555050565b60086020528060005260406000206000915090505481565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ae576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161070b93929190610f2e565b602060405180830381600087803b15801561072557600080fd5b505af1158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d9190610eab565b5080600360008282546107709190610ed8565b9250508190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610801576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816003546108119190610e22565b1015610849576040517f810ffca300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016108a4929190610e56565b602060405180830381600087803b1580156108be57600080fd5b505af11580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190610eab565b5050565b60035481565b60065481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461098f576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000151561099c8461049b565b151514156109d6576040517f1fa8d33700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600254606485610a709190610f65565b610a7a9190610fee565b9050600060648283606486610a8f9190610f65565b610a999190610fee565b600554610aa69190610e22565b610ab09190610f65565b610aba9190610fee565b9050600654600554610acc9190610e22565b811115610b05576040517f1fa8d33700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b549190610ed8565b925050819055508060066000828254610b6d9190610ed8565b9250508190555080935050505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915090505481565b6000819050919050565b610bcf81610bbc565b82525050565b6000602082019050610bea6000830184610bc6565b92915050565b600080fd5b610bfe81610bbc565b8114610c0957600080fd5b50565b600081359050610c1b81610bf5565b92915050565b600060208284031215610c3757610c36610bf0565b5b6000610c4584828501610c0c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c7982610c4e565b9050919050565b610c8981610c6e565b8114610c9457600080fd5b50565b600081359050610ca681610c80565b92915050565b600060208284031215610cc257610cc1610bf0565b5b6000610cd084828501610c97565b91505092915050565b60008115159050919050565b610cee81610cd9565b82525050565b6000602082019050610d096000830184610ce5565b92915050565b610d1881610c6e565b82525050565b6000602082019050610d336000830184610d0f565b92915050565b60008060408385031215610d5057610d4f610bf0565b5b6000610d5e85828601610c97565b9250506020610d6f85828601610c0c565b9150509250929050565b6000819050919050565b6000610d9e610d99610d9484610c4e565b610d79565b610c4e565b9050919050565b6000610db082610d83565b9050919050565b6000610dc282610da5565b9050919050565b610dd281610db7565b82525050565b6000602082019050610ded6000830184610dc9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e2d82610bbc565b9150610e3883610bbc565b925082821015610e4b57610e4a610df3565b5b828203905092915050565b6000604082019050610e6b6000830185610d0f565b610e786020830184610bc6565b9392505050565b610e8881610cd9565b8114610e9357600080fd5b50565b600081519050610ea581610e7f565b92915050565b600060208284031215610ec157610ec0610bf0565b5b6000610ecf84828501610e96565b91505092915050565b6000610ee382610bbc565b9150610eee83610bbc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f2357610f22610df3565b5b828201905092915050565b6000606082019050610f436000830186610d0f565b610f506020830185610d0f565b610f5d6040830184610bc6565b949350505050565b6000610f7082610bbc565b9150610f7b83610bbc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fb457610fb3610df3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ff982610bbc565b915061100483610bbc565b92508261101457611013610fbf565b5b82820490509291505056fea2646970667358221220942c060d4dbc95bf37f56c773b3f44adc43b39367c3b1f429f712691962dee0564736f6c63430008090033a2646970667358221220a7d8a20e9bd51fd0cad7923421669c73b330e04dc5830c13183890e6fd4c1ea164736f6c63430008090033",
  "devdoc": {
    "details": "Manages lending, borrowing, and collateral operations for a decentralized finance platform. Utilizes external price feeds for valuation and includes functionality for yield farming. This contract is responsible for tracking user interactions with lending pools and their collateralized positions.",
    "kind": "dev",
    "methods": {
      "addTokenPool(address,address)": {
        "details": "Deploys a new Lending contract for the token and registers it along with its price feed.",
        "params": {
          "priceAddress": "Address of the Chainlink price feed for the token.",
          "tokenAddress": "Address of the token for the new lending pool."
        }
      },
      "borrowToken(address,uint256)": {
        "details": "The function checks for sufficient liquidity and adherence to the loan-to-value (LTV) ratio before permitting the borrow. Updates the user's borrow receipts to keep track of the borrowed amount and terms.",
        "params": {
          "tokenAddress": "The address of the token the user wishes to borrow.",
          "tokenAmount": "The amount of tokens the user wants to borrow."
        }
      },
      "changeBorrowingAPY(address,uint256)": {
        "params": {
          "newAPY": "The new annual percentage yield for borrowing.",
          "tokenAddress": "Address of the token whose lending pool APY is to be changed."
        }
      },
      "changePriceFeed(address,address)": {
        "details": "Allows the contract owner to update the price feed address in case of changes or migration.",
        "params": {
          "priceAddress": "New address of the Chainlink price feed.",
          "tokenAddress": "Address of the token whose price feed is being updated."
        }
      },
      "getYield(address)": {
        "details": "Calculates the yield based on the amount lent and the time passed, then transfers the yield to the user.",
        "params": {
          "tokenAddress": "The address of the token for which yield is being claimed."
        }
      },
      "lendToken(address,uint256)": {
        "details": "Transfers tokens from the user to the lending pool contract and updates the tracking of lent amounts. Requires token approval from the user to the LendingTracker contract.",
        "params": {
          "tokenAddress": "The address of the token being lent.",
          "tokenAmount": "The amount of tokens the user is lending."
        }
      },
      "liquidityTreshold(address,address,uint256)": {
        "details": "Used to determine if a user's borrowings are within permissible limits. Can also factor in an additional amount being borrowed or provided as collateral.",
        "params": {
          "additionalTokenAddress": "Optionally, the address of a token being considered for borrowing/collateral.",
          "tokenAmount": "Optionally, the amount of the additional token being considered.",
          "user": "The address of the user."
        },
        "returns": {
          "_0": "The LTV ratio as a percentage."
        }
      },
      "newTokenChecker(address[],address)": {
        "details": "Utility function to prevent duplicate entries in user token arrays.",
        "params": {
          "token": "Address of the token to check.",
          "userTokens": "Array of token addresses the user has interacted with."
        },
        "returns": {
          "_0": "bool True if the token is not in the array, false otherwise."
        }
      },
      "returnBorrowedToken(uint256,uint256)": {
        "details": "Calculates interest based on the borrowing APY and time elapsed since the token was borrowed.",
        "params": {
          "id": "The unique identifier of the borrow receipt.",
          "tokenAmount": "The amount of the borrowed token being returned."
        }
      },
      "stakeCollateral(address,uint256)": {
        "details": "Transfers tokens from the user to this contract for collateralization. Updates the collateral tracking mappings.",
        "params": {
          "tokenAddress": "The address of the token being staked as collateral.",
          "tokenAmount": "The amount of the token to stake."
        }
      },
      "terminateCollateral(address)": {
        "details": "Meant to be called by an external mechanism (like a keeper) that monitors LTV ratios.",
        "params": {
          "userAddress": "The address of the user whose collateral is being liquidated."
        }
      },
      "unstakeCollateral(address,uint256)": {
        "details": "Ensures that the withdrawal does not violate the loan-to-value (LTV) requirements.",
        "params": {
          "tokenAddress": "The address of the token to unstake.",
          "tokenAmount": "The amount of the token to unstake."
        }
      },
      "usdConverter(address)": {
        "details": "Utility function to assist in calculating collateral values and loan amounts.",
        "params": {
          "priceAddress": "Address of the Chainlink price feed for the token."
        },
        "returns": {
          "_0": "int The USD value of the token amount based on the latest price feed data."
        }
      },
      "withdrawLendedToken(address,uint256)": {
        "details": "Ensures the user cannot withdraw more than they have lent. Adjusts the user's lent amount record accordingly.",
        "params": {
          "tokenAddress": "The address of the token to withdraw from the lending pool.",
          "tokenAmount": "The amount of tokens to withdraw."
        }
      }
    },
    "title": "LendingTracker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTokenPool(address,address)": {
        "notice": "Adds a new token pool for lending and borrowing."
      },
      "borrowToken(address,uint256)": {
        "notice": "Allows a user to borrow tokens from a specific lending pool."
      },
      "changeBorrowingAPY(address,uint256)": {
        "notice": "Updates the borrowing APY for a specified token pool."
      },
      "changePriceFeed(address,address)": {
        "notice": "Changes the price feed for a given token."
      },
      "getYield(address)": {
        "notice": "Claims yield for the user based on the tokens they have lent to the pool."
      },
      "lendToken(address,uint256)": {
        "notice": "Enables a user to lend tokens to a specific pool."
      },
      "liquidityTreshold(address,address,uint256)": {
        "notice": "Computes the current loan-to-value (LTV) ratio for a user's borrowed funds against their staked collateral."
      },
      "newTokenChecker(address[],address)": {
        "notice": "Checks if a new token is not already tracked by the user's token array."
      },
      "returnBorrowedToken(uint256,uint256)": {
        "notice": "Allows a user to return borrowed tokens along with any accrued interest."
      },
      "stakeCollateral(address,uint256)": {
        "notice": "Allows users to stake tokens as collateral for borrowing."
      },
      "terminateCollateral(address)": {
        "notice": "Initiates the liquidation of a user's collateral if their LTV ratio exceeds the maximum permitted value."
      },
      "unstakeCollateral(address,uint256)": {
        "notice": "Permits users to withdraw their staked collateral, provided they have no outstanding loans."
      },
      "usdConverter(address)": {
        "notice": "Converts the token amount to its USD equivalent using Chainlink price feeds."
      },
      "withdrawLendedToken(address,uint256)": {
        "notice": "Withdraws tokens previously lent to the lending pool by the user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3844,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "ltv",
        "offset": 0,
        "slot": "0",
        "type": "t_int256"
      },
      {
        "astId": 3846,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3875,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "tokenToPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(tokenPool)3861_storage)"
      },
      {
        "astId": 3881,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "userLendedAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3886,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "userLendedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3892,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "collateral",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3897,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "collateralTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3902,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "borrowedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3906,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "borrowingId",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3913,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "userBorrowReceipts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 3920,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "borrowReceipts",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(borrowReceipt)3870_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(Lending)3763": {
        "encoding": "inplace",
        "label": "contract Lending",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(borrowReceipt)3870_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct LendingTracker.borrowReceipt))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(borrowReceipt)3870_storage)"
      },
      "t_mapping(t_address,t_struct(tokenPool)3861_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LendingTracker.tokenPool)",
        "numberOfBytes": "32",
        "value": "t_struct(tokenPool)3861_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(borrowReceipt)3870_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LendingTracker.borrowReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(borrowReceipt)3870_storage"
      },
      "t_struct(borrowReceipt)3870_storage": {
        "encoding": "inplace",
        "label": "struct LendingTracker.borrowReceipt",
        "members": [
          {
            "astId": 3863,
            "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3865,
            "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3867,
            "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
            "label": "time",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3869,
            "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
            "label": "apy",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(tokenPool)3861_storage": {
        "encoding": "inplace",
        "label": "struct LendingTracker.tokenPool",
        "members": [
          {
            "astId": 3858,
            "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
            "label": "poolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(Lending)3763"
          },
          {
            "astId": 3860,
            "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
            "label": "priceAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}