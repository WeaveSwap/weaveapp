{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tracker",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "SwapRouter_tokensCantBeSwapped",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "address2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "address1Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "address2Amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "getSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address2",
          "type": "address"
        }
      ],
      "name": "getSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "swapAsset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0e84d9a5bbd113573008104415b159844bcad2880e0d2fd3aabc04de9df8680c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "2375766",
    "logsBloom": "0x
    "blockHash": "0xba31a91c4e4ac1b73b8b97b4b1fe3b9cfdee4ebc74abec0338c92d901b5025b7",
    "transactionHash": "0x0e84d9a5bbd113573008104415b159844bcad2880e0d2fd3aabc04de9df8680c",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "2375766",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "numDeployments": 1,
  "solcInputHash": "48cb509c8d796d601f6af2caafafc13b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tracker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SwapRouter_tokensCantBeSwapped\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"address1Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"address2Amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"getSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"}],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"swapAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract facilitates token swaps by interacting with liquidity pools. It supports direct swaps between two tokens in a single pool, or routed swaps through an intermediary token. Utilizes the PoolTracker contract to find liquidity pools and perform the necessary asset exchanges.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"tracker\":\"The PoolTracker contract address.\"}},\"getSwapAmount(address,address,uint256)\":{\"details\":\"Considers direct swaps and routed swaps through an intermediary token, utilizing PoolTracker for calculations.\",\"params\":{\"address1\":\"The token being sold.\",\"address2\":\"The token being bought.\",\"inputAmount\":\"The amount of `address1` tokens to swap.\"},\"returns\":{\"_0\":\"output The estimated amount of `address2` tokens to be received.\"}},\"getSwapFee(address,address)\":{\"details\":\"Calculates the total swap fee, accounting for both direct and routed swaps, by querying the associated pools.\",\"params\":{\"address1\":\"The source token address.\",\"address2\":\"The destination token address.\"},\"returns\":{\"_0\":\"fee The total swap fee for the transaction.\"}},\"swapAsset(address,address,uint256)\":{\"details\":\"This function supports direct swaps between tokens in a single pool or routed swaps through an intermediary token. Uses PoolTracker to determine the best swap path and perform the exchange.\",\"params\":{\"address1\":\"The token being sold by the user.\",\"address2\":\"The token being purchased by the user.\",\"inputAmount\":\"The amount of `address1` tokens to swap.\"}}},\"title\":\"SwapRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs the SwapRouter and initializes the PoolTracker reference.\"},\"getSwapAmount(address,address,uint256)\":{\"notice\":\"Estimates the output amount for a swap from `address1` to `address2` given an `inputAmount` of `address1`.\"},\"getSwapFee(address,address)\":{\"notice\":\"Retrieves the swap fee required for a swap between `address1` and `address2`.\"},\"swapAsset(address,address,uint256)\":{\"notice\":\"Swaps `inputAmount` of `address1` tokens for `address2` tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex/WeaveSwap.sol\":\"SwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Dex/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../Router/InterfaceBridge.sol\\\";\\nimport \\\"./PoolTracker.sol\\\";\\n\\n// Custom errors for more descriptive and gas-efficient failure handling.\\nerror assetNotCorrect();\\nerror notEnoughTokens();\\nerror notEnoughGas();\\nerror notEnoughTimePassed();\\nerror initialLiquidityAlreadyProvided();\\nerror addressNotCorrect();\\nerror amountTooBig();\\nerror needToCallExistingFunction();\\n\\n/**\\n * @title LiquidityPool\\n * @notice Manages liquidity provision, asset swapping, and yield generation in a decentralized manner.\\n * @dev Implements IZKBridgeReceiver interface for cross-chain interactions and yield farming computations.\\n */\\ncontract LiquidityPool is IZKBridgeReceiver {\\n    // Events\\n    event priceChanged(address _asset, uint256 price);\\n    event liquidityAdded(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event liquidityRemoved(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event yieldFarmed(address indexed _address, uint256 _amount);\\n\\n    // State variables\\n    address public assetOneAddress;\\n    address public assetTwoAddress;\\n    uint256 public initialLiquidity;\\n    uint256 public liquidity;\\n    uint256 public yield;\\n    uint256 public swapFee = 1000000000000000;\\n    address public owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\\n    mapping(address => uint256) public lpTokenQuantity;\\n\\n    // Daily yield tracking\\n    mapping(address => uint256) public yieldTaken;\\n\\n    // Timestamp mapping for yield farming\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n    mapping(address => uint256) public initialLiquidityProvidedTime;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions only to the owner.\\n     */\\n    modifier onlyOwner() {\\n        msg.sender == owner;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\\n     * @param _assetOneAddress The address of the first asset.\\n     * @param _assetTwoAddress The address of the second asset.\\n     */\\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\\n        assetOneAddress = _assetOneAddress;\\n        assetTwoAddress = _assetTwoAddress;\\n        owner = msg.sender;\\n        swapFee = 1000000000000000; // 0.001 ether\\n    }\\n\\n    /**\\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _assetOneAmount The amount of the first asset to add.\\n     * @param _assetTwoAmount The amount of the second asset to add.\\n     */\\n    function addInitialLiquidity(\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    ) public onlyOwner {\\n        if (initialLiquidityProvidedTime[owner] > 0) {\\n            revert initialLiquidityAlreadyProvided();\\n        }\\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\\n\\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetOneAmount\\n        );\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetTwoAmount\\n        );\\n\\n        // SET THE INITIAL LIQUIDITY\\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\\n        liquidity = initialLiquidity;\\n\\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\\n        lpTokenQuantity[msg.sender] = initialLiquidity;\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\\n    }\\n\\n    /**\\n     * @dev Function to add additional liquidity to the pool.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _asset The address of the first asset.\\n     * @param _secondAsset The address of the second asset.\\n     * @param _amount The amount of the first asset to add.\\n     */\\n    function addLiquidity(\\n        address _asset,\\n        address _secondAsset,\\n        uint256 _amount\\n    ) external noReentrancy {\\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\\n        IERC20(_secondAsset).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOfOppositeTokenNeeded(_asset, _amount)\\n        );\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n\\n        // give lp tokens to new liquidity provider\\n        lpTokenQuantity[msg.sender] += (_amount *\\n            amountOfOppositeTokenNeeded(_asset, _amount));\\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(\\n            msg.sender,\\n            amountOfOppositeTokenNeeded(_asset, _amount),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to remove liquidity from the pool.\\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\\n     */\\n    function removeLiquidity(uint256 _amount) external noReentrancy {\\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) /\\n            100; // How much out of their liquidity they want to withdraw in percentage\\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) /\\n            1 ether;\\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) /\\n            1 ether;\\n        // condition for owner, because of the initial liquidity timer\\n        if (\\n            (msg.sender == owner) &&\\n            (isTimeInitialLiquidity() == false) &&\\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) <\\n                initialLiquidity)\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\\n        if (\\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\\n\\n        // EMIT EVENT\\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\\n    }\\n\\n    /**\\n     * @dev Function to sell the first asset and receive the second asset.\\n     * @param _amount The amount of the first asset to sell.\\n     */\\n    function sellAssetOne(\\n        uint256 _amount\\n    ) external payable noReentrancy returns (uint256) {\\n        // //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        // if (_amount >= getAssetOne()) {\\n        //     payable(msg.sender).transfer(msg.value);\\n        //     revert amountTooBig();\\n        // }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetTwo();\\n        uint256 assetOne = getAssetOne() + _amount;\\n        uint256 assetTwo = liquidity / assetOne;\\n        uint256 result = n - assetTwo;\\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n        // Returns the amount of token\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Function to sell the second asset and receive the first asset.\\n     * @param _amount The amount of the second asset to sell.\\n     */\\n    function sellAssetTwo(\\n        uint256 _amount\\n    ) external payable noReentrancy returns (uint256) {\\n        // //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        // if (_amount >= getAssetTwo()) {\\n        //     payable(msg.sender).transfer(msg.value); // Transfer value back\\n        //     revert amountTooBig();\\n        // }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetOne();\\n        uint256 assetTwo = getAssetTwo() + _amount;\\n        uint256 assetOne = liquidity / assetTwo;\\n        uint256 result = n - assetOne;\\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetOneAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n        //Returns amount of token\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Function to get the current balance of a given asset held by the contract.\\n     * @param _address The address of the asset.\\n     * @return The current balance of the asset.\\n     */\\n    function getAssetBalace(address _address) public view returns (uint256) {\\n        return IERC20(_address).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the first asset in terms of the second asset.\\n     * @return The current price of the first asset * 10**18.\\n     */\\n    function assetOnePrice() public view returns (uint256) {\\n        return (getAssetTwo() * 1 ether) / getAssetOne();\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the second asset in terms of the first asset.\\n     * @return The current price of the second asset * 10**18.\\n     */\\n    function assetTwoPrice() public view returns (uint256) {\\n        return (getAssetOne() * 1 ether) / getAssetTwo();\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the first asset held by the contract.\\n     * @return The current balance of the first asset.\\n     */\\n    function getAssetOne() public view returns (uint256) {\\n        return IERC20(assetOneAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the second asset held by the contract.\\n     * @return The current balance of the second asset.\\n     */\\n    function getAssetTwo() public view returns (uint256) {\\n        return IERC20(assetTwoAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\\n     * @param _address The address of the LP token holder.\\n     * @return The quantity of LP tokens owned by the address.\\n     */\\n    function getLpTokenQuantity(\\n        address _address\\n    ) public view returns (uint256) {\\n        if (msg.sender != owner && _address == msg.sender) {\\n            revert addressNotCorrect();\\n        }\\n        return lpTokenQuantity[_address];\\n    }\\n\\n    /**\\n     * @dev Function to get the current ETH balance of the contract.\\n     * @return The current ETH balance of the contract.\\n     */\\n    function addressBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\\n     * @param sellingAsset The address of the asset being sold.\\n     * @param _amount The amount of the first asset being sold.\\n     * @return The quantity of the second asset that would be returned\\n     */\\n    function getSwapQuantity(\\n        address sellingAsset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        if (sellingAsset == assetOneAddress) {\\n            uint256 newAssetOne = getAssetOne() + _amount;\\n            uint256 newAssetTwo = liquidity / newAssetOne;\\n            return getAssetTwo() - newAssetTwo;\\n        } else if (sellingAsset == assetTwoAddress) {\\n            uint256 newAssetTwo = getAssetTwo() + _amount;\\n            uint256 newAssetOne = liquidity / newAssetTwo;\\n            return getAssetOne() - newAssetOne;\\n        } else {\\n            revert assetNotCorrect();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\\n     * @param _asset The address of the asset.\\n     * @param _amount The amount of the asset.\\n     * @return The quantity of the second asset needed for providing liquidity.\\n     */\\n    function amountOfOppositeTokenNeeded(\\n        address _asset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        uint256 ratio;\\n        if (_asset == assetOneAddress) {\\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\\n        } else {\\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\\n        }\\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\\n        return amountNeeded;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    // Yield Farming and Time Locks\\n\\n    /**\\n     * @dev Function to allow users to claim their yield. Can be called once a day.\\n     *\\n     * @notice sends the request to yield Calculator smart contract to compute yield with lower gas fee\\n     */\\n    function getYield() public payable {\\n        if (isTime() == false) {\\n            revert notEnoughTimePassed();\\n        }\\n        //NOW SEND BACK THE AVAILABLE YIELD\\n        uint16 destinationChain = PoolTracker(owner).destinationChain();\\n        IZKBridge zkBridge = PoolTracker(owner).zkBridge();\\n        address yieldCalculator = PoolTracker(owner).yieldCalculator();\\n        bytes memory newPayload = abi.encode(msg.sender);\\n        uint256 fee = zkBridge.estimateFee(destinationChain);\\n        zkBridge.send{value: fee}(\\n            destinationChain,\\n            yieldCalculator,\\n            newPayload\\n        );\\n        // Pay this to our contract which will fund the bridge contract with tokens\\n        uint256 bridgeFee = zkBridge.estimateFee(destinationChain);\\n        (bool sent, ) = payable(owner).call{value: bridgeFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the request for lower gas fee computation\\n     *\\n     * @param payload returns the computation\\n     *\\n     */\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external {\\n        (uint256 availableYield, address user) = abi.decode(\\n            payload,\\n            (uint256, address)\\n        );\\n        //TODO handle your business\\n        if (availableYield > address(this).balance) {\\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[user] += availableYield;\\n        (bool sent, ) = payable(user).call{value: availableYield}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        // EMIT EVENT\\n        emit yieldFarmed(msg.sender, availableYield);\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed for the user to claim yield.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTime() public view returns (bool) {\\n        lastYieldFarmedTime[msg.sender];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTimeInitialLiquidity() public view returns (bool) {\\n        if (\\n            block.timestamp >\\n            (initialLiquidityProvidedTime[msg.sender] + 365 days)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    fallback() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    receive() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0xf9580fa904abc680af85468d281756a2e3ee43b19580c0483f3c02ca8888440a\",\"license\":\"MIT\"},\"contracts/Dex/PoolTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../Router/InterfaceBridge.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror PoolTracker_pairAlreadyExists();\\nerror PoolTracker_cantSwapSameToken();\\n\\n/**\\n * @title PoolTracker\\n * @dev Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem.\\n * Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions.\\n * Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\\n */\\ncontract PoolTracker {\\n    // Tracker for created pools, will add to database\\n    event poolCreated(LiquidityPool pool, address assetOne, address assetTwo);\\n\\n    // The owner of the PoolTracker contract, set to the deployer.\\n    address private owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // Hardcoded destination chain identifier and ZK Bridge address\\n    uint16 public destinationChain = 23;\\n    IZKBridge public zkBridge =\\n        IZKBridge(0xb20F0105f3598652a3bE569132F7b3F341106dDC);\\n\\n    // Address of the yield calculator contract, for bridging computational parts.\\n    address public yieldCalculator;\\n\\n    // Constructor: Sets the contract deployer as the owner.\\n    constructor(address _yieldCalculator) {\\n        owner = msg.sender;\\n        yieldCalculator = _yieldCalculator;\\n    }\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert();\\n        }\\n        _;\\n    }\\n\\n    // Mapping of pool Pairs, to store existing ones\\n    mapping(address => address[]) public poolPairs;\\n\\n    // Mapping a pool to the contracts, in case we wont store it in the database\\n    mapping(address => mapping(address => LiquidityPool)) public pairToPool;\\n\\n    // All the available tokens\\n    address[] public tokens;\\n\\n    /**\\n     * @dev Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial\\n     * transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings.\\n     * Emits a PoolCreated event upon successful creation.\\n     *\\n     * Requirements:\\n     * - The token pair must not already have an existing pool.\\n     * - The caller must have approved the contract to spend the necessary token amounts.\\n     *\\n     * @param _assetOneAddress The address of the first token in the pair.\\n     * @param _assetTwoAddress The address of the second token in the pair.\\n     * @param amountOne The amount of the first token to add to the pool.\\n     * @param amountTwo The amount of the second token to add to the pool.\\n     */\\n    function createPool(\\n        address _assetOneAddress,\\n        address _assetTwoAddress,\\n        uint256 amountOne,\\n        uint256 amountTwo\\n    ) external noReentrancy {\\n        if (\\n            exists(_assetOneAddress, _assetTwoAddress)\\n        ) // To prevent duplicate pools\\n        {\\n            revert PoolTracker_pairAlreadyExists();\\n        }\\n        // Transfer of tokens\\n        IERC20(_assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOne\\n        );\\n        IERC20(_assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountTwo\\n        );\\n        // Creation of pool\\n        LiquidityPool poolAddress = new LiquidityPool(\\n            _assetOneAddress,\\n            _assetTwoAddress\\n        );\\n        // Approve\\n        IERC20(_assetOneAddress).approve(address(poolAddress), amountOne);\\n        IERC20(_assetTwoAddress).approve(address(poolAddress), amountTwo);\\n        // Add initial liquidity\\n        poolAddress.addInitialLiquidity(amountOne, amountTwo);\\n        // Update mappings\\n        poolPairs[_assetOneAddress].push(_assetTwoAddress);\\n        poolPairs[_assetTwoAddress].push(_assetOneAddress);\\n        pairToPool[_assetOneAddress][_assetTwoAddress] = poolAddress;\\n        pairToPool[_assetTwoAddress][_assetOneAddress] = poolAddress;\\n\\n        if (tokenExists(_assetOneAddress) == false) {\\n            tokens.push(_assetOneAddress);\\n        }\\n        if (tokenExists(_assetTwoAddress) == false) {\\n            tokens.push(_assetTwoAddress);\\n        }\\n        // Emit the event\\n        emit poolCreated(poolAddress, _assetOneAddress, _assetTwoAddress);\\n    }\\n\\n    /**\\n     * @dev Checks if a liquidity pool exists for a given pair of tokens.\\n     *\\n     * @param token1 The address of the first token.\\n     * @param token2 The address of the second token.\\n     * @return bool Returns true if the pool exists, false otherwise.\\n     */\\n    function exists(address token1, address token2) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < poolPairs[token1].length; i++) {\\n            if (poolPairs[token1][i] == token2) {\\n                exist = true;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    /**\\n     * @dev Checks if a token is already tracked by the contract.\\n     *\\n     * @param tokenAddress The address of the token to check.\\n     * @return bool Returns true if the token is tracked, false otherwise.\\n     */\\n    function tokenExists(address tokenAddress) internal view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokenAddress == tokens[i]) {\\n                exist = true;\\n                break;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    // Routing token\\n    struct routingAddress {\\n        address tokenAddress;\\n        address priceFeed;\\n    }\\n\\n    // Array of routing Tokens\\n    routingAddress[] public routingAddresses;\\n\\n    /**\\n     * @dev Allows the contract owner to add or update the routing address for a token.\\n     * This is used for token swaps and price feed lookups.\\n     *\\n     * @param tokenAddress The token for which to set the routing.\\n     * @param priceFeed The Chainlink price feed address for the token.\\n     */\\n    function addRoutingAddress(\\n        address tokenAddress,\\n        address priceFeed\\n    ) external onlyOwner {\\n        if (routingAddresses.length == 0) {\\n            routingAddresses.push(routingAddress(tokenAddress, priceFeed));\\n        } else {\\n            for (uint256 i = 0; i < routingAddresses.length; i++) {\\n                if (routingAddresses[i].tokenAddress == tokenAddress) {\\n                    routingAddresses[i] = routingAddress(\\n                        tokenAddress,\\n                        priceFeed\\n                    );\\n                    break;\\n                } else if (i == routingAddresses.length - 1) {\\n                    routingAddresses.push(\\n                        routingAddress(tokenAddress, priceFeed)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Determines the optimal routing token for a swap between two tokens,\\n     * based on available liquidity and price feeds.\\n     *\\n     * @param address1 The address of the first token.\\n     * @param address2 The address of the second token.\\n     * @return address The address of the optimal routing token.\\n     */\\n    function tokenToRoute(\\n        address address1,\\n        address address2\\n    ) external view returns (address) {\\n        if (address1 == address2) {\\n            revert PoolTracker_cantSwapSameToken();\\n        }\\n        address[] memory token1pairs = poolPairs[address1];\\n        address[] memory token2pairs = poolPairs[address2];\\n\\n        address routingToken;\\n        int routingTokenLiquidity;\\n\\n        for (uint256 i; i < token1pairs.length; i++) {\\n            for (uint256 a; a < token2pairs.length; a++) {\\n                if (token1pairs[i] == token2pairs[a]) {\\n                    for (uint256 b; b < routingAddresses.length; b++) {\\n                        if (\\n                            routingAddresses[b].tokenAddress == token1pairs[i]\\n                        ) {\\n                            (, int answer, , , ) = AggregatorV3Interface(\\n                                routingAddresses[b].priceFeed\\n                            ).latestRoundData();\\n                            int liquidity;\\n                            LiquidityPool pool1 = pairToPool[address1][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            LiquidityPool pool2 = pairToPool[address2][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            uint256 balance1 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool1));\\n                            uint256 balance2 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool2));\\n                            liquidity =\\n                                (int(balance1) + int(balance2)) *\\n                                answer;\\n                            if (liquidity > routingTokenLiquidity) {\\n                                // Best choice so far if the liquidity is bigger than previous best token\\n                                routingToken = routingAddresses[b].tokenAddress;\\n                                routingTokenLiquidity = liquidity;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return routingToken;\\n    }\\n\\n    /**\\n     * @dev Returns all array of all tradable tokens on the platform\\n     *\\n     * @return array Returns tokens array.\\n     */\\n    function tokenList() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    /**\\n     * @dev Returns length or routingAddresses array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getRoutingAddressesLength() external view returns (uint256) {\\n        return routingAddresses.length;\\n    }\\n\\n    /**\\n     * @dev Returns length or poolPairs array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getPoolPairsLength(\\n        address tokenAddress\\n    ) external view returns (uint256) {\\n        return poolPairs[tokenAddress].length;\\n    }\\n\\n    /**\\n     * @dev owner can withdraw the fees to deposit to yield Calculator\\n     */\\n    function withdrawEther() external onlyOwner {\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1e28b114bbb312ef730baff55fee62eb2d231840eed9a442a378f6edabf3746f\",\"license\":\"MIT\"},\"contracts/Dex/WeaveSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing required contracts and interfaces\\nimport \\\"./PoolTracker.sol\\\";\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n// Custom errors for specific failure modes, enhancing gas efficiency and error clarity.\\nerror SwapRouter_tokensCantBeSwapped();\\nerror SwapRouter_needToCallExistingFunction();\\n\\n/**\\n * @title SwapRouter\\n * @dev This contract facilitates token swaps by interacting with liquidity pools.\\n * It supports direct swaps between two tokens in a single pool, or routed swaps through an intermediary token.\\n * Utilizes the PoolTracker contract to find liquidity pools and perform the necessary asset exchanges.\\n */\\ncontract SwapRouter {\\n    // Event emitted after successful token swaps, providing auditability and transparency of operations.\\n    event swap(\\n        address userAddress,\\n        address address1,\\n        address address2,\\n        uint256 address1Amount,\\n        uint256 address2Amount\\n    );\\n\\n    // Reference to the PoolTracker contract for pool operations\\n    PoolTracker poolTracker;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @notice Constructs the SwapRouter and initializes the PoolTracker reference.\\n     * @param tracker The PoolTracker contract address.\\n     */\\n    constructor(address tracker) {\\n        poolTracker = PoolTracker(tracker);\\n    }\\n\\n    /**\\n     * @notice Swaps `inputAmount` of `address1` tokens for `address2` tokens.\\n     * @dev This function supports direct swaps between tokens in a single pool or routed swaps through an intermediary token.\\n     * Uses PoolTracker to determine the best swap path and perform the exchange.\\n     * @param address1 The token being sold by the user.\\n     * @param address2 The token being purchased by the user.\\n     * @param inputAmount The amount of `address1` tokens to swap.\\n     */\\n    function swapAsset(\\n        address address1,\\n        address address2,\\n        uint256 inputAmount\\n    ) public payable noReentrancy {\\n        if (poolTracker.exists(address1, address2)) {\\n            // Direct swap scenario\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            uint256 startingBalanceAddress2 = IERC20(address2).balanceOf(\\n                address(this)\\n            );\\n            if (pool.assetOneAddress() == address1) {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool), inputAmount);\\n                pool.sellAssetOne{value: pool.swapFee()}(inputAmount);\\n            } else {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool), inputAmount);\\n                pool.sellAssetTwo{value: pool.swapFee()}(inputAmount);\\n            }\\n            uint256 amountOutput = IERC20(address2).balanceOf(address(this)) -\\n                startingBalanceAddress2;\\n            IERC20(address2).transfer(msg.sender, amountOutput);\\n            // Unrequired fee\\n            uint256 unrequiredFee = msg.value - pool.swapFee(); // In case the msg.sender sent more value than it is required\\n            (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\\n            // Routed swap scenario\\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(\\n                address1,\\n                routingToken\\n            );\\n            LiquidityPool pool2 = poolTracker.pairToPool(\\n                address2,\\n                routingToken\\n            );\\n            uint256 routingTokenAmount;\\n            //SWAP 1, input token into routing  token\\n            IERC20(address1).transferFrom(\\n                msg.sender,\\n                address(this),\\n                inputAmount\\n            );\\n            IERC20(address1).approve(address(pool1), inputAmount);\\n            if (pool1.assetOneAddress() == address1) {\\n                routingTokenAmount = pool1.sellAssetOne{value: pool1.swapFee()}(\\n                    inputAmount\\n                );\\n            } else {\\n                routingTokenAmount = pool1.sellAssetTwo{value: pool1.swapFee()}(\\n                    inputAmount\\n                );\\n            }\\n            //SWAP 2, routing token into output token\\n            uint256 amountOutput;\\n            IERC20(routingToken).approve(address(pool2), routingTokenAmount);\\n            if (pool2.assetOneAddress() == routingToken) {\\n                amountOutput = pool2.sellAssetOne{value: pool2.swapFee()}(\\n                    routingTokenAmount\\n                );\\n            } else {\\n                amountOutput = pool2.sellAssetTwo{value: pool2.swapFee()}(\\n                    routingTokenAmount\\n                );\\n            }\\n            IERC20(address2).transfer(msg.sender, amountOutput);\\n            // Unrequired fee\\n            uint256 unrequiredFee = msg.value -\\n                pool1.swapFee() -\\n                pool2.swapFee(); // In case the msg.sender sent more value than it is required\\n            (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n    }\\n\\n    /**\\n     * @notice Estimates the output amount for a swap from `address1` to `address2` given an `inputAmount` of `address1`.\\n     * @dev Considers direct swaps and routed swaps through an intermediary token, utilizing PoolTracker for calculations.\\n     * @param address1 The token being sold.\\n     * @param address2 The token being bought.\\n     * @param inputAmount The amount of `address1` tokens to swap.\\n     * @return output The estimated amount of `address2` tokens to be received.\\n     */\\n    function getSwapAmount(\\n        address address1,\\n        address address2,\\n        uint256 inputAmount\\n    ) public view returns (uint256) {\\n        uint256 output;\\n        if (poolTracker.exists(address1, address2)) {\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            output = pool.getSwapQuantity(address1, inputAmount);\\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(\\n                address1,\\n                routingToken\\n            );\\n            LiquidityPool pool2 = poolTracker.pairToPool(\\n                address2,\\n                routingToken\\n            );\\n            uint256 routingOutput = pool1.getSwapQuantity(\\n                address1,\\n                inputAmount\\n            );\\n            output = pool2.getSwapQuantity(routingToken, routingOutput);\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @notice Retrieves the swap fee required for a swap between `address1` and `address2`.\\n     * @dev Calculates the total swap fee, accounting for both direct and routed swaps, by querying the associated pools.\\n     * @param address1 The source token address.\\n     * @param address2 The destination token address.\\n     * @return fee The total swap fee for the transaction.\\n     */\\n    function getSwapFee(\\n        address address1,\\n        address address2\\n    ) public view returns (uint256) {\\n        uint256 fee;\\n        if (poolTracker.exists(address1, address2)) {\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            fee += pool.swapFee();\\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(\\n                address1,\\n                routingToken\\n            );\\n            LiquidityPool pool2 = poolTracker.pairToPool(\\n                address2,\\n                routingToken\\n            );\\n            fee += pool1.swapFee();\\n            fee += pool2.swapFee();\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n        return fee;\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     */\\n    fallback() external payable {}\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x92a258d93601ff0c05e80619600076ab424ae6e2718bee5e5f92ade8b39055f2\",\"license\":\"MIT\"},\"contracts/Router/InterfaceBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IZKBridge {\\n    // @notice send a zkBridge message to the specified address at a zkBridge endpoint.\\n    // @param dstChainId - the destination chain identifier\\n    // @param dstAddress - the address on destination chain\\n    // @param payload - a custom bytes payload to send to the destination contract\\n    function send(\\n        uint16 dstChainId,\\n        address dstAddress,\\n        bytes memory payload\\n    ) external payable returns (uint64 nonce);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param dstChainId - the destination chain identifier\\n    function estimateFee(uint16 dstChainId) external view returns (uint256 fee);\\n}\\n\\ninterface IZKBridgeReceiver {\\n    // @notice zkBridge endpoint will invoke this function to deliver the message on the destination\\n    // @param srcChainId - the source endpoint identifier\\n    // @param srcAddress - the source sending contract address from the source chain\\n    // @param nonce - the ordered message nonce\\n    // @param payload - a custom bytes payload from send chain\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x57b2588179cffda143a904e7f55db5eebc526fa479fd3004ea2f521a7fa438a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002abf38038062002abf8339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b612995806200012a6000396000f3fe6080604052600436106100385760003560e01c80632de192dc14610041578063635bc0c21461007e578063fe9f5c05146100bb5761003f565b3661003f57005b005b34801561004d57600080fd5b506100686004803603810190610063919061246b565b6100d7565b60405161007591906124c4565b60405180910390f35b34801561008a57600080fd5b506100a560048036038101906100a0919061250b565b610714565b6040516100b291906124c4565b60405180910390f35b6100d560048036038101906100d0919061250b565b610d5b565b005b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82285856040518363ffffffff1660e01b815260040161013592919061256d565b60206040518083038186803b15801561014d57600080fd5b505afa158015610161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018591906125ce565b156102cb5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886866040518363ffffffff1660e01b81526004016101e892919061256d565b60206040518083038186803b15801561020057600080fd5b505afa158015610214573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610238919061264b565b90508073ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561028057600080fd5b505afa158015610294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b8919061268d565b826102c391906126e9565b91505061070a565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246086866040518363ffffffff1660e01b815260040161033e92919061256d565b60206040518083038186803b15801561035657600080fd5b505afa15801561036a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038e9190612754565b73ffffffffffffffffffffffffffffffffffffffff16146106d75760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246086866040518363ffffffff1660e01b815260040161040792919061256d565b60206040518083038186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104579190612754565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6887846040518363ffffffff1660e01b81526004016104b792919061256d565b60206040518083038186803b1580156104cf57600080fd5b505afa1580156104e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610507919061264b565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6887856040518363ffffffff1660e01b815260040161056792919061256d565b60206040518083038186803b15801561057f57600080fd5b505afa158015610593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b7919061264b565b90508173ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ff57600080fd5b505afa158015610613573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610637919061268d565b8461064291906126e9565b93508073ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561068a57600080fd5b505afa15801561069e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c2919061268d565b846106cd91906126e9565b9350505050610709565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b8091505092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82286866040518363ffffffff1660e01b815260040161077292919061256d565b60206040518083038186803b15801561078a57600080fd5b505afa15801561079e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c291906125ce565b1561090a5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6887876040518363ffffffff1660e01b815260040161082592919061256d565b60206040518083038186803b15801561083d57600080fd5b505afa158015610851573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610875919061264b565b90508073ffffffffffffffffffffffffffffffffffffffff166328da1aef87866040518363ffffffff1660e01b81526004016108b2929190612781565b60206040518083038186803b1580156108ca57600080fd5b505afa1580156108de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610902919061268d565b915050610d50565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b815260040161097d92919061256d565b60206040518083038186803b15801561099557600080fd5b505afa1580156109a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cd9190612754565b73ffffffffffffffffffffffffffffffffffffffff1614610d1d5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b8152600401610a4692919061256d565b60206040518083038186803b158015610a5e57600080fd5b505afa158015610a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a969190612754565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888846040518363ffffffff1660e01b8152600401610af692919061256d565b60206040518083038186803b158015610b0e57600080fd5b505afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b46919061264b565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b8152600401610ba692919061256d565b60206040518083038186803b158015610bbe57600080fd5b505afa158015610bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf6919061264b565b905060008273ffffffffffffffffffffffffffffffffffffffff166328da1aef8a896040518363ffffffff1660e01b8152600401610c35929190612781565b60206040518083038186803b158015610c4d57600080fd5b505afa158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c85919061268d565b90508173ffffffffffffffffffffffffffffffffffffffff166328da1aef85836040518363ffffffff1660e01b8152600401610cc2929190612781565b60206040518083038186803b158015610cda57600080fd5b505afa158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d12919061268d565b945050505050610d4f565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b809150509392505050565b600060149054906101000a900460ff1615610dab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da290612807565b60405180910390fd5b6001600060146101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82284846040518363ffffffff1660e01b8152600401610e2192919061256d565b60206040518083038186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7191906125ce565b156117235760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b8152600401610ed492919061256d565b60206040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f24919061264b565b905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f619190612827565b60206040518083038186803b158015610f7957600080fd5b505afa158015610f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb1919061268d565b90508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b15801561101057600080fd5b505afa158015611024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110489190612754565b73ffffffffffffffffffffffffffffffffffffffff161415611291578473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016110a193929190612842565b602060405180830381600087803b1580156110bb57600080fd5b505af11580156110cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f391906125ce565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b815260040161112f929190612781565b602060405180830381600087803b15801561114957600080fd5b505af115801561115d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118191906125ce565b508173ffffffffffffffffffffffffffffffffffffffff16634257dc4c8373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e457600080fd5b505afa1580156111f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121c919061268d565b856040518363ffffffff1660e01b815260040161123991906124c4565b6020604051808303818588803b15801561125257600080fd5b505af1158015611266573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061128b919061268d565b506114ba565b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016112ce93929190612842565b602060405180830381600087803b1580156112e857600080fd5b505af11580156112fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132091906125ce565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b815260040161135c929190612781565b602060405180830381600087803b15801561137657600080fd5b505af115801561138a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ae91906125ce565b508173ffffffffffffffffffffffffffffffffffffffff1663dc1716248373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141157600080fd5b505afa158015611425573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611449919061268d565b856040518363ffffffff1660e01b815260040161146691906124c4565b6020604051808303818588803b15801561147f57600080fd5b505af1158015611493573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906114b8919061268d565b505b6000818573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114f69190612827565b60206040518083038186803b15801561150e57600080fd5b505afa158015611522573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611546919061268d565b6115509190612879565b90508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161158d929190612781565b602060405180830381600087803b1580156115a757600080fd5b505af11580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df91906125ce565b5060008373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561162857600080fd5b505afa15801561163c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611660919061268d565b3461166b9190612879565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051611693906128de565b60006040518083038185875af1925050503d80600081146116d0576040519150601f19603f3d011682016040523d82523d6000602084013e6116d5565b606091505b5050905080611719576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117109061293f565b60405180910390fd5b50505050506123e9565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b815260040161179692919061256d565b60206040518083038186803b1580156117ae57600080fd5b505afa1580156117c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e69190612754565b73ffffffffffffffffffffffffffffffffffffffff16146123b65760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b815260040161185f92919061256d565b60206040518083038186803b15801561187757600080fd5b505afa15801561188b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118af9190612754565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886846040518363ffffffff1660e01b815260040161190f92919061256d565b60206040518083038186803b15801561192757600080fd5b505afa15801561193b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195f919061264b565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886856040518363ffffffff1660e01b81526004016119bf92919061256d565b60206040518083038186803b1580156119d757600080fd5b505afa1580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f919061264b565b905060008673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401611a5093929190612842565b602060405180830381600087803b158015611a6a57600080fd5b505af1158015611a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa291906125ce565b508673ffffffffffffffffffffffffffffffffffffffff1663095ea7b384876040518363ffffffff1660e01b8152600401611ade929190612781565b602060405180830381600087803b158015611af857600080fd5b505af1158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3091906125ce565b508673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b158015611b8e57600080fd5b505afa158015611ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc69190612754565b73ffffffffffffffffffffffffffffffffffffffff161415611cf2578273ffffffffffffffffffffffffffffffffffffffff16634257dc4c8473ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4457600080fd5b505afa158015611c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7c919061268d565b876040518363ffffffff1660e01b8152600401611c9991906124c4565b6020604051808303818588803b158015611cb257600080fd5b505af1158015611cc6573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611ceb919061268d565b9050611dfe565b8273ffffffffffffffffffffffffffffffffffffffff1663dc1716248473ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d5457600080fd5b505afa158015611d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8c919061268d565b876040518363ffffffff1660e01b8152600401611da991906124c4565b6020604051808303818588803b158015611dc257600080fd5b505af1158015611dd6573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611dfb919061268d565b90505b60008473ffffffffffffffffffffffffffffffffffffffff1663095ea7b384846040518363ffffffff1660e01b8152600401611e3b929190612781565b602060405180830381600087803b158015611e5557600080fd5b505af1158015611e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8d91906125ce565b508473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b158015611eeb57600080fd5b505afa158015611eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f239190612754565b73ffffffffffffffffffffffffffffffffffffffff16141561204f578273ffffffffffffffffffffffffffffffffffffffff16634257dc4c8473ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fa157600080fd5b505afa158015611fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd9919061268d565b846040518363ffffffff1660e01b8152600401611ff691906124c4565b6020604051808303818588803b15801561200f57600080fd5b505af1158015612023573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612048919061268d565b905061215b565b8273ffffffffffffffffffffffffffffffffffffffff1663dc1716248473ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120b157600080fd5b505afa1580156120c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e9919061268d565b846040518363ffffffff1660e01b815260040161210691906124c4565b6020604051808303818588803b15801561211f57600080fd5b505af1158015612133573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612158919061268d565b90505b8673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612196929190612781565b602060405180830381600087803b1580156121b057600080fd5b505af11580156121c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e891906125ce565b5060008373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561223157600080fd5b505afa158015612245573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612269919061268d565b8573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122af57600080fd5b505afa1580156122c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e7919061268d565b346122f29190612879565b6122fc9190612879565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051612324906128de565b60006040518083038185875af1925050503d8060008114612361576040519150601f19603f3d011682016040523d82523d6000602084013e612366565b606091505b50509050806123aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a19061293f565b60405180910390fd5b505050505050506123e8565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b60008060146101000a81548160ff021916908315150217905550505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124388261240d565b9050919050565b6124488161242d565b811461245357600080fd5b50565b6000813590506124658161243f565b92915050565b6000806040838503121561248257612481612408565b5b600061249085828601612456565b92505060206124a185828601612456565b9150509250929050565b6000819050919050565b6124be816124ab565b82525050565b60006020820190506124d960008301846124b5565b92915050565b6124e8816124ab565b81146124f357600080fd5b50565b600081359050612505816124df565b92915050565b60008060006060848603121561252457612523612408565b5b600061253286828701612456565b935050602061254386828701612456565b9250506040612554868287016124f6565b9150509250925092565b6125678161242d565b82525050565b6000604082019050612582600083018561255e565b61258f602083018461255e565b9392505050565b60008115159050919050565b6125ab81612596565b81146125b657600080fd5b50565b6000815190506125c8816125a2565b92915050565b6000602082840312156125e4576125e3612408565b5b60006125f2848285016125b9565b91505092915050565b60006126068261240d565b9050919050565b6000612618826125fb565b9050919050565b6126288161260d565b811461263357600080fd5b50565b6000815190506126458161261f565b92915050565b60006020828403121561266157612660612408565b5b600061266f84828501612636565b91505092915050565b600081519050612687816124df565b92915050565b6000602082840312156126a3576126a2612408565b5b60006126b184828501612678565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126f4826124ab565b91506126ff836124ab565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612734576127336126ba565b5b828201905092915050565b60008151905061274e8161243f565b92915050565b60006020828403121561276a57612769612408565b5b60006127788482850161273f565b91505092915050565b6000604082019050612796600083018561255e565b6127a360208301846124b5565b9392505050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b60006127f1600e836127aa565b91506127fc826127bb565b602082019050919050565b60006020820190508181036000830152612820816127e4565b9050919050565b600060208201905061283c600083018461255e565b92915050565b6000606082019050612857600083018661255e565b612864602083018561255e565b61287160408301846124b5565b949350505050565b6000612884826124ab565b915061288f836124ab565b9250828210156128a2576128a16126ba565b5b828203905092915050565b600081905092915050565b50565b60006128c86000836128ad565b91506128d3826128b8565b600082019050919050565b60006128e9826128bb565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006129296014836127aa565b9150612934826128f3565b602082019050919050565b600060208201905081810360008301526129588161291c565b905091905056fea26469706673582212208dbae85c45bf4d8b81c47c7d3ccf56043ae2588e8a05b9e6b1bfdc0a89ab70dc64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c80632de192dc14610041578063635bc0c21461007e578063fe9f5c05146100bb5761003f565b3661003f57005b005b34801561004d57600080fd5b506100686004803603810190610063919061246b565b6100d7565b60405161007591906124c4565b60405180910390f35b34801561008a57600080fd5b506100a560048036038101906100a0919061250b565b610714565b6040516100b291906124c4565b60405180910390f35b6100d560048036038101906100d0919061250b565b610d5b565b005b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82285856040518363ffffffff1660e01b815260040161013592919061256d565b60206040518083038186803b15801561014d57600080fd5b505afa158015610161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018591906125ce565b156102cb5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886866040518363ffffffff1660e01b81526004016101e892919061256d565b60206040518083038186803b15801561020057600080fd5b505afa158015610214573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610238919061264b565b90508073ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561028057600080fd5b505afa158015610294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b8919061268d565b826102c391906126e9565b91505061070a565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246086866040518363ffffffff1660e01b815260040161033e92919061256d565b60206040518083038186803b15801561035657600080fd5b505afa15801561036a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038e9190612754565b73ffffffffffffffffffffffffffffffffffffffff16146106d75760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246086866040518363ffffffff1660e01b815260040161040792919061256d565b60206040518083038186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104579190612754565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6887846040518363ffffffff1660e01b81526004016104b792919061256d565b60206040518083038186803b1580156104cf57600080fd5b505afa1580156104e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610507919061264b565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6887856040518363ffffffff1660e01b815260040161056792919061256d565b60206040518083038186803b15801561057f57600080fd5b505afa158015610593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b7919061264b565b90508173ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ff57600080fd5b505afa158015610613573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610637919061268d565b8461064291906126e9565b93508073ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561068a57600080fd5b505afa15801561069e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c2919061268d565b846106cd91906126e9565b9350505050610709565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b8091505092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82286866040518363ffffffff1660e01b815260040161077292919061256d565b60206040518083038186803b15801561078a57600080fd5b505afa15801561079e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c291906125ce565b1561090a5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6887876040518363ffffffff1660e01b815260040161082592919061256d565b60206040518083038186803b15801561083d57600080fd5b505afa158015610851573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610875919061264b565b90508073ffffffffffffffffffffffffffffffffffffffff166328da1aef87866040518363ffffffff1660e01b81526004016108b2929190612781565b60206040518083038186803b1580156108ca57600080fd5b505afa1580156108de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610902919061268d565b915050610d50565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b815260040161097d92919061256d565b60206040518083038186803b15801561099557600080fd5b505afa1580156109a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cd9190612754565b73ffffffffffffffffffffffffffffffffffffffff1614610d1d5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b8152600401610a4692919061256d565b60206040518083038186803b158015610a5e57600080fd5b505afa158015610a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a969190612754565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888846040518363ffffffff1660e01b8152600401610af692919061256d565b60206040518083038186803b158015610b0e57600080fd5b505afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b46919061264b565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b8152600401610ba692919061256d565b60206040518083038186803b158015610bbe57600080fd5b505afa158015610bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf6919061264b565b905060008273ffffffffffffffffffffffffffffffffffffffff166328da1aef8a896040518363ffffffff1660e01b8152600401610c35929190612781565b60206040518083038186803b158015610c4d57600080fd5b505afa158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c85919061268d565b90508173ffffffffffffffffffffffffffffffffffffffff166328da1aef85836040518363ffffffff1660e01b8152600401610cc2929190612781565b60206040518083038186803b158015610cda57600080fd5b505afa158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d12919061268d565b945050505050610d4f565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b809150509392505050565b600060149054906101000a900460ff1615610dab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da290612807565b60405180910390fd5b6001600060146101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82284846040518363ffffffff1660e01b8152600401610e2192919061256d565b60206040518083038186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7191906125ce565b156117235760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b8152600401610ed492919061256d565b60206040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f24919061264b565b905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f619190612827565b60206040518083038186803b158015610f7957600080fd5b505afa158015610f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb1919061268d565b90508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b15801561101057600080fd5b505afa158015611024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110489190612754565b73ffffffffffffffffffffffffffffffffffffffff161415611291578473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016110a193929190612842565b602060405180830381600087803b1580156110bb57600080fd5b505af11580156110cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f391906125ce565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b815260040161112f929190612781565b602060405180830381600087803b15801561114957600080fd5b505af115801561115d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118191906125ce565b508173ffffffffffffffffffffffffffffffffffffffff16634257dc4c8373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e457600080fd5b505afa1580156111f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121c919061268d565b856040518363ffffffff1660e01b815260040161123991906124c4565b6020604051808303818588803b15801561125257600080fd5b505af1158015611266573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061128b919061268d565b506114ba565b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016112ce93929190612842565b602060405180830381600087803b1580156112e857600080fd5b505af11580156112fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132091906125ce565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b815260040161135c929190612781565b602060405180830381600087803b15801561137657600080fd5b505af115801561138a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ae91906125ce565b508173ffffffffffffffffffffffffffffffffffffffff1663dc1716248373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141157600080fd5b505afa158015611425573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611449919061268d565b856040518363ffffffff1660e01b815260040161146691906124c4565b6020604051808303818588803b15801561147f57600080fd5b505af1158015611493573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906114b8919061268d565b505b6000818573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114f69190612827565b60206040518083038186803b15801561150e57600080fd5b505afa158015611522573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611546919061268d565b6115509190612879565b90508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161158d929190612781565b602060405180830381600087803b1580156115a757600080fd5b505af11580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df91906125ce565b5060008373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561162857600080fd5b505afa15801561163c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611660919061268d565b3461166b9190612879565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051611693906128de565b60006040518083038185875af1925050503d80600081146116d0576040519150601f19603f3d011682016040523d82523d6000602084013e6116d5565b606091505b5050905080611719576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117109061293f565b60405180910390fd5b50505050506123e9565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b815260040161179692919061256d565b60206040518083038186803b1580156117ae57600080fd5b505afa1580156117c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e69190612754565b73ffffffffffffffffffffffffffffffffffffffff16146123b65760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b815260040161185f92919061256d565b60206040518083038186803b15801561187757600080fd5b505afa15801561188b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118af9190612754565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886846040518363ffffffff1660e01b815260040161190f92919061256d565b60206040518083038186803b15801561192757600080fd5b505afa15801561193b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195f919061264b565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886856040518363ffffffff1660e01b81526004016119bf92919061256d565b60206040518083038186803b1580156119d757600080fd5b505afa1580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f919061264b565b905060008673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401611a5093929190612842565b602060405180830381600087803b158015611a6a57600080fd5b505af1158015611a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa291906125ce565b508673ffffffffffffffffffffffffffffffffffffffff1663095ea7b384876040518363ffffffff1660e01b8152600401611ade929190612781565b602060405180830381600087803b158015611af857600080fd5b505af1158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3091906125ce565b508673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b158015611b8e57600080fd5b505afa158015611ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc69190612754565b73ffffffffffffffffffffffffffffffffffffffff161415611cf2578273ffffffffffffffffffffffffffffffffffffffff16634257dc4c8473ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4457600080fd5b505afa158015611c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7c919061268d565b876040518363ffffffff1660e01b8152600401611c9991906124c4565b6020604051808303818588803b158015611cb257600080fd5b505af1158015611cc6573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611ceb919061268d565b9050611dfe565b8273ffffffffffffffffffffffffffffffffffffffff1663dc1716248473ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d5457600080fd5b505afa158015611d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8c919061268d565b876040518363ffffffff1660e01b8152600401611da991906124c4565b6020604051808303818588803b158015611dc257600080fd5b505af1158015611dd6573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611dfb919061268d565b90505b60008473ffffffffffffffffffffffffffffffffffffffff1663095ea7b384846040518363ffffffff1660e01b8152600401611e3b929190612781565b602060405180830381600087803b158015611e5557600080fd5b505af1158015611e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8d91906125ce565b508473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b158015611eeb57600080fd5b505afa158015611eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f239190612754565b73ffffffffffffffffffffffffffffffffffffffff16141561204f578273ffffffffffffffffffffffffffffffffffffffff16634257dc4c8473ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fa157600080fd5b505afa158015611fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd9919061268d565b846040518363ffffffff1660e01b8152600401611ff691906124c4565b6020604051808303818588803b15801561200f57600080fd5b505af1158015612023573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612048919061268d565b905061215b565b8273ffffffffffffffffffffffffffffffffffffffff1663dc1716248473ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120b157600080fd5b505afa1580156120c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e9919061268d565b846040518363ffffffff1660e01b815260040161210691906124c4565b6020604051808303818588803b15801561211f57600080fd5b505af1158015612133573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612158919061268d565b90505b8673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612196929190612781565b602060405180830381600087803b1580156121b057600080fd5b505af11580156121c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e891906125ce565b5060008373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561223157600080fd5b505afa158015612245573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612269919061268d565b8573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122af57600080fd5b505afa1580156122c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e7919061268d565b346122f29190612879565b6122fc9190612879565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051612324906128de565b60006040518083038185875af1925050503d8060008114612361576040519150601f19603f3d011682016040523d82523d6000602084013e612366565b606091505b50509050806123aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a19061293f565b60405180910390fd5b505050505050506123e8565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b60008060146101000a81548160ff021916908315150217905550505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124388261240d565b9050919050565b6124488161242d565b811461245357600080fd5b50565b6000813590506124658161243f565b92915050565b6000806040838503121561248257612481612408565b5b600061249085828601612456565b92505060206124a185828601612456565b9150509250929050565b6000819050919050565b6124be816124ab565b82525050565b60006020820190506124d960008301846124b5565b92915050565b6124e8816124ab565b81146124f357600080fd5b50565b600081359050612505816124df565b92915050565b60008060006060848603121561252457612523612408565b5b600061253286828701612456565b935050602061254386828701612456565b9250506040612554868287016124f6565b9150509250925092565b6125678161242d565b82525050565b6000604082019050612582600083018561255e565b61258f602083018461255e565b9392505050565b60008115159050919050565b6125ab81612596565b81146125b657600080fd5b50565b6000815190506125c8816125a2565b92915050565b6000602082840312156125e4576125e3612408565b5b60006125f2848285016125b9565b91505092915050565b60006126068261240d565b9050919050565b6000612618826125fb565b9050919050565b6126288161260d565b811461263357600080fd5b50565b6000815190506126458161261f565b92915050565b60006020828403121561266157612660612408565b5b600061266f84828501612636565b91505092915050565b600081519050612687816124df565b92915050565b6000602082840312156126a3576126a2612408565b5b60006126b184828501612678565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126f4826124ab565b91506126ff836124ab565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612734576127336126ba565b5b828201905092915050565b60008151905061274e8161243f565b92915050565b60006020828403121561276a57612769612408565b5b60006127788482850161273f565b91505092915050565b6000604082019050612796600083018561255e565b6127a360208301846124b5565b9392505050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b60006127f1600e836127aa565b91506127fc826127bb565b602082019050919050565b60006020820190508181036000830152612820816127e4565b9050919050565b600060208201905061283c600083018461255e565b92915050565b6000606082019050612857600083018661255e565b612864602083018561255e565b61287160408301846124b5565b949350505050565b6000612884826124ab565b915061288f836124ab565b9250828210156128a2576128a16126ba565b5b828203905092915050565b600081905092915050565b50565b60006128c86000836128ad565b91506128d3826128b8565b600082019050919050565b60006128e9826128bb565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006129296014836127aa565b9150612934826128f3565b602082019050919050565b600060208201905081810360008301526129588161291c565b905091905056fea26469706673582212208dbae85c45bf4d8b81c47c7d3ccf56043ae2588e8a05b9e6b1bfdc0a89ab70dc64736f6c63430008090033",
  "devdoc": {
    "details": "This contract facilitates token swaps by interacting with liquidity pools. It supports direct swaps between two tokens in a single pool, or routed swaps through an intermediary token. Utilizes the PoolTracker contract to find liquidity pools and perform the necessary asset exchanges.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "tracker": "The PoolTracker contract address."
        }
      },
      "getSwapAmount(address,address,uint256)": {
        "details": "Considers direct swaps and routed swaps through an intermediary token, utilizing PoolTracker for calculations.",
        "params": {
          "address1": "The token being sold.",
          "address2": "The token being bought.",
          "inputAmount": "The amount of `address1` tokens to swap."
        },
        "returns": {
          "_0": "output The estimated amount of `address2` tokens to be received."
        }
      },
      "getSwapFee(address,address)": {
        "details": "Calculates the total swap fee, accounting for both direct and routed swaps, by querying the associated pools.",
        "params": {
          "address1": "The source token address.",
          "address2": "The destination token address."
        },
        "returns": {
          "_0": "fee The total swap fee for the transaction."
        }
      },
      "swapAsset(address,address,uint256)": {
        "details": "This function supports direct swaps between tokens in a single pool or routed swaps through an intermediary token. Uses PoolTracker to determine the best swap path and perform the exchange.",
        "params": {
          "address1": "The token being sold by the user.",
          "address2": "The token being purchased by the user.",
          "inputAmount": "The amount of `address1` tokens to swap."
        }
      }
    },
    "title": "SwapRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs the SwapRouter and initializes the PoolTracker reference."
      },
      "getSwapAmount(address,address,uint256)": {
        "notice": "Estimates the output amount for a swap from `address1` to `address2` given an `inputAmount` of `address1`."
      },
      "getSwapFee(address,address)": {
        "notice": "Retrieves the swap fee required for a swap between `address1` and `address2`."
      },
      "swapAsset(address,address,uint256)": {
        "notice": "Swaps `inputAmount` of `address1` tokens for `address2` tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2464,
        "contract": "contracts/Dex/WeaveSwap.sol:SwapRouter",
        "label": "poolTracker",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PoolTracker)2439"
      },
      {
        "astId": 2466,
        "contract": "contracts/Dex/WeaveSwap.sol:SwapRouter",
        "label": "locked",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(PoolTracker)2439": {
        "encoding": "inplace",
        "label": "contract PoolTracker",
        "numberOfBytes": "20"
      }
    }
  }
}