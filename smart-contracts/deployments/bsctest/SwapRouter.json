{
  "address": "0x1044E8b79B873f09Dc2c0665532c267D470c8E0c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tracker",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "SwapRouter_tokensCantBeSwapped",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "address2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "address1Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "address2Amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "getSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "swapAsset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4a3a235d06206a22080d652e9d5919390f2de80d41a50d74cc4a28eaa4f1b95e",
  "receipt": {
    "to": null,
    "from": "0x540467feca43907A701311D0721df481D1f9e238",
    "contractAddress": "0x1044E8b79B873f09Dc2c0665532c267D470c8E0c",
    "transactionIndex": 22,
    "gasUsed": "2158124",
    "logsBloom": "0x
    "blockHash": "0xdca194fd50be4f03fd9843bf951d4edf3f00ea9a4306636fe3914169cb231866",
    "transactionHash": "0x4a3a235d06206a22080d652e9d5919390f2de80d41a50d74cc4a28eaa4f1b95e",
    "logs": [],
    "blockNumber": 37933262,
    "cumulativeGasUsed": "3148999",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBCfe50560e5ab23Aa12c5B231fa91c9d113cbB70"
  ],
  "numDeployments": 1,
  "solcInputHash": "30e751f29dc882e93d446105100fc085",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tracker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SwapRouter_tokensCantBeSwapped\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"address1Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"address2Amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"getSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"swapAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Facilitates token swaps utilizing defined liquidity pools, offering direct swaps and routed swaps through an intermediary. Leverages the PoolTracker contract to access liquidity pool information and perform asset exchanges.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"tracker\":\"Address of the PoolTracker contract instance.\"}},\"getSwapAmount(address,address,uint256)\":{\"details\":\"Considers direct swaps and routed swaps through an intermediary token, utilizing PoolTracker for calculations.\",\"params\":{\"address1\":\"The token being sold.\",\"address2\":\"The token being bought.\",\"inputAmount\":\"The amount of `address1` tokens to swap.\"},\"returns\":{\"_0\":\"output The estimated amount of `address2` tokens to be received.\"}},\"swapAsset(address,address,uint256)\":{\"details\":\"This function supports direct swaps between tokens in a single pool or routed swaps through an intermediary token. Uses PoolTracker to determine the best swap path and perform the exchange.\",\"params\":{\"address1\":\"The token being sold by the user.\",\"address2\":\"The token being purchased by the user.\",\"inputAmount\":\"The amount of `address1` tokens to swap.\"}}},\"title\":\"SwapRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getSwapAmount(address,address,uint256)\":{\"notice\":\"Estimates the output amount for a swap from `address1` to `address2` given an `inputAmount` of `address1`.\"},\"swapAsset(address,address,uint256)\":{\"notice\":\"Swaps `inputAmount` of `address1` tokens for `address2` tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex/WeaveSwap.sol\":\"SwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Dex/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nerror assetNotCorrect();\\nerror notEnoughTokens();\\nerror notEnoughGas();\\nerror notEnoughTimePassed();\\nerror initialLiquidityAlreadyProvided();\\nerror addressNotCorrect();\\nerror amountTooBig();\\nerror needToCallExistingFunction();\\n\\n/**\\n * @title LiquidityPool\\n * @dev A decentralized liquidity pool contract for swapping assets and providing liquidity.\\n */\\ncontract LiquidityPool {\\n    // Events\\n    event priceChanged(address _asset, uint256 price);\\n    event liquidityAdded(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event liquidityRemoved(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event yieldFarmed(address indexed _address, uint256 _amount);\\n\\n    // Token Addresses\\n    address public assetOneAddress;\\n    address public assetTwoAddress;\\n\\n    // Liquidity and Yield (fees)\\n    uint256 public initialLiquidity;\\n    uint256 public liquidity;\\n    uint256 public yield;\\n    uint256 public swapFee = 1000000000000000;\\n    address public owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions only to the owner.\\n     */\\n    modifier onlyOwner() {\\n        msg.sender == owner;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\\n     * @param _assetOneAddress The address of the first asset.\\n     * @param _assetTwoAddress The address of the second asset.\\n     */\\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\\n        assetOneAddress = _assetOneAddress;\\n        assetTwoAddress = _assetTwoAddress;\\n        owner = msg.sender;\\n        swapFee = 1000000000000000; // 0.001 ether\\n    }\\n\\n    /**\\n     * @dev Function to change the swap fee. Only callable by the owner.\\n     * @param newSwapFee The new swap fee to set.\\n     */\\n    function changeSwapFee(uint256 newSwapFee) public onlyOwner {\\n        swapFee = newSwapFee;\\n    }\\n\\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\\n    mapping(address => uint256) public lpTokenQuantity;\\n\\n    /**\\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _assetOneAmount The amount of the first asset to add.\\n     * @param _assetTwoAmount The amount of the second asset to add.\\n     */\\n    function addInitialLiquidity(\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    ) public onlyOwner {\\n        if (initialLiquidityProvidedTime[owner] > 0) {\\n            revert initialLiquidityAlreadyProvided();\\n        }\\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\\n\\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetOneAmount\\n        );\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetTwoAmount\\n        );\\n\\n        // SET THE INITIAL LIQUIDITY\\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\\n        liquidity = initialLiquidity;\\n\\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\\n        lpTokenQuantity[msg.sender] = initialLiquidity;\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\\n    }\\n\\n    /**\\n     * @dev Function to add additional liquidity to the pool.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _asset The address of the first asset.\\n     * @param _secondAsset The address of the second asset.\\n     * @param _amount The amount of the first asset to add.\\n     */\\n    function addLiquidity(\\n        address _asset,\\n        address _secondAsset,\\n        uint256 _amount\\n    ) public noReentrancy {\\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\\n        IERC20(_secondAsset).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOfOppositeTokenNeeded(_asset, _amount)\\n        );\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n\\n        // give lp tokens to new liquidity provider\\n        lpTokenQuantity[msg.sender] += (_amount *\\n            amountOfOppositeTokenNeeded(_asset, _amount));\\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(\\n            msg.sender,\\n            amountOfOppositeTokenNeeded(_asset, _amount),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to remove liquidity from the pool.\\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\\n     */\\n    function removeLiquidity(uint256 _amount) public noReentrancy {\\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) /\\n            100; // How much out of their liquidity they want to withdraw in percentage\\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) /\\n            1 ether;\\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) /\\n            1 ether;\\n        // condition for owner, because of the initial liquidity timer\\n        if (\\n            (msg.sender == owner) &&\\n            (isTimeInitialLiquidity() == false) &&\\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) <\\n                initialLiquidity)\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\\n        if (\\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\\n\\n        // EMIT EVENT\\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\\n    }\\n\\n    /**\\n     * @dev Function to sell the first asset and receive the second asset.\\n     * @param _amount The amount of the first asset to sell.\\n     */\\n    function sellAssetOne(uint256 _amount) public payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetOne()) {\\n            payable(msg.sender).transfer(msg.value);\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetTwo();\\n        uint256 assetOne = getAssetOne() + _amount;\\n        uint256 assetTwo = liquidity / assetOne;\\n        uint256 result = n - assetTwo;\\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to sell the second asset and receive the first asset.\\n     * @param _amount The amount of the second asset to sell.\\n     */\\n    function sellAssetTwo(uint256 _amount) public payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetTwo()) {\\n            payable(msg.sender).transfer(msg.value); // Transfer value back\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetOne();\\n        uint256 assetTwo = getAssetTwo() + _amount;\\n        uint256 assetOne = liquidity / assetTwo;\\n        uint256 result = n - assetOne;\\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetOneAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to get the current balance of a given asset held by the contract.\\n     * @param _address The address of the asset.\\n     * @return The current balance of the asset.\\n     */\\n    function getAssetBalace(address _address) public view returns (uint256) {\\n        return IERC20(_address).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the first asset in terms of the second asset.\\n     * @return The current price of the first asset * 10**18.\\n     */\\n    function assetOnePrice() public view returns (uint256) {\\n        return (getAssetTwo() * 1 ether) / getAssetOne();\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the second asset in terms of the first asset.\\n     * @return The current price of the second asset * 10**18.\\n     */\\n    function assetTwoPrice() public view returns (uint256) {\\n        return (getAssetOne() * 1 ether) / getAssetTwo();\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the first asset held by the contract.\\n     * @return The current balance of the first asset.\\n     */\\n    function getAssetOne() public view returns (uint256) {\\n        return IERC20(assetOneAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the second asset held by the contract.\\n     * @return The current balance of the second asset.\\n     */\\n    function getAssetTwo() public view returns (uint256) {\\n        return IERC20(assetTwoAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\\n     * @param _address The address of the LP token holder.\\n     * @return The quantity of LP tokens owned by the address.\\n     */\\n    function getLpTokenQuantity(\\n        address _address\\n    ) public view returns (uint256) {\\n        if (msg.sender != owner && _address == msg.sender) {\\n            revert addressNotCorrect();\\n        }\\n        return lpTokenQuantity[_address];\\n    }\\n\\n    /**\\n     * @dev Function to get the total liquidity in the pool.\\n     * @return The total liquidity in the pool.\\n     */\\n    function getLiquidity() public view returns (uint256) {\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @dev Function to get the current swap fee percentage.\\n     * @return The current swap fee percentage.\\n     */\\n    function getSwapFee() public view returns (uint256) {\\n        return swapFee;\\n    }\\n\\n    /**\\n     * @dev Function to get the current ETH balance of the contract.\\n     * @return The current ETH balance of the contract.\\n     */\\n    function addressBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\\n     * @param sellingAsset The address of the asset being sold.\\n     * @param _amount The amount of the first asset being sold.\\n     * @return The quantity of the second asset that would be returned\\n     */\\n    function getSwapQuantity(\\n        address sellingAsset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        if (sellingAsset == assetOneAddress) {\\n            uint256 newAssetOne = getAssetOne() + _amount;\\n            uint256 newAssetTwo = liquidity / newAssetOne;\\n            return getAssetTwo() - newAssetTwo;\\n        } else if (sellingAsset == assetTwoAddress) {\\n            uint256 newAssetTwo = getAssetTwo() + _amount;\\n            uint256 newAssetOne = liquidity / newAssetTwo;\\n            return getAssetOne() - newAssetOne;\\n        } else {\\n            revert assetNotCorrect();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\\n     * @param _asset The address of the asset.\\n     * @param _amount The amount of the asset.\\n     * @return The quantity of the second asset needed for providing liquidity.\\n     */\\n    function amountOfOppositeTokenNeeded(\\n        address _asset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        uint256 ratio;\\n        if (_asset == assetOneAddress) {\\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\\n        } else {\\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\\n        }\\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\\n        return amountNeeded;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    // Yield Farming and Time Locks\\n\\n    // Daily yield tracking\\n    mapping(address => uint256) public yieldTaken;\\n\\n    /**\\n     * @dev Function to get the current yield amount available in the pool.\\n     * @return The current yield amount.\\n     */\\n    function yieldAmount() public view returns (uint256) {\\n        return yield;\\n    }\\n\\n    /**\\n     * @dev Function to allow users to claim their yield. Can be called once a day.\\n     */\\n    function getYield() public {\\n        if (isTime() == false) {\\n            revert notEnoughTimePassed();\\n        }\\n        lastYieldFarmedTime[msg.sender] = block.timestamp; // Reentrancy guard\\n        uint256 yieldSoFar = yieldTaken[msg.sender];\\n        uint256 userLiquidity = (lpTokenQuantity[msg.sender] * 100) / liquidity;\\n        uint256 availableYield = ((yield -\\n            ((yieldSoFar * 100) / userLiquidity)) * userLiquidity) / 100;\\n        if (availableYield > address(this).balance) {\\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[msg.sender] += availableYield;\\n        payable(msg.sender).transfer(availableYield);\\n\\n        // EMIT EVENT\\n        emit yieldFarmed(msg.sender, availableYield);\\n    }\\n\\n    // Timestamp mapping for yield farming\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n    mapping(address => uint256) public initialLiquidityProvidedTime;\\n\\n    /**\\n     * @dev Function to check if enough time has passed for the user to claim yield.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTime() public view returns (bool) {\\n        lastYieldFarmedTime[msg.sender];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTimeInitialLiquidity() public view returns (bool) {\\n        if (\\n            block.timestamp >\\n            (initialLiquidityProvidedTime[msg.sender] + 365 days)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    fallback() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    receive() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0x4bc005b7f88cb28d6d2937e3bb8d7b0bc2dec6cae097e58bc816832148ef479e\",\"license\":\"MIT\"},\"contracts/Dex/PoolTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror PoolTracker_noTokensDetected();\\nerror PoolTracker_pairAlreadyExists();\\nerror PoolTracker_addressNotAllowed();\\nerror PoolTracker_cantSwapSameToken();\\n\\n/**\\n * @title PoolTracker\\n * @dev Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem.\\n * Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions.\\n * Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\\n */\\ncontract PoolTracker {\\n    // The owner of the PoolTracker contract, set to the deployer.\\n    address owner;\\n\\n    // Constructor: Sets the contract deployer as the owner.\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    // Tracker for created pools, will add to database\\n    event poolCreated(LiquidityPool pool, address assetOne, address assetTwo);\\n\\n    // Mapping of pool Pairs, to store existing ones\\n    mapping(address => address[]) public poolPairs;\\n\\n    // Mapping a pool to the contracts, in case we wont store it in the database\\n    mapping(address => mapping(address => LiquidityPool)) public pairToPool;\\n\\n    // All the available tokens\\n    address[] public tokens;\\n\\n    // Mapping of pool per Owner\\n    mapping(address => LiquidityPool[]) public poolOwner;\\n\\n    /**\\n     * @dev Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial\\n     * transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings.\\n     * Emits a PoolCreated event upon successful creation.\\n     *\\n     * Requirements:\\n     * - The token pair must not already have an existing pool.\\n     * - The caller must have approved the contract to spend the necessary token amounts.\\n     *\\n     * @param _assetOneAddress The address of the first token in the pair.\\n     * @param _assetTwoAddress The address of the second token in the pair.\\n     * @param amountOne The amount of the first token to add to the pool.\\n     * @param amountTwo The amount of the second token to add to the pool.\\n     */\\n    function createPool(\\n        address _assetOneAddress,\\n        address _assetTwoAddress,\\n        uint256 amountOne,\\n        uint256 amountTwo\\n    ) external noReentrancy {\\n        if (\\n            exists(_assetOneAddress, _assetTwoAddress)\\n        ) // To prevent duplicate pools\\n        {\\n            revert PoolTracker_pairAlreadyExists();\\n        }\\n        // Transfer of tokens\\n        IERC20(_assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOne\\n        );\\n        IERC20(_assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountTwo\\n        );\\n        // Creation of pool\\n        LiquidityPool poolAddress = new LiquidityPool(\\n            _assetOneAddress,\\n            _assetTwoAddress\\n        );\\n        // Approve\\n        IERC20(_assetOneAddress).approve(address(poolAddress), amountOne);\\n        IERC20(_assetTwoAddress).approve(address(poolAddress), amountTwo);\\n        // Add initial liquidity\\n        poolAddress.addInitialLiquidity(amountOne, amountTwo);\\n        // Update mappings\\n        poolOwner[msg.sender].push(poolAddress);\\n        poolPairs[_assetOneAddress].push(_assetTwoAddress);\\n        poolPairs[_assetTwoAddress].push(_assetOneAddress);\\n        pairToPool[_assetOneAddress][_assetTwoAddress] = poolAddress;\\n        pairToPool[_assetTwoAddress][_assetOneAddress] = poolAddress;\\n\\n        if (tokenExists(_assetOneAddress) == false) {\\n            tokens.push(_assetOneAddress);\\n        }\\n        if (tokenExists(_assetTwoAddress) == false) {\\n            tokens.push(_assetTwoAddress);\\n        }\\n        // Emit the event\\n        emit poolCreated(poolAddress, _assetOneAddress, _assetTwoAddress);\\n    }\\n\\n    /**\\n     * @dev Checks if a liquidity pool exists for a given pair of tokens.\\n     *\\n     * @param token1 The address of the first token.\\n     * @param token2 The address of the second token.\\n     * @return bool Returns true if the pool exists, false otherwise.\\n     */\\n    function exists(address token1, address token2) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < poolPairs[token1].length; i++) {\\n            if (poolPairs[token1][i] == token2) {\\n                exist = true;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    /**\\n     * @dev Checks if a token is already tracked by the contract.\\n     *\\n     * @param tokenAddress The address of the token to check.\\n     * @return bool Returns true if the token is tracked, false otherwise.\\n     */\\n    function tokenExists(address tokenAddress) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokenAddress == tokens[i]) {\\n                exist = true;\\n                break;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    // Routing token\\n    struct routingAddress {\\n        address tokenAddress;\\n        address priceFeed;\\n    }\\n\\n    // Array of routing Tokens\\n    routingAddress[] public routingAddresses;\\n\\n    /**\\n     * @dev Allows the contract owner to add or update the routing address for a token.\\n     * This is used for token swaps and price feed lookups.\\n     *\\n     * @param tokenAddress The token for which to set the routing.\\n     * @param priceFeed The Chainlink price feed address for the token.\\n     */\\n    function addRoutingAddress(address tokenAddress, address priceFeed) public {\\n        if (msg.sender != owner) {\\n            revert PoolTracker_addressNotAllowed();\\n        }\\n        if (routingAddresses.length == 0) {\\n            routingAddresses.push(routingAddress(tokenAddress, priceFeed));\\n        } else {\\n            for (uint256 i = 0; i < routingAddresses.length; i++) {\\n                if (routingAddresses[i].tokenAddress == tokenAddress) {\\n                    routingAddresses[i] = routingAddress(\\n                        tokenAddress,\\n                        priceFeed\\n                    );\\n                    break;\\n                } else if (i == routingAddresses.length - 1) {\\n                    routingAddresses.push(\\n                        routingAddress(tokenAddress, priceFeed)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Determines the optimal routing token for a swap between two tokens,\\n     * based on available liquidity and price feeds.\\n     *\\n     * @param address1 The address of the first token.\\n     * @param address2 The address of the second token.\\n     * @return address The address of the optimal routing token.\\n     */\\n    function tokenToRoute(\\n        address address1,\\n        address address2\\n    ) public view returns (address) {\\n        if (address1 == address2) {\\n            revert PoolTracker_cantSwapSameToken();\\n        }\\n        address[] memory token1pairs = poolPairs[address1];\\n        address[] memory token2pairs = poolPairs[address2];\\n\\n        address routingToken;\\n        int routingTokenLiquidity;\\n\\n        for (uint256 i; i < token1pairs.length; i++) {\\n            for (uint256 a; a < token2pairs.length; a++) {\\n                if (token1pairs[i] == token2pairs[a]) {\\n                    for (uint256 b; b < routingAddresses.length; b++) {\\n                        if (\\n                            routingAddresses[b].tokenAddress == token1pairs[i]\\n                        ) {\\n                            (, int answer, , , ) = AggregatorV3Interface(\\n                                routingAddresses[b].priceFeed\\n                            ).latestRoundData();\\n                            int liquidity;\\n                            LiquidityPool pool1 = pairToPool[address1][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            LiquidityPool pool2 = pairToPool[address2][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            uint256 balance1 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool1));\\n                            uint256 balance2 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool2));\\n                            liquidity =\\n                                (int(balance1) + int(balance2)) *\\n                                answer;\\n                            if (liquidity > routingTokenLiquidity) {\\n                                // Best choice so far if the liquidity is bigger than previous best token\\n                                routingToken = routingAddresses[b].tokenAddress;\\n                                routingTokenLiquidity = liquidity;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return routingToken;\\n    }\\n\\n    /**\\n     * @dev Returns all array of all tradable tokens on the platform\\n     *\\n     * @return array Returns tokens array.\\n     */\\n    function tokenList() public view returns (address[] memory) {\\n        return tokens;\\n    }\\n}\\n\",\"keccak256\":\"0x76fe8fa772abb7406c978b9e4d76b0fc286476f73e6ccd72e43c402f72380a6a\",\"license\":\"MIT\"},\"contracts/Dex/WeaveSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing required contracts and interfaces\\nimport \\\"./PoolTracker.sol\\\";\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n// Error declaration for unswappable token pairs\\nerror SwapRouter_tokensCantBeSwapped();\\nerror SwapRouter_needToCallExistingFunction();\\n\\n/**\\n * @title SwapRouter\\n * @dev Facilitates token swaps utilizing defined liquidity pools, offering direct swaps and routed swaps through an intermediary.\\n * Leverages the PoolTracker contract to access liquidity pool information and perform asset exchanges.\\n */\\ncontract SwapRouter {\\n    // Emitted after a successful token swap\\n    event swap(\\n        address userAddress,\\n        address address1,\\n        address address2,\\n        uint256 address1Amount,\\n        uint256 address2Amount\\n    );\\n\\n    // Reference to the PoolTracker contract for pool operations\\n    PoolTracker poolTracker;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @param tracker Address of the PoolTracker contract instance.\\n     */\\n    constructor(address tracker) {\\n        poolTracker = PoolTracker(tracker);\\n    }\\n\\n    /**\\n     * @notice Swaps `inputAmount` of `address1` tokens for `address2` tokens.\\n     * @dev This function supports direct swaps between tokens in a single pool or routed swaps through an intermediary token.\\n     * Uses PoolTracker to determine the best swap path and perform the exchange.\\n     * @param address1 The token being sold by the user.\\n     * @param address2 The token being purchased by the user.\\n     * @param inputAmount The amount of `address1` tokens to swap.\\n     */\\n    function swapAsset(\\n        address address1,\\n        address address2,\\n        uint256 inputAmount\\n    ) public payable noReentrancy {\\n        if (poolTracker.exists(address1, address2)) {\\n            // Direct swap scenario\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            uint256 startingBalanceAddress2 = IERC20(address2).balanceOf(\\n                address(this)\\n            );\\n            if (pool.assetOneAddress() == address1) {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool), inputAmount);\\n                pool.sellAssetOne{value: pool.swapFee()}(inputAmount);\\n            } else {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool), inputAmount);\\n                pool.sellAssetTwo{value: pool.swapFee()}(inputAmount);\\n            }\\n            uint256 amountOutput = IERC20(address2).balanceOf(address(this)) -\\n                startingBalanceAddress2;\\n            IERC20(address2).transfer(msg.sender, amountOutput);\\n            // Unrequired fee\\n            uint256 unrequiredFee = msg.value - pool.swapFee(); // In case the msg.sender sent more value than it is required\\n            (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\\n            // Routed swap scenario\\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(\\n                address1,\\n                routingToken\\n            );\\n            LiquidityPool pool2 = poolTracker.pairToPool(\\n                address2,\\n                routingToken\\n            );\\n            uint256 startingBalance = IERC20(routingToken).balanceOf(\\n                address(this)\\n            );\\n            uint256 startingBalance2 = IERC20(address2).balanceOf(\\n                address(this)\\n            );\\n            //SWAP 1, input token into routing  token\\n            if (pool1.assetOneAddress() == address1) {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool1), inputAmount);\\n                pool1.sellAssetOne{value: pool1.swapFee()}(inputAmount);\\n            } else {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool1), inputAmount);\\n                pool1.sellAssetTwo{value: pool1.swapFee()}(inputAmount);\\n            }\\n            //SWAP 2, routing token into output token\\n            uint256 routingTokenInput = IERC20(routingToken).balanceOf(\\n                address(this)\\n            ) - startingBalance;\\n            if (pool2.assetOneAddress() == address1) {\\n                IERC20(routingToken).approve(address(pool2), routingTokenInput);\\n                pool2.sellAssetOne{value: pool2.swapFee()}(routingTokenInput);\\n            } else {\\n                IERC20(routingToken).approve(address(pool2), routingTokenInput);\\n                pool2.sellAssetTwo{value: pool2.swapFee()}(routingTokenInput);\\n            }\\n            uint256 address2Output = IERC20(address2).balanceOf(address(this)) -\\n                startingBalance2;\\n            IERC20(address2).transfer(msg.sender, address2Output);\\n            // Unrequired fee\\n            uint256 unrequiredFee = msg.value -\\n                pool1.swapFee() -\\n                pool2.swapFee(); // In case the msg.sender sent more value than it is required\\n            (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n    }\\n\\n    /**\\n     * @notice Estimates the output amount for a swap from `address1` to `address2` given an `inputAmount` of `address1`.\\n     * @dev Considers direct swaps and routed swaps through an intermediary token, utilizing PoolTracker for calculations.\\n     * @param address1 The token being sold.\\n     * @param address2 The token being bought.\\n     * @param inputAmount The amount of `address1` tokens to swap.\\n     * @return output The estimated amount of `address2` tokens to be received.\\n     */\\n    function getSwapAmount(\\n        address address1,\\n        address address2,\\n        uint256 inputAmount\\n    ) public view returns (uint256) {\\n        uint256 output;\\n        if (poolTracker.exists(address1, address2)) {\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            output = pool.getSwapQuantity(address1, inputAmount);\\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(\\n                address1,\\n                routingToken\\n            );\\n            LiquidityPool pool2 = poolTracker.pairToPool(\\n                address2,\\n                routingToken\\n            );\\n            uint256 routingOutput = pool1.getSwapQuantity(\\n                address1,\\n                inputAmount\\n            );\\n            output = pool2.getSwapQuantity(routingToken, routingOutput);\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     */\\n    fallback() external payable {}\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xc4d0a049ade1b7e4ab45ff1e7d56b410a93d39b98382999a9de3102a085b222d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620026ce380380620026ce8339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b6125a4806200012a6000396000f3fe60806040526004361061002d5760003560e01c8063635bc0c214610036578063fe9f5c051461007357610034565b3661003457005b005b34801561004257600080fd5b5061005d60048036038101906100589190612146565b61008f565b60405161006a91906121a8565b60405180910390f35b61008d60048036038101906100889190612146565b6106d6565b005b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82286866040518363ffffffff1660e01b81526004016100ed9291906121d2565b60206040518083038186803b15801561010557600080fd5b505afa158015610119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013d9190612233565b156102855760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6887876040518363ffffffff1660e01b81526004016101a09291906121d2565b60206040518083038186803b1580156101b857600080fd5b505afa1580156101cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f091906122b0565b90508073ffffffffffffffffffffffffffffffffffffffff166328da1aef87866040518363ffffffff1660e01b815260040161022d9291906122dd565b60206040518083038186803b15801561024557600080fd5b505afa158015610259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027d919061231b565b9150506106cb565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b81526004016102f89291906121d2565b60206040518083038186803b15801561031057600080fd5b505afa158015610324573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610348919061235d565b73ffffffffffffffffffffffffffffffffffffffff16146106985760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b81526004016103c19291906121d2565b60206040518083038186803b1580156103d957600080fd5b505afa1580156103ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610411919061235d565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888846040518363ffffffff1660e01b81526004016104719291906121d2565b60206040518083038186803b15801561048957600080fd5b505afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c191906122b0565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b81526004016105219291906121d2565b60206040518083038186803b15801561053957600080fd5b505afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057191906122b0565b905060008273ffffffffffffffffffffffffffffffffffffffff166328da1aef8a896040518363ffffffff1660e01b81526004016105b09291906122dd565b60206040518083038186803b1580156105c857600080fd5b505afa1580156105dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610600919061231b565b90508173ffffffffffffffffffffffffffffffffffffffff166328da1aef85836040518363ffffffff1660e01b815260040161063d9291906122dd565b60206040518083038186803b15801561065557600080fd5b505afa158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d919061231b565b9450505050506106ca565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b809150509392505050565b600060149054906101000a900460ff1615610726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071d906123e7565b60405180910390fd5b6001600060146101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82284846040518363ffffffff1660e01b815260040161079c9291906121d2565b60206040518083038186803b1580156107b457600080fd5b505afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec9190612233565b1561105c5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b815260040161084f9291906121d2565b60206040518083038186803b15801561086757600080fd5b505afa15801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f91906122b0565b905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108dc9190612407565b60206040518083038186803b1580156108f457600080fd5b505afa158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c919061231b565b90508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b15801561098b57600080fd5b505afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c3919061235d565b73ffffffffffffffffffffffffffffffffffffffff161415610beb578473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610a1c93929190612422565b602060405180830381600087803b158015610a3657600080fd5b505af1158015610a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6e9190612233565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b8152600401610aaa9291906122dd565b602060405180830381600087803b158015610ac457600080fd5b505af1158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc9190612233565b508173ffffffffffffffffffffffffffffffffffffffff16634257dc4c8373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5f57600080fd5b505afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b97919061231b565b856040518363ffffffff1660e01b8152600401610bb491906121a8565b6000604051808303818588803b158015610bcd57600080fd5b505af1158015610be1573d6000803e3d6000fd5b5050505050610df3565b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610c2893929190612422565b602060405180830381600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a9190612233565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b8152600401610cb69291906122dd565b602060405180830381600087803b158015610cd057600080fd5b505af1158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d089190612233565b508173ffffffffffffffffffffffffffffffffffffffff1663dc1716248373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6b57600080fd5b505afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da3919061231b565b856040518363ffffffff1660e01b8152600401610dc091906121a8565b6000604051808303818588803b158015610dd957600080fd5b505af1158015610ded573d6000803e3d6000fd5b50505050505b6000818573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e2f9190612407565b60206040518083038186803b158015610e4757600080fd5b505afa158015610e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7f919061231b565b610e899190612488565b90508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ec69291906122dd565b602060405180830381600087803b158015610ee057600080fd5b505af1158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f189190612233565b5060008373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6157600080fd5b505afa158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f99919061231b565b34610fa49190612488565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610fcc906124ed565b60006040518083038185875af1925050503d8060008114611009576040519150601f19603f3d011682016040523d82523d6000602084013e61100e565b606091505b5050905080611052576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110499061254e565b60405180910390fd5b505050505061208e565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b81526004016110cf9291906121d2565b60206040518083038186803b1580156110e757600080fd5b505afa1580156110fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111f919061235d565b73ffffffffffffffffffffffffffffffffffffffff161461205b5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b81526004016111989291906121d2565b60206040518083038186803b1580156111b057600080fd5b505afa1580156111c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e8919061235d565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886846040518363ffffffff1660e01b81526004016112489291906121d2565b60206040518083038186803b15801561126057600080fd5b505afa158015611274573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129891906122b0565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886856040518363ffffffff1660e01b81526004016112f89291906121d2565b60206040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134891906122b0565b905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113859190612407565b60206040518083038186803b15801561139d57600080fd5b505afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d5919061231b565b905060008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114129190612407565b60206040518083038186803b15801561142a57600080fd5b505afa15801561143e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611462919061231b565b90508773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b1580156114c157600080fd5b505afa1580156114d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f9919061235d565b73ffffffffffffffffffffffffffffffffffffffff161415611721578773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161155293929190612422565b602060405180830381600087803b15801561156c57600080fd5b505af1158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a49190612233565b508773ffffffffffffffffffffffffffffffffffffffff1663095ea7b385886040518363ffffffff1660e01b81526004016115e09291906122dd565b602060405180830381600087803b1580156115fa57600080fd5b505af115801561160e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116329190612233565b508373ffffffffffffffffffffffffffffffffffffffff16634257dc4c8573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561169557600080fd5b505afa1580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd919061231b565b886040518363ffffffff1660e01b81526004016116ea91906121a8565b6000604051808303818588803b15801561170357600080fd5b505af1158015611717573d6000803e3d6000fd5b5050505050611929565b8773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161175e93929190612422565b602060405180830381600087803b15801561177857600080fd5b505af115801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b09190612233565b508773ffffffffffffffffffffffffffffffffffffffff1663095ea7b385886040518363ffffffff1660e01b81526004016117ec9291906122dd565b602060405180830381600087803b15801561180657600080fd5b505af115801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e9190612233565b508373ffffffffffffffffffffffffffffffffffffffff1663dc1716248573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118a157600080fd5b505afa1580156118b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d9919061231b565b886040518363ffffffff1660e01b81526004016118f691906121a8565b6000604051808303818588803b15801561190f57600080fd5b505af1158015611923573d6000803e3d6000fd5b50505050505b6000828673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119659190612407565b60206040518083038186803b15801561197d57600080fd5b505afa158015611991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b5919061231b565b6119bf9190612488565b90508873ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1e57600080fd5b505afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a56919061235d565b73ffffffffffffffffffffffffffffffffffffffff161415611bee578573ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401611aad9291906122dd565b602060405180830381600087803b158015611ac757600080fd5b505af1158015611adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aff9190612233565b508373ffffffffffffffffffffffffffffffffffffffff16634257dc4c8573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b6257600080fd5b505afa158015611b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9a919061231b565b836040518363ffffffff1660e01b8152600401611bb791906121a8565b6000604051808303818588803b158015611bd057600080fd5b505af1158015611be4573d6000803e3d6000fd5b5050505050611d66565b8573ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401611c299291906122dd565b602060405180830381600087803b158015611c4357600080fd5b505af1158015611c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7b9190612233565b508373ffffffffffffffffffffffffffffffffffffffff1663dc1716248573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cde57600080fd5b505afa158015611cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d16919061231b565b836040518363ffffffff1660e01b8152600401611d3391906121a8565b6000604051808303818588803b158015611d4c57600080fd5b505af1158015611d60573d6000803e3d6000fd5b50505050505b6000828973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611da29190612407565b60206040518083038186803b158015611dba57600080fd5b505afa158015611dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df2919061231b565b611dfc9190612488565b90508873ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611e399291906122dd565b602060405180830381600087803b158015611e5357600080fd5b505af1158015611e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8b9190612233565b5060008573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ed457600080fd5b505afa158015611ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0c919061231b565b8773ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f5257600080fd5b505afa158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a919061231b565b34611f959190612488565b611f9f9190612488565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051611fc7906124ed565b60006040518083038185875af1925050503d8060008114612004576040519150601f19603f3d011682016040523d82523d6000602084013e612009565b606091505b505090508061204d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120449061254e565b60405180910390fd5b50505050505050505061208d565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b60008060146101000a81548160ff021916908315150217905550505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120dd826120b2565b9050919050565b6120ed816120d2565b81146120f857600080fd5b50565b60008135905061210a816120e4565b92915050565b6000819050919050565b61212381612110565b811461212e57600080fd5b50565b6000813590506121408161211a565b92915050565b60008060006060848603121561215f5761215e6120ad565b5b600061216d868287016120fb565b935050602061217e868287016120fb565b925050604061218f86828701612131565b9150509250925092565b6121a281612110565b82525050565b60006020820190506121bd6000830184612199565b92915050565b6121cc816120d2565b82525050565b60006040820190506121e760008301856121c3565b6121f460208301846121c3565b9392505050565b60008115159050919050565b612210816121fb565b811461221b57600080fd5b50565b60008151905061222d81612207565b92915050565b600060208284031215612249576122486120ad565b5b60006122578482850161221e565b91505092915050565b600061226b826120b2565b9050919050565b600061227d82612260565b9050919050565b61228d81612272565b811461229857600080fd5b50565b6000815190506122aa81612284565b92915050565b6000602082840312156122c6576122c56120ad565b5b60006122d48482850161229b565b91505092915050565b60006040820190506122f260008301856121c3565b6122ff6020830184612199565b9392505050565b6000815190506123158161211a565b92915050565b600060208284031215612331576123306120ad565b5b600061233f84828501612306565b91505092915050565b600081519050612357816120e4565b92915050565b600060208284031215612373576123726120ad565b5b600061238184828501612348565b91505092915050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b60006123d1600e8361238a565b91506123dc8261239b565b602082019050919050565b60006020820190508181036000830152612400816123c4565b9050919050565b600060208201905061241c60008301846121c3565b92915050565b600060608201905061243760008301866121c3565b61244460208301856121c3565b6124516040830184612199565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061249382612110565b915061249e83612110565b9250828210156124b1576124b0612459565b5b828203905092915050565b600081905092915050565b50565b60006124d76000836124bc565b91506124e2826124c7565b600082019050919050565b60006124f8826124ca565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b600061253860148361238a565b915061254382612502565b602082019050919050565b600060208201905081810360008301526125678161252b565b905091905056fea2646970667358221220d8a664d5a824f0d0b0773710e4e28005e2de6f1c973e60f16fa83acc8c9325ec64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061002d5760003560e01c8063635bc0c214610036578063fe9f5c051461007357610034565b3661003457005b005b34801561004257600080fd5b5061005d60048036038101906100589190612146565b61008f565b60405161006a91906121a8565b60405180910390f35b61008d60048036038101906100889190612146565b6106d6565b005b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82286866040518363ffffffff1660e01b81526004016100ed9291906121d2565b60206040518083038186803b15801561010557600080fd5b505afa158015610119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013d9190612233565b156102855760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6887876040518363ffffffff1660e01b81526004016101a09291906121d2565b60206040518083038186803b1580156101b857600080fd5b505afa1580156101cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f091906122b0565b90508073ffffffffffffffffffffffffffffffffffffffff166328da1aef87866040518363ffffffff1660e01b815260040161022d9291906122dd565b60206040518083038186803b15801561024557600080fd5b505afa158015610259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027d919061231b565b9150506106cb565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b81526004016102f89291906121d2565b60206040518083038186803b15801561031057600080fd5b505afa158015610324573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610348919061235d565b73ffffffffffffffffffffffffffffffffffffffff16146106985760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b81526004016103c19291906121d2565b60206040518083038186803b1580156103d957600080fd5b505afa1580156103ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610411919061235d565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888846040518363ffffffff1660e01b81526004016104719291906121d2565b60206040518083038186803b15801561048957600080fd5b505afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c191906122b0565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b81526004016105219291906121d2565b60206040518083038186803b15801561053957600080fd5b505afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057191906122b0565b905060008273ffffffffffffffffffffffffffffffffffffffff166328da1aef8a896040518363ffffffff1660e01b81526004016105b09291906122dd565b60206040518083038186803b1580156105c857600080fd5b505afa1580156105dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610600919061231b565b90508173ffffffffffffffffffffffffffffffffffffffff166328da1aef85836040518363ffffffff1660e01b815260040161063d9291906122dd565b60206040518083038186803b15801561065557600080fd5b505afa158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d919061231b565b9450505050506106ca565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b809150509392505050565b600060149054906101000a900460ff1615610726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071d906123e7565b60405180910390fd5b6001600060146101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82284846040518363ffffffff1660e01b815260040161079c9291906121d2565b60206040518083038186803b1580156107b457600080fd5b505afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec9190612233565b1561105c5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b815260040161084f9291906121d2565b60206040518083038186803b15801561086757600080fd5b505afa15801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f91906122b0565b905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108dc9190612407565b60206040518083038186803b1580156108f457600080fd5b505afa158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c919061231b565b90508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b15801561098b57600080fd5b505afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c3919061235d565b73ffffffffffffffffffffffffffffffffffffffff161415610beb578473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610a1c93929190612422565b602060405180830381600087803b158015610a3657600080fd5b505af1158015610a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6e9190612233565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b8152600401610aaa9291906122dd565b602060405180830381600087803b158015610ac457600080fd5b505af1158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc9190612233565b508173ffffffffffffffffffffffffffffffffffffffff16634257dc4c8373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5f57600080fd5b505afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b97919061231b565b856040518363ffffffff1660e01b8152600401610bb491906121a8565b6000604051808303818588803b158015610bcd57600080fd5b505af1158015610be1573d6000803e3d6000fd5b5050505050610df3565b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610c2893929190612422565b602060405180830381600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a9190612233565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b8152600401610cb69291906122dd565b602060405180830381600087803b158015610cd057600080fd5b505af1158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d089190612233565b508173ffffffffffffffffffffffffffffffffffffffff1663dc1716248373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6b57600080fd5b505afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da3919061231b565b856040518363ffffffff1660e01b8152600401610dc091906121a8565b6000604051808303818588803b158015610dd957600080fd5b505af1158015610ded573d6000803e3d6000fd5b50505050505b6000818573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e2f9190612407565b60206040518083038186803b158015610e4757600080fd5b505afa158015610e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7f919061231b565b610e899190612488565b90508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ec69291906122dd565b602060405180830381600087803b158015610ee057600080fd5b505af1158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f189190612233565b5060008373ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6157600080fd5b505afa158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f99919061231b565b34610fa49190612488565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610fcc906124ed565b60006040518083038185875af1925050503d8060008114611009576040519150601f19603f3d011682016040523d82523d6000602084013e61100e565b606091505b5050905080611052576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110499061254e565b60405180910390fd5b505050505061208e565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b81526004016110cf9291906121d2565b60206040518083038186803b1580156110e757600080fd5b505afa1580156110fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111f919061235d565b73ffffffffffffffffffffffffffffffffffffffff161461205b5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b81526004016111989291906121d2565b60206040518083038186803b1580156111b057600080fd5b505afa1580156111c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e8919061235d565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886846040518363ffffffff1660e01b81526004016112489291906121d2565b60206040518083038186803b15801561126057600080fd5b505afa158015611274573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129891906122b0565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886856040518363ffffffff1660e01b81526004016112f89291906121d2565b60206040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134891906122b0565b905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113859190612407565b60206040518083038186803b15801561139d57600080fd5b505afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d5919061231b565b905060008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114129190612407565b60206040518083038186803b15801561142a57600080fd5b505afa15801561143e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611462919061231b565b90508773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b1580156114c157600080fd5b505afa1580156114d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f9919061235d565b73ffffffffffffffffffffffffffffffffffffffff161415611721578773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161155293929190612422565b602060405180830381600087803b15801561156c57600080fd5b505af1158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a49190612233565b508773ffffffffffffffffffffffffffffffffffffffff1663095ea7b385886040518363ffffffff1660e01b81526004016115e09291906122dd565b602060405180830381600087803b1580156115fa57600080fd5b505af115801561160e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116329190612233565b508373ffffffffffffffffffffffffffffffffffffffff16634257dc4c8573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561169557600080fd5b505afa1580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd919061231b565b886040518363ffffffff1660e01b81526004016116ea91906121a8565b6000604051808303818588803b15801561170357600080fd5b505af1158015611717573d6000803e3d6000fd5b5050505050611929565b8773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161175e93929190612422565b602060405180830381600087803b15801561177857600080fd5b505af115801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b09190612233565b508773ffffffffffffffffffffffffffffffffffffffff1663095ea7b385886040518363ffffffff1660e01b81526004016117ec9291906122dd565b602060405180830381600087803b15801561180657600080fd5b505af115801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e9190612233565b508373ffffffffffffffffffffffffffffffffffffffff1663dc1716248573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118a157600080fd5b505afa1580156118b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d9919061231b565b886040518363ffffffff1660e01b81526004016118f691906121a8565b6000604051808303818588803b15801561190f57600080fd5b505af1158015611923573d6000803e3d6000fd5b50505050505b6000828673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119659190612407565b60206040518083038186803b15801561197d57600080fd5b505afa158015611991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b5919061231b565b6119bf9190612488565b90508873ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1e57600080fd5b505afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a56919061235d565b73ffffffffffffffffffffffffffffffffffffffff161415611bee578573ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401611aad9291906122dd565b602060405180830381600087803b158015611ac757600080fd5b505af1158015611adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aff9190612233565b508373ffffffffffffffffffffffffffffffffffffffff16634257dc4c8573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b6257600080fd5b505afa158015611b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9a919061231b565b836040518363ffffffff1660e01b8152600401611bb791906121a8565b6000604051808303818588803b158015611bd057600080fd5b505af1158015611be4573d6000803e3d6000fd5b5050505050611d66565b8573ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401611c299291906122dd565b602060405180830381600087803b158015611c4357600080fd5b505af1158015611c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7b9190612233565b508373ffffffffffffffffffffffffffffffffffffffff1663dc1716248573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cde57600080fd5b505afa158015611cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d16919061231b565b836040518363ffffffff1660e01b8152600401611d3391906121a8565b6000604051808303818588803b158015611d4c57600080fd5b505af1158015611d60573d6000803e3d6000fd5b50505050505b6000828973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611da29190612407565b60206040518083038186803b158015611dba57600080fd5b505afa158015611dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df2919061231b565b611dfc9190612488565b90508873ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611e399291906122dd565b602060405180830381600087803b158015611e5357600080fd5b505af1158015611e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8b9190612233565b5060008573ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ed457600080fd5b505afa158015611ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0c919061231b565b8773ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f5257600080fd5b505afa158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a919061231b565b34611f959190612488565b611f9f9190612488565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051611fc7906124ed565b60006040518083038185875af1925050503d8060008114612004576040519150601f19603f3d011682016040523d82523d6000602084013e612009565b606091505b505090508061204d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120449061254e565b60405180910390fd5b50505050505050505061208d565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b60008060146101000a81548160ff021916908315150217905550505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120dd826120b2565b9050919050565b6120ed816120d2565b81146120f857600080fd5b50565b60008135905061210a816120e4565b92915050565b6000819050919050565b61212381612110565b811461212e57600080fd5b50565b6000813590506121408161211a565b92915050565b60008060006060848603121561215f5761215e6120ad565b5b600061216d868287016120fb565b935050602061217e868287016120fb565b925050604061218f86828701612131565b9150509250925092565b6121a281612110565b82525050565b60006020820190506121bd6000830184612199565b92915050565b6121cc816120d2565b82525050565b60006040820190506121e760008301856121c3565b6121f460208301846121c3565b9392505050565b60008115159050919050565b612210816121fb565b811461221b57600080fd5b50565b60008151905061222d81612207565b92915050565b600060208284031215612249576122486120ad565b5b60006122578482850161221e565b91505092915050565b600061226b826120b2565b9050919050565b600061227d82612260565b9050919050565b61228d81612272565b811461229857600080fd5b50565b6000815190506122aa81612284565b92915050565b6000602082840312156122c6576122c56120ad565b5b60006122d48482850161229b565b91505092915050565b60006040820190506122f260008301856121c3565b6122ff6020830184612199565b9392505050565b6000815190506123158161211a565b92915050565b600060208284031215612331576123306120ad565b5b600061233f84828501612306565b91505092915050565b600081519050612357816120e4565b92915050565b600060208284031215612373576123726120ad565b5b600061238184828501612348565b91505092915050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b60006123d1600e8361238a565b91506123dc8261239b565b602082019050919050565b60006020820190508181036000830152612400816123c4565b9050919050565b600060208201905061241c60008301846121c3565b92915050565b600060608201905061243760008301866121c3565b61244460208301856121c3565b6124516040830184612199565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061249382612110565b915061249e83612110565b9250828210156124b1576124b0612459565b5b828203905092915050565b600081905092915050565b50565b60006124d76000836124bc565b91506124e2826124c7565b600082019050919050565b60006124f8826124ca565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b600061253860148361238a565b915061254382612502565b602082019050919050565b600060208201905081810360008301526125678161252b565b905091905056fea2646970667358221220d8a664d5a824f0d0b0773710e4e28005e2de6f1c973e60f16fa83acc8c9325ec64736f6c63430008090033",
  "devdoc": {
    "details": "Facilitates token swaps utilizing defined liquidity pools, offering direct swaps and routed swaps through an intermediary. Leverages the PoolTracker contract to access liquidity pool information and perform asset exchanges.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "tracker": "Address of the PoolTracker contract instance."
        }
      },
      "getSwapAmount(address,address,uint256)": {
        "details": "Considers direct swaps and routed swaps through an intermediary token, utilizing PoolTracker for calculations.",
        "params": {
          "address1": "The token being sold.",
          "address2": "The token being bought.",
          "inputAmount": "The amount of `address1` tokens to swap."
        },
        "returns": {
          "_0": "output The estimated amount of `address2` tokens to be received."
        }
      },
      "swapAsset(address,address,uint256)": {
        "details": "This function supports direct swaps between tokens in a single pool or routed swaps through an intermediary token. Uses PoolTracker to determine the best swap path and perform the exchange.",
        "params": {
          "address1": "The token being sold by the user.",
          "address2": "The token being purchased by the user.",
          "inputAmount": "The amount of `address1` tokens to swap."
        }
      }
    },
    "title": "SwapRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getSwapAmount(address,address,uint256)": {
        "notice": "Estimates the output amount for a swap from `address1` to `address2` given an `inputAmount` of `address1`."
      },
      "swapAsset(address,address,uint256)": {
        "notice": "Swaps `inputAmount` of `address1` tokens for `address2` tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2908,
        "contract": "contracts/Dex/WeaveSwap.sol:SwapRouter",
        "label": "poolTracker",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PoolTracker)2883"
      },
      {
        "astId": 2910,
        "contract": "contracts/Dex/WeaveSwap.sol:SwapRouter",
        "label": "locked",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(PoolTracker)2883": {
        "encoding": "inplace",
        "label": "contract PoolTracker",
        "numberOfBytes": "20"
      }
    }
  }
}