{
  "address": "0xf95269C39EBaF3D75d3Fa67E2cCeDcB791507D28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lendingTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BorrowingTracker_AmountOfCollateralTokenTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowingTracker_AmountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lendingTracker_addressNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lendingTracker_amountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lendingTracker_poolNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lendingTracker_receiptDoesntExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lending_addressNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "terminator",
          "type": "address"
        }
      ],
      "name": "collateralTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        }
      ],
      "name": "userReturnedBorrowedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userStakedCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userUnstakedCollateral",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "accruedInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "addSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSwapToken",
          "type": "address"
        }
      ],
      "name": "addSwapToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowReceiptData",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowingId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBorrowedReceipts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBorrowedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getCollateralTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingTracker",
      "outputs": [
        {
          "internalType": "contract LendingTracker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "additionalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidityTreshold",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ltv",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "returnBorrowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "stakeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract SwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "terminateCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "unstakeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBorrowReceipts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x571512c40c99cb33a03983eae91f2a008b58b3e4ec62d6bf48296a1120b9dbdd",
  "receipt": {
    "to": null,
    "from": "0x540467feca43907A701311D0721df481D1f9e238",
    "contractAddress": "0xf95269C39EBaF3D75d3Fa67E2cCeDcB791507D28",
    "transactionIndex": 0,
    "gasUsed": "5098304",
    "logsBloom": "0x
    "blockHash": "0xfbe7991da7f382abb303d5bbf944069d34d48a4c02f415adc1097a0f0e1c7ee5",
    "transactionHash": "0x571512c40c99cb33a03983eae91f2a008b58b3e4ec62d6bf48296a1120b9dbdd",
    "logs": [],
    "blockNumber": 38280436,
    "cumulativeGasUsed": "5098304",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe521B7430f161D85Bcd629Fb5Aef377249E042f5",
    "0xC0E280A27D717cC55Df6625339a6185bc5fB7625"
  ],
  "numDeployments": 3,
  "solcInputHash": "a491286b4e87cc4d72fac35e4211eb53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BorrowingTracker_AmountOfCollateralTokenTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowingTracker_AmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lendingTracker_addressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lendingTracker_amountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lendingTracker_poolNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lendingTracker_receiptDoesntExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lending_addressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"terminator\",\"type\":\"address\"}],\"name\":\"collateralTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"userReturnedBorrowedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userStakedCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userUnstakedCollateral\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"accruedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"addSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapToken\",\"type\":\"address\"}],\"name\":\"addSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowReceiptData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"borrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBorrowedReceipts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBorrowedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCollateralTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingTracker\",\"outputs\":[{\"internalType\":\"contract LendingTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"additionalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"liquidityTreshold\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ltv\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"returnBorrowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"stakeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract SwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"terminateCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"unstakeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBorrowReceipts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages lending, borrowing, and collateral operations for a decentralized finance platform. Utilizes external price feeds for valuation and includes functionality for yield farming. This contract is responsible for tracking user interactions with lending pools and their collateralized positions.\",\"kind\":\"dev\",\"methods\":{\"accruedInterest(uint256,address,uint256)\":{\"details\":\"Calculates interest based on the borrowing APY and time elapsed since the token was borrowed.\",\"params\":{\"_id\":\"The unique identifier of the borrow receipt.\",\"_user\":\"The address of the borrower.\",\"tokenAmount\":\"The amount of the borrowed token being returned.\"},\"returns\":{\"_0\":\"uint256 The accrued interest.\"}},\"addSwapRouter(address)\":{\"details\":\"Only the owner can call this function.\",\"params\":{\"_swapRouter\":\"The address of the new SwapRouter contract.\"}},\"addSwapToken(address)\":{\"details\":\"Only the owner can call this function.\",\"params\":{\"newSwapToken\":\"The address of the new swap token.\"}},\"borrowToken(address,uint256)\":{\"details\":\"The function checks for sufficient liquidity and adherence to the loan-to-value (LTV) ratio before permitting the borrow. Updates the user's borrow receipts to keep track of the borrowed amount and terms.\",\"params\":{\"tokenAddress\":\"The address of the token the user wishes to borrow.\",\"tokenAmount\":\"The amount of tokens the user wants to borrow.\"}},\"getBorrowedReceipts(address)\":{\"params\":{\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"uint256[] An array of borrow receipt IDs.\"}},\"getBorrowedTokens(address)\":{\"params\":{\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"address[] An array of borrowed token addresses.\"}},\"getCollateralTokens(address)\":{\"params\":{\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"address[] An array of collateral token addresses.\"}},\"liquidityTreshold(address,address,uint256)\":{\"details\":\"Used to determine if a user's borrowings are within permissible limits. Can also factor in an additional amount being borrowed or provided as collateral.\",\"params\":{\"additionalTokenAddress\":\"Optionally, the address of a token being considered for borrowing/collateral.\",\"tokenAmount\":\"Optionally, the amount of the additional token being considered.\",\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"The LTV ratio as a percentage.\"}},\"returnBorrowedToken(uint256,uint256)\":{\"details\":\"Calculates interest based on the borrowing APY and time elapsed since the token was borrowed.\",\"params\":{\"id\":\"The unique identifier of the borrow receipt.\",\"tokenAmount\":\"The amount of the borrowed token being returned.\"}},\"stakeCollateral(address,uint256)\":{\"details\":\"Transfers tokens from the user to this contract for collateralization. Updates the collateral tracking mappings.\",\"params\":{\"tokenAddress\":\"The address of the token being staked as collateral.\",\"tokenAmount\":\"The amount of the token to stake.\"}},\"terminateCollateral(address)\":{\"details\":\"Meant to be called by an external mechanism (like a keeper) that monitors LTV ratios.\",\"params\":{\"userAddress\":\"The address of the user whose collateral is being liquidated.\"}},\"unstakeCollateral(address,uint256)\":{\"details\":\"Ensures that the withdrawal does not violate the loan-to-value (LTV) requirements.\",\"params\":{\"tokenAddress\":\"The address of the token to unstake.\",\"tokenAmount\":\"The amount of the token to unstake.\"}}},\"title\":\"LendingTracker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accruedInterest(uint256,address,uint256)\":{\"notice\":\"Computes the accrued interest on a loan.\"},\"addSwapRouter(address)\":{\"notice\":\"Allows the owner to set the SwapRouter contract address.\"},\"addSwapToken(address)\":{\"notice\":\"Sets the swap token address for liquidations.\"},\"borrowToken(address,uint256)\":{\"notice\":\"Allows a user to borrow tokens from a specific lending pool.\"},\"getBorrowedReceipts(address)\":{\"notice\":\"Retrieves an array of borrow receipt IDs for a user.\"},\"getBorrowedTokens(address)\":{\"notice\":\"Retrieves an array of token addresses borrowed by a user.\"},\"getCollateralTokens(address)\":{\"notice\":\"Retrieves an array of token addresses used as collateral by a user.\"},\"liquidityTreshold(address,address,uint256)\":{\"notice\":\"Computes the current loan-to-value (LTV) ratio for a user's borrowed funds against their staked collateral.\"},\"returnBorrowedToken(uint256,uint256)\":{\"notice\":\"Allows a user to return borrowed tokens along with any accrued interest.\"},\"stakeCollateral(address,uint256)\":{\"notice\":\"Allows users to stake tokens as collateral for borrowing.\"},\"terminateCollateral(address)\":{\"notice\":\"Initiates the liquidation of a user's collateral if their LTV ratio exceeds the maximum permitted value, the terminator get the remaining collateral.\"},\"unstakeCollateral(address,uint256)\":{\"notice\":\"Permits users to withdraw their staked collateral, provided they have no outstanding loans.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lending/BorrowingTracker.sol\":\"BorrowingTracker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Dex/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../Router/InterfaceBridge.sol\\\";\\nimport \\\"./PoolTracker.sol\\\";\\n\\n// Custom errors for more descriptive and gas-efficient failure handling.\\nerror assetNotCorrect();\\nerror notEnoughTokens();\\nerror notEnoughGas();\\nerror notEnoughTimePassed();\\nerror initialLiquidityAlreadyProvided();\\nerror addressNotCorrect();\\nerror amountTooBig();\\nerror needToCallExistingFunction();\\n\\n/**\\n * @title LiquidityPool\\n * @notice Manages liquidity provision, asset swapping, and yield generation in a decentralized manner.\\n * @dev Implements IZKBridgeReceiver interface for cross-chain interactions and yield farming computations.\\n */\\ncontract LiquidityPool is IZKBridgeReceiver {\\n    // Events\\n    event priceChanged(address _asset, uint256 price);\\n    event liquidityAdded(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event liquidityRemoved(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event yieldFarmed(address indexed _address, uint256 _amount);\\n\\n    // State variables\\n    address public assetOneAddress;\\n    address public assetTwoAddress;\\n    uint256 public initialLiquidity;\\n    uint256 public liquidity;\\n    uint256 public yield;\\n    uint256 public swapFee = 1000000000000000;\\n    address public owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\\n    mapping(address => uint256) public lpTokenQuantity;\\n\\n    // Daily yield tracking\\n    mapping(address => uint256) public yieldTaken;\\n\\n    // Timestamp mapping for yield farming\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n    mapping(address => uint256) public initialLiquidityProvidedTime;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions only to the owner.\\n     */\\n    modifier onlyOwner() {\\n        msg.sender == owner;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\\n     * @param _assetOneAddress The address of the first asset.\\n     * @param _assetTwoAddress The address of the second asset.\\n     */\\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\\n        assetOneAddress = _assetOneAddress;\\n        assetTwoAddress = _assetTwoAddress;\\n        owner = msg.sender;\\n        swapFee = 1000000000000000; // 0.001 ether\\n    }\\n\\n    /**\\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _assetOneAmount The amount of the first asset to add.\\n     * @param _assetTwoAmount The amount of the second asset to add.\\n     */\\n    function addInitialLiquidity(\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    ) public onlyOwner {\\n        if (initialLiquidityProvidedTime[owner] > 0) {\\n            revert initialLiquidityAlreadyProvided();\\n        }\\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\\n\\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetOneAmount\\n        );\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetTwoAmount\\n        );\\n\\n        // SET THE INITIAL LIQUIDITY\\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\\n        liquidity = initialLiquidity;\\n\\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\\n        lpTokenQuantity[msg.sender] = initialLiquidity;\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\\n    }\\n\\n    /**\\n     * @dev Function to add additional liquidity to the pool.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _asset The address of the first asset.\\n     * @param _secondAsset The address of the second asset.\\n     * @param _amount The amount of the first asset to add.\\n     */\\n    function addLiquidity(\\n        address _asset,\\n        address _secondAsset,\\n        uint256 _amount\\n    ) external noReentrancy {\\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\\n        IERC20(_secondAsset).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOfOppositeTokenNeeded(_asset, _amount)\\n        );\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n\\n        // give lp tokens to new liquidity provider\\n        lpTokenQuantity[msg.sender] += (_amount *\\n            amountOfOppositeTokenNeeded(_asset, _amount));\\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(\\n            msg.sender,\\n            amountOfOppositeTokenNeeded(_asset, _amount),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to remove liquidity from the pool.\\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\\n     */\\n    function removeLiquidity(uint256 _amount) external noReentrancy {\\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) /\\n            100; // How much out of their liquidity they want to withdraw in percentage\\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) /\\n            1 ether;\\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) /\\n            1 ether;\\n        // condition for owner, because of the initial liquidity timer\\n        if (\\n            (msg.sender == owner) &&\\n            (isTimeInitialLiquidity() == false) &&\\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) <\\n                initialLiquidity)\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\\n        if (\\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\\n\\n        // EMIT EVENT\\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\\n    }\\n\\n    /**\\n     * @dev Function to sell the first asset and receive the second asset.\\n     * @param _amount The amount of the first asset to sell.\\n     */\\n    function sellAssetOne(uint256 _amount) external payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetOne()) {\\n            payable(msg.sender).transfer(msg.value);\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetTwo();\\n        uint256 assetOne = getAssetOne() + _amount;\\n        uint256 assetTwo = liquidity / assetOne;\\n        uint256 result = n - assetTwo;\\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to sell the second asset and receive the first asset.\\n     * @param _amount The amount of the second asset to sell.\\n     */\\n    function sellAssetTwo(uint256 _amount) external payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetTwo()) {\\n            payable(msg.sender).transfer(msg.value); // Transfer value back\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetOne();\\n        uint256 assetTwo = getAssetTwo() + _amount;\\n        uint256 assetOne = liquidity / assetTwo;\\n        uint256 result = n - assetOne;\\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetOneAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to get the current balance of a given asset held by the contract.\\n     * @param _address The address of the asset.\\n     * @return The current balance of the asset.\\n     */\\n    function getAssetBalace(address _address) public view returns (uint256) {\\n        return IERC20(_address).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the first asset in terms of the second asset.\\n     * @return The current price of the first asset * 10**18.\\n     */\\n    function assetOnePrice() public view returns (uint256) {\\n        return (getAssetTwo() * 1 ether) / getAssetOne();\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the second asset in terms of the first asset.\\n     * @return The current price of the second asset * 10**18.\\n     */\\n    function assetTwoPrice() public view returns (uint256) {\\n        return (getAssetOne() * 1 ether) / getAssetTwo();\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the first asset held by the contract.\\n     * @return The current balance of the first asset.\\n     */\\n    function getAssetOne() public view returns (uint256) {\\n        return IERC20(assetOneAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the second asset held by the contract.\\n     * @return The current balance of the second asset.\\n     */\\n    function getAssetTwo() public view returns (uint256) {\\n        return IERC20(assetTwoAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\\n     * @param _address The address of the LP token holder.\\n     * @return The quantity of LP tokens owned by the address.\\n     */\\n    function getLpTokenQuantity(\\n        address _address\\n    ) public view returns (uint256) {\\n        if (msg.sender != owner && _address == msg.sender) {\\n            revert addressNotCorrect();\\n        }\\n        return lpTokenQuantity[_address];\\n    }\\n\\n    /**\\n     * @dev Function to get the current ETH balance of the contract.\\n     * @return The current ETH balance of the contract.\\n     */\\n    function addressBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\\n     * @param sellingAsset The address of the asset being sold.\\n     * @param _amount The amount of the first asset being sold.\\n     * @return The quantity of the second asset that would be returned\\n     */\\n    function getSwapQuantity(\\n        address sellingAsset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        if (sellingAsset == assetOneAddress) {\\n            uint256 newAssetOne = getAssetOne() + _amount;\\n            uint256 newAssetTwo = liquidity / newAssetOne;\\n            return getAssetTwo() - newAssetTwo;\\n        } else if (sellingAsset == assetTwoAddress) {\\n            uint256 newAssetTwo = getAssetTwo() + _amount;\\n            uint256 newAssetOne = liquidity / newAssetTwo;\\n            return getAssetOne() - newAssetOne;\\n        } else {\\n            revert assetNotCorrect();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\\n     * @param _asset The address of the asset.\\n     * @param _amount The amount of the asset.\\n     * @return The quantity of the second asset needed for providing liquidity.\\n     */\\n    function amountOfOppositeTokenNeeded(\\n        address _asset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        uint256 ratio;\\n        if (_asset == assetOneAddress) {\\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\\n        } else {\\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\\n        }\\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\\n        return amountNeeded;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    // Yield Farming and Time Locks\\n\\n    /**\\n     * @dev Function to allow users to claim their yield. Can be called once a day.\\n     *\\n     * @notice sends the request to yield Calculator smart contract to compute yield with lower gas fee\\n     */\\n    function getYield() public payable {\\n        if (isTime() == false) {\\n            revert notEnoughTimePassed();\\n        }\\n        //NOW SEND BACK THE AVAILABLE YIELD\\n        uint16 destinationChain = PoolTracker(owner).destinationChain();\\n        IZKBridge zkBridge = PoolTracker(owner).zkBridge();\\n        address yieldCalculator = PoolTracker(owner).yieldCalculator();\\n        bytes memory newPayload = abi.encode(msg.sender);\\n        uint256 fee = zkBridge.estimateFee(destinationChain);\\n        zkBridge.send{value: fee}(\\n            destinationChain,\\n            yieldCalculator,\\n            newPayload\\n        );\\n        // Pay this to our contract which will fund the bridge contract with tokens\\n        uint256 bridgeFee = zkBridge.estimateFee(destinationChain);\\n        (bool sent, ) = payable(owner).call{value: bridgeFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the request for lower gas fee computation\\n     *\\n     * @param payload returns the computation\\n     *\\n     */\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external {\\n        (uint256 availableYield, address user) = abi.decode(\\n            payload,\\n            (uint256, address)\\n        );\\n        //TODO handle your business\\n        if (availableYield > address(this).balance) {\\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[user] += availableYield;\\n        (bool sent, ) = payable(user).call{value: availableYield}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        // EMIT EVENT\\n        emit yieldFarmed(msg.sender, availableYield);\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed for the user to claim yield.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTime() public view returns (bool) {\\n        lastYieldFarmedTime[msg.sender];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTimeInitialLiquidity() public view returns (bool) {\\n        if (\\n            block.timestamp >\\n            (initialLiquidityProvidedTime[msg.sender] + 365 days)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    fallback() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    receive() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0x70f1fdb35d530a58ce00d90f1d00ea62d10e57055b152a3930b3e58ef64634e8\",\"license\":\"MIT\"},\"contracts/Dex/PoolTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../Router/InterfaceBridge.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror PoolTracker_pairAlreadyExists();\\nerror PoolTracker_cantSwapSameToken();\\n\\n/**\\n * @title PoolTracker\\n * @dev Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem.\\n * Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions.\\n * Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\\n */\\ncontract PoolTracker {\\n    // Tracker for created pools, will add to database\\n    event poolCreated(LiquidityPool pool, address assetOne, address assetTwo);\\n\\n    // The owner of the PoolTracker contract, set to the deployer.\\n    address private owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // Hardcoded destination chain identifier and ZK Bridge address\\n    uint16 public destinationChain = 23;\\n    IZKBridge public zkBridge =\\n        IZKBridge(0xb20F0105f3598652a3bE569132F7b3F341106dDC);\\n\\n    // Address of the yield calculator contract, for bridging computational parts.\\n    address public yieldCalculator;\\n\\n    // Constructor: Sets the contract deployer as the owner.\\n    constructor(address _yieldCalculator) {\\n        owner = msg.sender;\\n        yieldCalculator = _yieldCalculator;\\n    }\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert();\\n        }\\n        _;\\n    }\\n\\n    // Mapping of pool Pairs, to store existing ones\\n    mapping(address => address[]) public poolPairs;\\n\\n    // Mapping a pool to the contracts, in case we wont store it in the database\\n    mapping(address => mapping(address => LiquidityPool)) public pairToPool;\\n\\n    // All the available tokens\\n    address[] public tokens;\\n\\n    /**\\n     * @dev Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial\\n     * transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings.\\n     * Emits a PoolCreated event upon successful creation.\\n     *\\n     * Requirements:\\n     * - The token pair must not already have an existing pool.\\n     * - The caller must have approved the contract to spend the necessary token amounts.\\n     *\\n     * @param _assetOneAddress The address of the first token in the pair.\\n     * @param _assetTwoAddress The address of the second token in the pair.\\n     * @param amountOne The amount of the first token to add to the pool.\\n     * @param amountTwo The amount of the second token to add to the pool.\\n     */\\n    function createPool(\\n        address _assetOneAddress,\\n        address _assetTwoAddress,\\n        uint256 amountOne,\\n        uint256 amountTwo\\n    ) external noReentrancy {\\n        if (\\n            exists(_assetOneAddress, _assetTwoAddress)\\n        ) // To prevent duplicate pools\\n        {\\n            revert PoolTracker_pairAlreadyExists();\\n        }\\n        // Transfer of tokens\\n        IERC20(_assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOne\\n        );\\n        IERC20(_assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountTwo\\n        );\\n        // Creation of pool\\n        LiquidityPool poolAddress = new LiquidityPool(\\n            _assetOneAddress,\\n            _assetTwoAddress\\n        );\\n        // Approve\\n        IERC20(_assetOneAddress).approve(address(poolAddress), amountOne);\\n        IERC20(_assetTwoAddress).approve(address(poolAddress), amountTwo);\\n        // Add initial liquidity\\n        poolAddress.addInitialLiquidity(amountOne, amountTwo);\\n        // Update mappings\\n        poolPairs[_assetOneAddress].push(_assetTwoAddress);\\n        poolPairs[_assetTwoAddress].push(_assetOneAddress);\\n        pairToPool[_assetOneAddress][_assetTwoAddress] = poolAddress;\\n        pairToPool[_assetTwoAddress][_assetOneAddress] = poolAddress;\\n\\n        if (tokenExists(_assetOneAddress) == false) {\\n            tokens.push(_assetOneAddress);\\n        }\\n        if (tokenExists(_assetTwoAddress) == false) {\\n            tokens.push(_assetTwoAddress);\\n        }\\n        // Emit the event\\n        emit poolCreated(poolAddress, _assetOneAddress, _assetTwoAddress);\\n    }\\n\\n    /**\\n     * @dev Checks if a liquidity pool exists for a given pair of tokens.\\n     *\\n     * @param token1 The address of the first token.\\n     * @param token2 The address of the second token.\\n     * @return bool Returns true if the pool exists, false otherwise.\\n     */\\n    function exists(address token1, address token2) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < poolPairs[token1].length; i++) {\\n            if (poolPairs[token1][i] == token2) {\\n                exist = true;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    /**\\n     * @dev Checks if a token is already tracked by the contract.\\n     *\\n     * @param tokenAddress The address of the token to check.\\n     * @return bool Returns true if the token is tracked, false otherwise.\\n     */\\n    function tokenExists(address tokenAddress) internal view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokenAddress == tokens[i]) {\\n                exist = true;\\n                break;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    // Routing token\\n    struct routingAddress {\\n        address tokenAddress;\\n        address priceFeed;\\n    }\\n\\n    // Array of routing Tokens\\n    routingAddress[] public routingAddresses;\\n\\n    /**\\n     * @dev Allows the contract owner to add or update the routing address for a token.\\n     * This is used for token swaps and price feed lookups.\\n     *\\n     * @param tokenAddress The token for which to set the routing.\\n     * @param priceFeed The Chainlink price feed address for the token.\\n     */\\n    function addRoutingAddress(\\n        address tokenAddress,\\n        address priceFeed\\n    ) external onlyOwner {\\n        if (routingAddresses.length == 0) {\\n            routingAddresses.push(routingAddress(tokenAddress, priceFeed));\\n        } else {\\n            for (uint256 i = 0; i < routingAddresses.length; i++) {\\n                if (routingAddresses[i].tokenAddress == tokenAddress) {\\n                    routingAddresses[i] = routingAddress(\\n                        tokenAddress,\\n                        priceFeed\\n                    );\\n                    break;\\n                } else if (i == routingAddresses.length - 1) {\\n                    routingAddresses.push(\\n                        routingAddress(tokenAddress, priceFeed)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Determines the optimal routing token for a swap between two tokens,\\n     * based on available liquidity and price feeds.\\n     *\\n     * @param address1 The address of the first token.\\n     * @param address2 The address of the second token.\\n     * @return address The address of the optimal routing token.\\n     */\\n    function tokenToRoute(\\n        address address1,\\n        address address2\\n    ) external view returns (address) {\\n        if (address1 == address2) {\\n            revert PoolTracker_cantSwapSameToken();\\n        }\\n        address[] memory token1pairs = poolPairs[address1];\\n        address[] memory token2pairs = poolPairs[address2];\\n\\n        address routingToken;\\n        int routingTokenLiquidity;\\n\\n        for (uint256 i; i < token1pairs.length; i++) {\\n            for (uint256 a; a < token2pairs.length; a++) {\\n                if (token1pairs[i] == token2pairs[a]) {\\n                    for (uint256 b; b < routingAddresses.length; b++) {\\n                        if (\\n                            routingAddresses[b].tokenAddress == token1pairs[i]\\n                        ) {\\n                            (, int answer, , , ) = AggregatorV3Interface(\\n                                routingAddresses[b].priceFeed\\n                            ).latestRoundData();\\n                            int liquidity;\\n                            LiquidityPool pool1 = pairToPool[address1][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            LiquidityPool pool2 = pairToPool[address2][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            uint256 balance1 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool1));\\n                            uint256 balance2 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool2));\\n                            liquidity =\\n                                (int(balance1) + int(balance2)) *\\n                                answer;\\n                            if (liquidity > routingTokenLiquidity) {\\n                                // Best choice so far if the liquidity is bigger than previous best token\\n                                routingToken = routingAddresses[b].tokenAddress;\\n                                routingTokenLiquidity = liquidity;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return routingToken;\\n    }\\n\\n    /**\\n     * @dev Returns all array of all tradable tokens on the platform\\n     *\\n     * @return array Returns tokens array.\\n     */\\n    function tokenList() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    /**\\n     * @dev Returns length or routingAddresses array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getRoutingAddressesLength() external view returns (uint256) {\\n        return routingAddresses.length;\\n    }\\n\\n    /**\\n     * @dev Returns length or poolPairs array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getPoolPairsLength(\\n        address tokenAddress\\n    ) external view returns (uint256) {\\n        return poolPairs[tokenAddress].length;\\n    }\\n\\n    /**\\n     * @dev owner can withdraw the fees to deposit to yield Calculator\\n     */\\n    function withdrawEther() external onlyOwner {\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1e28b114bbb312ef730baff55fee62eb2d231840eed9a442a378f6edabf3746f\",\"license\":\"MIT\"},\"contracts/Dex/WeaveSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing required contracts and interfaces\\nimport \\\"./PoolTracker.sol\\\";\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n// Custom errors for specific failure modes, enhancing gas efficiency and error clarity.\\nerror SwapRouter_tokensCantBeSwapped();\\nerror SwapRouter_needToCallExistingFunction();\\n\\n/**\\n * @title SwapRouter\\n * @dev This contract facilitates token swaps by interacting with liquidity pools.\\n * It supports direct swaps between two tokens in a single pool, or routed swaps through an intermediary token.\\n * Utilizes the PoolTracker contract to find liquidity pools and perform the necessary asset exchanges.\\n */\\ncontract SwapRouter {\\n    // Event emitted after successful token swaps, providing auditability and transparency of operations.\\n    event swap(\\n        address userAddress,\\n        address address1,\\n        address address2,\\n        uint256 address1Amount,\\n        uint256 address2Amount\\n    );\\n\\n    // Reference to the PoolTracker contract for pool operations\\n    PoolTracker poolTracker;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @notice Constructs the SwapRouter and initializes the PoolTracker reference.\\n     * @param tracker The PoolTracker contract address.\\n     */\\n    constructor(address tracker) {\\n        poolTracker = PoolTracker(tracker);\\n    }\\n\\n    /**\\n     * @notice Swaps `inputAmount` of `address1` tokens for `address2` tokens.\\n     * @dev This function supports direct swaps between tokens in a single pool or routed swaps through an intermediary token.\\n     * Uses PoolTracker to determine the best swap path and perform the exchange.\\n     * @param address1 The token being sold by the user.\\n     * @param address2 The token being purchased by the user.\\n     * @param inputAmount The amount of `address1` tokens to swap.\\n     */\\n    function swapAsset(\\n        address address1,\\n        address address2,\\n        uint256 inputAmount\\n    ) public payable noReentrancy {\\n        if (poolTracker.exists(address1, address2)) {\\n            // Direct swap scenario\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            uint256 startingBalanceAddress2 = IERC20(address2).balanceOf(\\n                address(this)\\n            );\\n            if (pool.assetOneAddress() == address1) {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool), inputAmount);\\n                pool.sellAssetOne{value: pool.swapFee()}(inputAmount);\\n            } else {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool), inputAmount);\\n                pool.sellAssetTwo{value: pool.swapFee()}(inputAmount);\\n            }\\n            uint256 amountOutput = IERC20(address2).balanceOf(address(this)) -\\n                startingBalanceAddress2;\\n            IERC20(address2).transfer(msg.sender, amountOutput);\\n            // Unrequired fee\\n            uint256 unrequiredFee = msg.value - pool.swapFee(); // In case the msg.sender sent more value than it is required\\n            (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\\n            // Routed swap scenario\\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(\\n                address1,\\n                routingToken\\n            );\\n            LiquidityPool pool2 = poolTracker.pairToPool(\\n                address2,\\n                routingToken\\n            );\\n            uint256 startingBalance = IERC20(routingToken).balanceOf(\\n                address(this)\\n            );\\n            uint256 startingBalance2 = IERC20(address2).balanceOf(\\n                address(this)\\n            );\\n            //SWAP 1, input token into routing  token\\n            if (pool1.assetOneAddress() == address1) {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool1), inputAmount);\\n                pool1.sellAssetOne{value: pool1.swapFee()}(inputAmount);\\n            } else {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool1), inputAmount);\\n                pool1.sellAssetTwo{value: pool1.swapFee()}(inputAmount);\\n            }\\n            //SWAP 2, routing token into output token\\n            uint256 routingTokenInput = IERC20(routingToken).balanceOf(\\n                address(this)\\n            ) - startingBalance;\\n            if (pool2.assetOneAddress() == address1) {\\n                IERC20(routingToken).approve(address(pool2), routingTokenInput);\\n                pool2.sellAssetOne{value: pool2.swapFee()}(routingTokenInput);\\n            } else {\\n                IERC20(routingToken).approve(address(pool2), routingTokenInput);\\n                pool2.sellAssetTwo{value: pool2.swapFee()}(routingTokenInput);\\n            }\\n            uint256 address2Output = IERC20(address2).balanceOf(address(this)) -\\n                startingBalance2;\\n            IERC20(address2).transfer(msg.sender, address2Output);\\n            // Unrequired fee\\n            uint256 unrequiredFee = msg.value -\\n                pool1.swapFee() -\\n                pool2.swapFee(); // In case the msg.sender sent more value than it is required\\n            (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n    }\\n\\n    /**\\n     * @notice Estimates the output amount for a swap from `address1` to `address2` given an `inputAmount` of `address1`.\\n     * @dev Considers direct swaps and routed swaps through an intermediary token, utilizing PoolTracker for calculations.\\n     * @param address1 The token being sold.\\n     * @param address2 The token being bought.\\n     * @param inputAmount The amount of `address1` tokens to swap.\\n     * @return output The estimated amount of `address2` tokens to be received.\\n     */\\n    function getSwapAmount(\\n        address address1,\\n        address address2,\\n        uint256 inputAmount\\n    ) public view returns (uint256) {\\n        uint256 output;\\n        if (poolTracker.exists(address1, address2)) {\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            output = pool.getSwapQuantity(address1, inputAmount);\\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(\\n                address1,\\n                routingToken\\n            );\\n            LiquidityPool pool2 = poolTracker.pairToPool(\\n                address2,\\n                routingToken\\n            );\\n            uint256 routingOutput = pool1.getSwapQuantity(\\n                address1,\\n                inputAmount\\n            );\\n            output = pool2.getSwapQuantity(routingToken, routingOutput);\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @notice Retrieves the swap fee required for a swap between `address1` and `address2`.\\n     * @dev Calculates the total swap fee, accounting for both direct and routed swaps, by querying the associated pools.\\n     * @param address1 The source token address.\\n     * @param address2 The destination token address.\\n     * @return fee The total swap fee for the transaction.\\n     */\\n    function getSwapFee(\\n        address address1,\\n        address address2\\n    ) public view returns (uint256) {\\n        uint256 fee;\\n        if (poolTracker.exists(address1, address2)) {\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            fee += pool.swapFee();\\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(\\n                address1,\\n                routingToken\\n            );\\n            LiquidityPool pool2 = poolTracker.pairToPool(\\n                address2,\\n                routingToken\\n            );\\n            fee += pool1.swapFee();\\n            fee += pool2.swapFee();\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n        return fee;\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     */\\n    fallback() external payable {}\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x44c31f7295e2b710aeaca9e95cc2ba679bde6490f4b83161811e5af7c2571483\",\"license\":\"MIT\"},\"contracts/Lending/BorrowingTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./Pool.sol\\\";\\nimport \\\"../Dex/WeaveSwap.sol\\\";\\nimport \\\"./LendingTracker.sol\\\";\\n\\nerror BorrowingTracker_AmountOfCollateralTokenTooLow();\\nerror BorrowingTracker_AmountTooHigh();\\n\\n/**\\n * @title LendingTracker\\n * @dev Manages lending, borrowing, and collateral operations for a decentralized finance platform.\\n * Utilizes external price feeds for valuation and includes functionality for yield farming.\\n * This contract is responsible for tracking user interactions with lending pools and their collateralized positions.\\n */\\ncontract BorrowingTracker {\\n    // Events for logging various actions within the contract\\n    event userBorrowed(\\n        address indexed user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n    event userStakedCollateral(\\n        address indexed user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n    event userUnstakedCollateral(\\n        address indexed user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n    event userReturnedBorrowedToken(\\n        address indexed user,\\n        address tokenAddress,\\n        uint256 receiptId,\\n        uint256 tokenAmount,\\n        uint256 interest\\n    );\\n    event collateralTerminated(address user, address terminator);\\n\\n    // Maximum Loan-to-Value (LTV) ratio for borrowing against collateral\\n    int256 public ltv = 75;\\n\\n    // Owner of the contract, set at deployment\\n    address owner;\\n\\n    // SwapRouter\\n    SwapRouter public swapRouter;\\n    address public swapToken; // We will take usdc\\n\\n    // Lendingtracker\\n    LendingTracker public lendingTracker;\\n\\n    // Constructor sets the deploying address as the owner\\n    constructor(address _lendingTracker, address _swapRouter) {\\n        owner = msg.sender;\\n        lendingTracker = LendingTracker(_lendingTracker);\\n        swapRouter = SwapRouter(payable(_swapRouter));\\n    }\\n\\n    // Struct to track borrowing receipts for users\\n    struct borrowReceipt {\\n        address tokenAddress;\\n        uint256 amount;\\n        uint256 time;\\n        uint256 apy;\\n    }\\n\\n    // Mappings\\n    mapping(address => mapping(address => uint256)) public collateral; // Collateral amount of specific token for user\\n    mapping(address => address[]) public collateralTokens; // All collateralized token addresses of user\\n\\n    mapping(address => address[]) public borrowedTokens; // All borrowed token addresses of user\\n    mapping(address => uint256) public borrowingId; // Current borrowing Id of the user, it increments with each borrow\\n    mapping(address => mapping(address => uint256[])) public userBorrowReceipts; // All receipt ids for a certain token address of user\\n    mapping(address => mapping(uint256 => borrowReceipt))\\n        public borrowReceiptData; // Id to receipt\\n\\n    /**\\n     * @notice Allows a user to borrow tokens from a specific lending pool.\\n     * @dev The function checks for sufficient liquidity and adherence to the loan-to-value (LTV) ratio before permitting the borrow.\\n     * Updates the user's borrow receipts to keep track of the borrowed amount and terms.\\n     * @param tokenAddress The address of the token the user wishes to borrow.\\n     * @param tokenAmount The amount of tokens the user wants to borrow.\\n     */\\n    function borrowToken(address tokenAddress, uint256 tokenAmount) external {\\n        // Checks if the pool exists\\n        (Pool poolAddress, ) = lendingTracker.tokenToPool(tokenAddress);\\n        if (address(poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        // Liquidity treshold, if ltv is too high\\n        if (liquidityTreshold(msg.sender, tokenAddress, tokenAmount) >= ltv) {\\n            revert lendingTracker_amountTooHigh();\\n        }\\n        // Borrows from the pool contract\\n        poolAddress.borrow(tokenAmount); // Checks if there is enough reserve\\n\\n        // Maps the token address if needed\\n        if (newTokenChecker(borrowedTokens[msg.sender], tokenAddress) == true) {\\n            borrowedTokens[msg.sender].push(tokenAddress);\\n        }\\n        // Adds funds to a mapping\\n        userBorrowReceipts[msg.sender][tokenAddress].push(\\n            borrowingId[msg.sender]\\n        );\\n        borrowReceiptData[msg.sender][borrowingId[msg.sender]] = borrowReceipt(\\n            tokenAddress,\\n            tokenAmount,\\n            block.timestamp,\\n            poolAddress.borrowingAPY()\\n        );\\n\\n        // Transfers tokens to user\\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n        // User receipt Id\\n        borrowingId[msg.sender] += 1;\\n\\n        // Event\\n        emit userBorrowed(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Allows users to stake tokens as collateral for borrowing.\\n     * @dev Transfers tokens from the user to this contract for collateralization. Updates the collateral tracking mappings.\\n     * @param tokenAddress The address of the token being staked as collateral.\\n     * @param tokenAmount The amount of the token to stake.\\n     */\\n    function stakeCollateral(\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    ) external {\\n        // Checks if pool exists\\n        (Pool poolAddress, address priceAddress) = lendingTracker.tokenToPool(\\n            tokenAddress\\n        );\\n        if (address(poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        //Staked collateral must have value of at least 100 eur when staked\\n        if (\\n            uint256(usdConverter(priceAddress)) * tokenAmount <\\n            10000000000000000000000000000 // 18(token) + 8(price feed)\\n        ) {\\n            revert BorrowingTracker_AmountOfCollateralTokenTooLow();\\n        }\\n        // Transfers tokens from user to the contract\\n        IERC20(tokenAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenAmount\\n        );\\n        // Maps the token address if needed\\n        if (\\n            newTokenChecker(collateralTokens[msg.sender], tokenAddress) == true\\n        ) {\\n            collateralTokens[msg.sender].push(tokenAddress);\\n        }\\n        // Adds the amount to mapping\\n        collateral[msg.sender][tokenAddress] += tokenAmount;\\n\\n        //Event\\n        emit userStakedCollateral(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Permits users to withdraw their staked collateral, provided they have no outstanding loans.\\n     * @dev Ensures that the withdrawal does not violate the loan-to-value (LTV) requirements.\\n     * @param tokenAddress The address of the token to unstake.\\n     * @param tokenAmount The amount of the token to unstake.\\n     */\\n    // If amount of collateral is under 100e the user needs to unstake whole collateral\\n    function unstakeCollateral(\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    ) external {\\n        // Checks if amount is too high and if the user is borrowing any tokens\\n        if (\\n            collateral[msg.sender][tokenAddress] - tokenAmount < 0 &&\\n            borrowedTokens[msg.sender].length > 0\\n        ) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        //Staked collateral must have value of at least 100 eur\\n        (, address priceAddress) = lendingTracker.tokenToPool(tokenAddress);\\n        if (\\n            uint256(usdConverter(priceAddress)) *\\n                collateral[msg.sender][tokenAddress] <\\n            10000000000\\n        ) {\\n            tokenAmount = collateral[msg.sender][tokenAddress];\\n        }\\n        // Decreases amount in mapping\\n        collateral[msg.sender][tokenAddress] -= tokenAmount;\\n        // Transfers the tokens to user\\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n        // Maps the token address if needed\\n        if (collateral[msg.sender][tokenAddress] == 0) {\\n            for (uint256 i; i < collateralTokens[msg.sender].length; i++) {\\n                if (collateralTokens[msg.sender][i] == tokenAddress) {\\n                    collateralTokens[msg.sender][i] = collateralTokens[\\n                        msg.sender\\n                    ][collateralTokens[msg.sender].length - 1];\\n                    collateralTokens[msg.sender].pop();\\n                }\\n            }\\n        }\\n\\n        //Event\\n        emit userUnstakedCollateral(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Computes the current loan-to-value (LTV) ratio for a user's borrowed funds against their staked collateral.\\n     * @dev Used to determine if a user's borrowings are within permissible limits. Can also factor in an additional amount\\n     * being borrowed or provided as collateral.\\n     * @param user The address of the user.\\n     * @param additionalTokenAddress Optionally, the address of a token being considered for borrowing/collateral.\\n     * @param tokenAmount Optionally, the amount of the additional token being considered.\\n     * @return The LTV ratio as a percentage.\\n     */\\n    function liquidityTreshold(\\n        address user,\\n        address additionalTokenAddress,\\n        uint256 tokenAmount\\n    ) public view returns (int) {\\n        // It checks the price in USD if collaterall falls below borrowed amount in usd + the apy till date, the collateral get terminated\\n        int collateralUSD;\\n        int borrowedUSD;\\n        // If we want to calculate ltv with additional funds\\n        (Pool poolAddress, address priceAddress) = lendingTracker.tokenToPool(\\n            additionalTokenAddress\\n        );\\n        if (tokenAmount != 0 && address(poolAddress) != address(0)) {\\n            int conversion = usdConverter(priceAddress);\\n            borrowedUSD += conversion * int(tokenAmount);\\n        }\\n        for (uint256 i; i < collateralTokens[user].length; i++) {\\n            address tokenAddress = collateralTokens[user][i];\\n            uint256 amountOfToken = collateral[user][tokenAddress];\\n            (, address tokenPriceAddress) = lendingTracker.tokenToPool(\\n                tokenAddress\\n            );\\n            // Get conversion to USD\\n            int conversion = usdConverter(tokenPriceAddress);\\n            collateralUSD += conversion * int(amountOfToken);\\n        }\\n        for (uint256 i; i < borrowedTokens[user].length; i++) {\\n            address tokenAddress = borrowedTokens[user][i];\\n            uint256[] storage receiptIds = userBorrowReceipts[user][\\n                tokenAddress\\n            ];\\n            for (uint256 a; a < receiptIds.length; a++) {\\n                uint256 receiptTIME = borrowReceiptData[msg.sender][\\n                    receiptIds[a]\\n                ].time;\\n                uint256 receiptAMOUNT = borrowReceiptData[msg.sender][\\n                    receiptIds[a]\\n                ].amount;\\n                address receiptAddress = borrowReceiptData[msg.sender][\\n                    receiptIds[a]\\n                ].tokenAddress;\\n                uint256 receiptAPY = borrowReceiptData[msg.sender][\\n                    receiptIds[a]\\n                ].apy;\\n                uint256 borrowInterest = (receiptAMOUNT *\\n                    receiptTIME *\\n                    receiptAPY) / (365 days * 100);\\n                (, address tokenPriceAddress) = lendingTracker.tokenToPool(\\n                    receiptAddress\\n                );\\n                int conversion = usdConverter(tokenPriceAddress);\\n                borrowedUSD += conversion * int(borrowInterest + receiptAMOUNT);\\n            }\\n        }\\n        return (borrowedUSD * 100) / collateralUSD;\\n    }\\n\\n    /**\\n     * @notice Initiates the liquidation of a user's collateral if their LTV ratio exceeds the maximum permitted value, the terminator get the remaining collateral.\\n     * @dev Meant to be called by an external mechanism (like a keeper) that monitors LTV ratios.\\n     *\\n     * @param userAddress The address of the user whose collateral is being liquidated.\\n     */\\n    function terminateCollateral(address userAddress) external payable {\\n        // Check if the ltv is too high, if it is not reverts\\n        if (liquidityTreshold(userAddress, address(0), 0) <= ltv) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        // Trade all collateral tokens for swap Token\\n        uint256 balanceBeforeSwaps = address(this).balance;\\n        uint256 swapTokenBalance;\\n        for (uint256 i; i < collateralTokens[userAddress].length; i++) {\\n            address collateralToken = collateralTokens[userAddress][i];\\n            uint256 userCollateral = collateral[userAddress][collateralToken];\\n            if (collateralToken == swapToken) {\\n                // If the collateral is swap Token\\n                swapTokenBalance += userCollateral;\\n            } else {\\n                // See how much swap Token we get\\n                uint256 swapAmount = swapRouter.getSwapAmount(\\n                    collateralToken,\\n                    swapToken,\\n                    userCollateral\\n                );\\n                // Perform the swap\\n                swapRouter.swapAsset(\\n                    collateralToken,\\n                    swapToken,\\n                    userCollateral\\n                );\\n                // Update the amount of swapped tokens\\n                swapTokenBalance += swapAmount;\\n            }\\n            // Delete collateral from storage\\n            collateral[userAddress][collateralTokens[userAddress][i]] = 0;\\n            collateralTokens[userAddress][i] = collateralTokens[userAddress][\\n                collateralTokens[userAddress].length - 1\\n            ];\\n            collateralTokens[userAddress].pop();\\n        }\\n        // Trade swap Token for all borrowed tokens\\n        for (uint256 i; i < borrowedTokens[userAddress].length; i++) {\\n            uint256 amountOfToken;\\n            uint256 amountOfInterest;\\n            address tokenAddress = borrowedTokens[userAddress][i];\\n            // Get all borrowing receipts for the given token\\n            for (\\n                uint256 a;\\n                a < userBorrowReceipts[userAddress][tokenAddress].length;\\n                i++\\n            ) {\\n                uint256 borrowId = userBorrowReceipts[userAddress][\\n                    tokenAddress\\n                ][i];\\n                uint256 tokenAmount = borrowReceiptData[userAddress][borrowId]\\n                    .amount;\\n                uint256 interest = accruedInterest(\\n                    borrowId,\\n                    userAddress,\\n                    tokenAmount\\n                );\\n                amountOfToken += tokenAmount + interest;\\n                amountOfInterest += interest;\\n                // Delete the receipt\\n                borrowReceiptData[userAddress][borrowId].amount = 0;\\n                userBorrowReceipts[userAddress][tokenAddress][\\n                    a\\n                ] = userBorrowReceipts[userAddress][tokenAddress][\\n                    userBorrowReceipts[userAddress][tokenAddress].length - 1\\n                ];\\n                userBorrowReceipts[userAddress][tokenAddress].pop();\\n            }\\n            if (tokenAddress == swapToken) {\\n                swapTokenBalance -= amountOfToken;\\n            } else {\\n                // See how much swap Token we need to get borrowed amount\\n                uint256 swapAmount = swapRouter.getSwapAmount(\\n                    tokenAddress,\\n                    swapToken,\\n                    amountOfToken\\n                );\\n                // Perform the swap\\n                swapRouter.swapAsset(swapToken, tokenAddress, swapAmount);\\n                // Update the amount of swapped tokens\\n                swapTokenBalance -= swapAmount;\\n            }\\n            // Transfer tokens to the pool and book interest\\n            (Pool poolAddress, ) = lendingTracker.tokenToPool(tokenAddress);\\n            IERC20(tokenAddress).transfer(address(poolAddress), amountOfToken);\\n            poolAddress.bookYield(amountOfInterest);\\n            // Delete borrowed token from storage\\n            borrowedTokens[userAddress][i] = borrowedTokens[userAddress][\\n                borrowedTokens[userAddress].length - 1\\n            ];\\n            borrowedTokens[userAddress].pop();\\n        }\\n\\n        // Repay the terminator the 0.25(remaining tokens)\\n        IERC20(swapToken).transfer(msg.sender, swapTokenBalance);\\n        // Return the unnecessary fee, it gets transfered to borrowing contract from swap Router\\n        uint256 balanceAfterSwaps = address(this).balance;\\n        (bool sent, ) = payable(msg.sender).call{\\n            value: balanceAfterSwaps - balanceBeforeSwaps\\n        }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        // Event\\n        emit collateralTerminated(userAddress, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Converts the token amount to its USD equivalent using Chainlink price feeds.\\n     * @dev Utility function to assist in calculating collateral values and loan amounts.\\n     * @param priceAddress Address of the Chainlink price feed for the token.\\n     * @return int The USD value of the token amount based on the latest price feed data.\\n     */\\n    function usdConverter(address priceAddress) internal view returns (int) {\\n        (, int answer, , , ) = AggregatorV3Interface(priceAddress)\\n            .latestRoundData();\\n        return answer;\\n    }\\n\\n    /**\\n     * @notice Checks if a new token is not already tracked by the user's token array.\\n     * @dev Utility function to prevent duplicate entries in user token arrays.\\n     * @param userTokens Array of token addresses the user has interacted with.\\n     * @param token Address of the token to check.\\n     * @return bool True if the token is not in the array, false otherwise.\\n     */\\n    function newTokenChecker(\\n        address[] memory userTokens,\\n        address token\\n    ) internal pure returns (bool) {\\n        bool newToken = true;\\n        for (uint256 i; i < userTokens.length; i++) {\\n            if (token == userTokens[i]) {\\n                newToken = false;\\n            }\\n        }\\n        return newToken;\\n    }\\n\\n    /**\\n     * @notice Allows a user to return borrowed tokens along with any accrued interest.\\n     * @dev Calculates interest based on the borrowing APY and time elapsed since the token was borrowed.\\n     * @param id The unique identifier of the borrow receipt.\\n     * @param tokenAmount The amount of the borrowed token being returned.\\n     */\\n    function returnBorrowedToken(uint256 id, uint256 tokenAmount) external {\\n        if (borrowReceiptData[msg.sender][id].amount == 0) {\\n            revert lendingTracker_receiptDoesntExist();\\n        }\\n        if (borrowReceiptData[msg.sender][id].amount - tokenAmount < 0) {\\n            revert lendingTracker_amountTooHigh();\\n        }\\n        address tokenAddress = borrowReceiptData[msg.sender][id].tokenAddress;\\n        borrowReceiptData[msg.sender][id].amount -= tokenAmount;\\n        uint256 borrowInterest = accruedInterest(id, msg.sender, tokenAmount);\\n        // From msg sender to this contract\\n        (Pool poolAddress, ) = lendingTracker.tokenToPool(tokenAddress);\\n        IERC20(tokenAddress).transferFrom(\\n            msg.sender,\\n            address(poolAddress),\\n            tokenAmount + borrowInterest\\n        );\\n        // Book how much of transaction was yield\\n        poolAddress.bookYield(borrowInterest);\\n        // If the whole borrowed amount gets repayed, delete the id and if all the ids for borrowed token get repayed delete borrowed token\\n        if (borrowReceiptData[msg.sender][id].amount == 0) {\\n            for (\\n                uint256 i;\\n                i < userBorrowReceipts[msg.sender][tokenAddress].length;\\n                i++\\n            ) {\\n                if (userBorrowReceipts[msg.sender][tokenAddress][i] == id) {\\n                    userBorrowReceipts[msg.sender][tokenAddress][\\n                        i\\n                    ] = userBorrowReceipts[msg.sender][tokenAddress][\\n                        userBorrowReceipts[msg.sender][tokenAddress].length - 1\\n                    ];\\n                    userBorrowReceipts[msg.sender][tokenAddress].pop();\\n                }\\n            }\\n            if (userBorrowReceipts[msg.sender][tokenAddress].length == 0) {\\n                for (uint256 i; i < borrowedTokens[msg.sender].length; i++) {\\n                    if (borrowedTokens[msg.sender][i] == tokenAddress) {\\n                        borrowedTokens[msg.sender][i] = borrowedTokens[\\n                            msg.sender\\n                        ][borrowedTokens[msg.sender].length - 1];\\n                        borrowedTokens[msg.sender].pop();\\n                    }\\n                }\\n            }\\n        }\\n        // Event\\n        emit userReturnedBorrowedToken(\\n            msg.sender,\\n            tokenAddress,\\n            id,\\n            tokenAmount,\\n            borrowInterest\\n        );\\n    }\\n\\n    /**\\n     * @notice Computes the accrued interest on a loan.\\n     * @dev Calculates interest based on the borrowing APY and time elapsed since the token was borrowed.\\n     * @param _id The unique identifier of the borrow receipt.\\n     * @param _user The address of the borrower.\\n     * @param tokenAmount The amount of the borrowed token being returned.\\n     * @return uint256 The accrued interest.\\n     */\\n    function accruedInterest(\\n        uint256 _id,\\n        address _user,\\n        uint256 tokenAmount\\n    ) public view returns (uint256) {\\n        uint256 receiptAPY = borrowReceiptData[_user][_id].apy;\\n        uint256 receiptTIME = borrowReceiptData[_user][_id].time;\\n        uint256 fullAmount = borrowReceiptData[_user][_id].amount;\\n        if (receiptAPY == 0) {\\n            return 0;\\n        }\\n        if (tokenAmount > fullAmount) {\\n            revert BorrowingTracker_AmountTooHigh();\\n        }\\n        // Pay the part of the interest the user is repaying\\n        uint256 borrowInterest = ((((tokenAmount * 100) / fullAmount) *\\n            receiptTIME *\\n            receiptAPY) / (365 days * 100)) * 100;\\n        return borrowInterest;\\n    }\\n\\n    /**\\n     * @notice Allows the owner to set the SwapRouter contract address.\\n     * @dev Only the owner can call this function.\\n     * @param _swapRouter The address of the new SwapRouter contract.\\n     */\\n    function addSwapRouter(address _swapRouter) public {\\n        if (msg.sender != owner) {\\n            revert lending_addressNotAllowed();\\n        }\\n        swapRouter = SwapRouter(payable(_swapRouter));\\n    }\\n\\n    /**\\n     * @notice Sets the swap token address for liquidations.\\n     * @dev Only the owner can call this function.\\n     * @param newSwapToken The address of the new swap token.\\n     */\\n    function addSwapToken(address newSwapToken) external {\\n        if (msg.sender != owner) {\\n            revert lending_addressNotAllowed();\\n        }\\n        swapToken = newSwapToken;\\n    }\\n\\n    /**\\n     * @notice Retrieves an array of token addresses borrowed by a user.\\n     * @param user The address of the user.\\n     * @return address[] An array of borrowed token addresses.\\n     */\\n    function getBorrowedTokens(\\n        address user\\n    ) external view returns (address[] memory) {\\n        return borrowedTokens[user];\\n    }\\n\\n    /**\\n     * @notice Retrieves an array of token addresses used as collateral by a user.\\n     * @param user The address of the user.\\n     * @return address[] An array of collateral token addresses.\\n     */\\n    function getCollateralTokens(\\n        address user\\n    ) external view returns (address[] memory) {\\n        return collateralTokens[user];\\n    }\\n\\n    /**\\n     * @notice Retrieves an array of borrow receipt IDs for a user.\\n     * @param user The address of the user.\\n     * @return uint256[] An array of borrow receipt IDs.\\n     */\\n    function getBorrowedReceipts(\\n        address user\\n    ) external view returns (uint256[] memory) {\\n        // First pass: Calculate the total size needed for the memory array\\n        uint256 totalSize = 0;\\n        for (uint256 i = 0; i < borrowedTokens[user].length; i++) {\\n            totalSize += userBorrowReceipts[user][borrowedTokens[user][i]]\\n                .length;\\n        }\\n\\n        // Allocate the memory array with the total size\\n        uint256[] memory allBorrowedReceipts = new uint256[](totalSize);\\n\\n        // Second pass: Populate the memory array\\n        uint256 currentIndex = 0;\\n        for (uint256 i = 0; i < borrowedTokens[user].length; i++) {\\n            for (\\n                uint256 c = 0;\\n                c < userBorrowReceipts[user][borrowedTokens[user][i]].length;\\n                c++\\n            ) {\\n                allBorrowedReceipts[currentIndex] = userBorrowReceipts[user][\\n                    borrowedTokens[user][i]\\n                ][c];\\n                currentIndex++;\\n            }\\n        }\\n\\n        return allBorrowedReceipts;\\n    }\\n}\\n\",\"keccak256\":\"0x23d12e286048e01ae6c9d69170fa609ecf53bb2df65e910707b76626784834ed\",\"license\":\"MIT\"},\"contracts/Lending/LendingTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror lendingTracker_addressNotAllowed();\\nerror lendingTracker_poolNotAvailable();\\nerror lendingTracker_amountTooHigh();\\nerror lendingTracker_receiptDoesntExist();\\nerror lendingTracker_poolExists();\\n\\n/**\\n * @title LendingTracker\\n * @dev Manages lending, borrowing, and collateral operations for a decentralized finance platform.\\n * Utilizes external price feeds for valuation and includes functionality for yield farming.\\n * This contract is responsible for tracking user interactions with lending pools and their collateralized positions.\\n */\\ncontract LendingTracker {\\n    // Events for logging various actions within the contract\\n    event userLended(\\n        address indexed user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n    event userWithdrawnLendedTokens(\\n        address indexed user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n    event userFarmedYield(\\n        address user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n\\n    // Owner of the contract, set at deployment\\n    address owner;\\n\\n    // Borrowing contract\\n    address public borrowingContract;\\n\\n    // Constructor sets the deploying address as the owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Struct to hold lending pool and its associated price feed information\\n    struct tokenPool {\\n        Pool poolAddress; // ERC-20 Token address\\n        address priceAddress; // Chainlink price feed\\n    }\\n\\n    // Struct to track borrowing receipts for users\\n    struct borrowReceipt {\\n        address tokenAddress;\\n        uint256 amount;\\n        uint256 time;\\n        uint256 apy;\\n    }\\n\\n    // Mappings to track lending pools, user interactions, and collateral\\n    mapping(address => tokenPool) public tokenToPool; // To find pool for specific ERC20 address\\n    address[] public availableTokens; // All available tokens to lend, borrow and collateralize\\n\\n    mapping(address => mapping(address => uint256)) public userLendedAmount; // Lended amout of specific token for user\\n    mapping(address => address[]) public userLendedTokens; // All lended token addresses of user\\n\\n    /**\\n     * @notice Adds a new token pool for lending and borrowing.\\n     * @dev Deploys a new Lending contract for the token and registers it along with its price feed.\\n     * @param tokenAddress Address of the token for the new lending pool.\\n     * @param priceAddress Address of the Chainlink price feed for the token.\\n     */\\n    function addTokenPool(address tokenAddress, address priceAddress) external {\\n        if (msg.sender != owner) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        if (address(tokenToPool[tokenAddress].poolAddress) != address(0)) {\\n            revert lendingTracker_poolExists();\\n        }\\n        Pool newPool = new Pool(tokenAddress, borrowingContract);\\n        tokenToPool[tokenAddress] = tokenPool(newPool, priceAddress);\\n        availableTokens.push(tokenAddress);\\n    }\\n\\n    /**\\n     * @notice Changes the price feed for a given token.\\n     * @dev Allows the contract owner to update the price feed address in case of changes or migration.\\n     * @param tokenAddress Address of the token whose price feed is being updated.\\n     * @param priceAddress New address of the Chainlink price feed.\\n     */\\n    function changePriceFeed(\\n        address tokenAddress,\\n        address priceAddress\\n    ) external {\\n        // Checks if address is allowed to call this\\n        if (msg.sender != owner) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        // Checks if the pool exists\\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        tokenToPool[tokenAddress].priceAddress = priceAddress;\\n    }\\n\\n    /**\\n     * @notice Updates the borrowing APY for a specified token pool.\\n     * @param tokenAddress Address of the token whose lending pool APY is to be changed.\\n     * @param newAPY The new annual percentage yield for borrowing.\\n     */\\n    function changeBorrowingAPY(address tokenAddress, uint256 newAPY) external {\\n        if (msg.sender != owner) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        tokenToPool[tokenAddress].poolAddress.setBorrowingAPY(newAPY);\\n    }\\n\\n    /**\\n     * @notice Enables a user to lend tokens to a specific pool.\\n     * @dev Transfers tokens from the user to the lending pool contract and updates the tracking of lent amounts.\\n     * Requires token approval from the user to the LendingTracker contract.\\n     * @param tokenAddress The address of the token being lent.\\n     * @param tokenAmount The amount of tokens the user is lending.\\n     */\\n    function lendToken(address tokenAddress, uint256 tokenAmount) external {\\n        // Checks if pool exists\\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        // Transfer and approve tokens\\n        IERC20(tokenAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenAmount\\n        );\\n        IERC20(tokenAddress).approve(\\n            address(tokenToPool[tokenAddress].poolAddress),\\n            tokenAmount\\n        );\\n        // Maps the token address if needed\\n        if (\\n            newTokenChecker(userLendedTokens[msg.sender], tokenAddress) == true\\n        ) {\\n            userLendedTokens[msg.sender].push(tokenAddress);\\n        }\\n        // Add funds to mapping\\n        userLendedAmount[msg.sender][tokenAddress] += tokenAmount;\\n        tokenToPool[tokenAddress].poolAddress.lend(tokenAmount);\\n\\n        // Event\\n        emit userLended(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens previously lent to the lending pool by the user.\\n     * @dev Ensures the user cannot withdraw more than they have lent. Adjusts the user's lent amount record accordingly.\\n     * @param tokenAddress The address of the token to withdraw from the lending pool.\\n     * @param tokenAmount The amount of tokens to withdraw.\\n     */\\n    function withdrawLendedToken(\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    ) external {\\n        // Checks if pool exists\\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        // Checks if there is enough tokens in the pool\\n        if (userLendedAmount[msg.sender][tokenAddress] < tokenAmount) {\\n            revert lendingTracker_amountTooHigh();\\n        }\\n        userLendedAmount[msg.sender][tokenAddress] -= tokenAmount;\\n        tokenToPool[tokenAddress].poolAddress.withdraw(tokenAmount);\\n        // Transfer tokens to user\\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n\\n        // // Pop the lended token from the array\\n        if (userLendedAmount[msg.sender][tokenAddress] == 0) {\\n            for (uint256 i; i < userLendedTokens[msg.sender].length; i++) {\\n                if (userLendedTokens[msg.sender][i] == tokenAddress) {\\n                    userLendedTokens[msg.sender][i] ==\\n                        userLendedTokens[msg.sender][\\n                            userLendedTokens[msg.sender].length - 1\\n                        ];\\n                    userLendedTokens[msg.sender].pop();\\n                }\\n            }\\n        }\\n        // Event\\n        emit userWithdrawnLendedTokens(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Checks if a new token is not already tracked by the user's token array.\\n     * @dev Utility function to prevent duplicate entries in user token arrays.\\n     * @param userTokens Array of token addresses the user has interacted with.\\n     * @param token Address of the token to check.\\n     * @return bool True if the token is not in the array, false otherwise.\\n     */\\n    function newTokenChecker(\\n        address[] memory userTokens,\\n        address token\\n    ) internal pure returns (bool) {\\n        bool newToken = true;\\n        for (uint256 i; i < userTokens.length; i++) {\\n            if (token == userTokens[i]) {\\n                newToken = false;\\n            }\\n        }\\n        return newToken;\\n    }\\n\\n    /**\\n     * @notice Claims yield for the user based on the tokens they have lent to the pool.\\n     * @dev Calculates the yield based on the amount lent and the time passed, then transfers the yield to the user.\\n     * @param tokenAddress The address of the token for which yield is being claimed.\\n     */\\n    function getYield(address tokenAddress) external {\\n        uint256 yield = tokenToPool[tokenAddress].poolAddress.getYield(\\n            msg.sender,\\n            userLendedAmount[msg.sender][tokenAddress]\\n        );\\n        // Event\\n        emit userFarmedYield(msg.sender, tokenAddress, yield);\\n    }\\n\\n    /**\\n     * @notice Retrieves an array of all available tokens for lending and borrowing.\\n     * @dev Provides a list of token addresses that users can interact with within the lending platform.\\n     * @return An array containing the addresses of all available tokens.\\n     */\\n    function allAvailableTokens() external view returns (address[] memory) {\\n        return availableTokens;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the borrowing contract.\\n     * @dev Allows the owner to define the contract responsible for borrowing functionality.\\n     * @param newBorrowingContract The address of the new borrowing contract.\\n     */\\n    function addBorrowingContract(address newBorrowingContract) external {\\n        borrowingContract = newBorrowingContract;\\n    }\\n\\n    /**\\n     * @notice Retrieves an array of tokens that a user has lent to the lending pools.\\n     * @dev Provides insight into the tokens a specific user has contributed for lending.\\n     * @param user The address of the user whose lent tokens are being queried.\\n     * @return An array containing the addresses of tokens lent by the user.\\n     */\\n    function getLoanedTokens(\\n        address user\\n    ) external view returns (address[] memory) {\\n        return userLendedTokens[user];\\n    }\\n}\\n\",\"keccak256\":\"0x282d48069ed68202b67fc72fc55653496765dcbf79321edfaa21f96df005c0a1\",\"license\":\"MIT\"},\"contracts/Lending/Pool.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.9;\\n\\n// OpenZeppelin's ERC20 interface for interactions with ERC20 tokens.\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n// Custom errors for specific failure conditions.\\nerror lending_outOfReserve();\\nerror lending_addressNotAllowed();\\nerror lending_reserveNotAvailable();\\nerror lending_notEnoughTimePassed();\\n\\n/**\\n * @title Lending\\n * @dev Implements lending and yield farming functionalities for a specific ERC20 token.\\n * This contract allows tokens to be lent out and borrowed, tracks yield farming activities,\\n * and allows for the accumulation and withdrawal of yield based on predefined APY.\\n */\\ncontract Pool {\\n    // The ERC20 token used for lending and borrowing.\\n    IERC20 public token;\\n\\n    // Address of the owner contract.\\n    address public ownerContract;\\n    address public borrowingContract;\\n\\n    // Total amount of tokens lent out.\\n    uint256 public amoutLended;\\n\\n    // Available reserve for borrowing.\\n    uint256 public reserve;\\n\\n    // Annual Percentage Yield for borrowing.\\n    uint256 public borrowingAPY;\\n\\n    // Total yield generated.\\n    uint256 public yield;\\n\\n    // Yield already farmed.\\n    uint256 public farmedYield;\\n\\n    // Mapping of addresses to their last yield farming timestamp.\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n\\n    // Mapping of addresses to the amount of yield they have taken.\\n    mapping(address => uint256) public yieldTaken;\\n\\n    /**\\n     * @dev Ensures that only the owner contract can call the modified function.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != ownerContract && msg.sender != borrowingContract) {\\n            revert lending_addressNotAllowed();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @param _token The ERC20 token address for lending and borrowing.\\n     */\\n    constructor(address _token, address newBorrowingContract) {\\n        borrowingContract = newBorrowingContract;\\n        token = IERC20(_token);\\n        ownerContract = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Allows the owner to borrow tokens from the reserve.\\n     * @param amount The amount of tokens to borrow.\\n     */\\n    function borrow(uint256 amount) external onlyOwner {\\n        if (reserve - amount < 0) {\\n            revert lending_outOfReserve();\\n        }\\n        token.transfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to lend tokens to the contract.\\n     * @param amount The amount of tokens to lend.\\n     */\\n    function lend(uint256 amount) external onlyOwner {\\n        token.transferFrom(msg.sender, address(this), amount);\\n        reserve += amount;\\n    }\\n\\n    /**\\n     * @notice Sets the borrowing APY.\\n     * @param newAPY The new APY value.\\n     */\\n    function setBorrowingAPY(uint256 newAPY) external onlyOwner {\\n        borrowingAPY = newAPY;\\n    }\\n\\n    /**\\n     * @notice Checks if enough time has passed for a user to farm yield again.\\n     * @param user The address of the user.\\n     * @return bool True if enough time has passed, false otherwise.\\n     */\\n    function isTime(address user) internal view returns (bool) {\\n        lastYieldFarmedTime[user];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[user] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens from the reserve.\\n     * This function allows the owner to withdraw tokens from the available reserve, reducing the reserve balance.\\n     * @param amount The amount of tokens to withdraw from the reserve.\\n     */\\n    function withdraw(uint256 amount) external onlyOwner {\\n        if (reserve - amount < 0) {\\n            revert lending_reserveNotAvailable();\\n        }\\n        token.transfer(msg.sender, amount);\\n        reserve -= amount;\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the available yield for a user.\\n     * This function updates the yield taken and farmed yield accordingly.\\n     * @param user The address of the user farming yield.\\n     * @param tokenAmount The amount of tokens used for calculating the user's share of the yield.\\n     * @return uint256 The amount of yield available for the user.\\n     */\\n    function getYield(\\n        address user,\\n        uint256 tokenAmount\\n    ) external onlyOwner returns (uint256) {\\n        if (isTime(user) == false) {\\n            revert lending_notEnoughTimePassed();\\n        }\\n        lastYieldFarmedTime[user] = block.timestamp; // Reentrancy guard\\n        uint256 yieldSoFar = yieldTaken[user];\\n        uint256 userLiquidity = (tokenAmount * 100) / amoutLended;\\n        uint256 availableYield = ((yield -\\n            ((yieldSoFar * 100) / userLiquidity)) * userLiquidity) / 100;\\n\\n        if (availableYield > yield - farmedYield) {\\n            revert lending_notEnoughTimePassed(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[msg.sender] += availableYield;\\n        farmedYield += availableYield;\\n        token.transfer(user, yield);\\n        return availableYield;\\n    }\\n\\n    // To book how much yield came to the contract\\n    function bookYield(uint256 _yield) external onlyOwner {\\n        yield += _yield;\\n    }\\n}\\n\",\"keccak256\":\"0x453bba3554031863c52374dacbc546d3ed976525cdb6148cc2161a0f086ddd84\",\"license\":\"MIT\"},\"contracts/Router/InterfaceBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IZKBridge {\\n    // @notice send a zkBridge message to the specified address at a zkBridge endpoint.\\n    // @param dstChainId - the destination chain identifier\\n    // @param dstAddress - the address on destination chain\\n    // @param payload - a custom bytes payload to send to the destination contract\\n    function send(\\n        uint16 dstChainId,\\n        address dstAddress,\\n        bytes memory payload\\n    ) external payable returns (uint64 nonce);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param dstChainId - the destination chain identifier\\n    function estimateFee(uint16 dstChainId) external view returns (uint256 fee);\\n}\\n\\ninterface IZKBridgeReceiver {\\n    // @notice zkBridge endpoint will invoke this function to deliver the message on the destination\\n    // @param srcChainId - the source endpoint identifier\\n    // @param srcAddress - the source sending contract address from the source chain\\n    // @param nonce - the ordered message nonce\\n    // @param payload - a custom bytes payload from send chain\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x57b2588179cffda143a904e7f55db5eebc526fa479fd3004ea2f521a7fa438a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052604b6000553480156200001657600080fd5b5060405162005b7738038062005b7783398181016040528101906200003c919062000171565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001b8565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000139826200010c565b9050919050565b6200014b816200012c565b81146200015757600080fd5b50565b6000815190506200016b8162000140565b92915050565b600080604083850312156200018b576200018a62000107565b5b60006200019b858286016200015a565b9250506020620001ae858286016200015a565b9150509250929050565b6159af80620001c86000396000f3fe6080604052600436106101355760003560e01c80636fb49d73116100ab578063c31c9c071161006f578063c31c9c071461045f578063cc218ece1461048a578063dbf50bfc146104c7578063dc73e49c146104f2578063e0b1d2371461051d578063ed903f7a1461055d57610135565b80636fb49d7314610340578063784eddd81461036b57806383eaf8bc146103a8578063b2f7f916146103e5578063b3f8d9001461042257610135565b8063322de332116100fd578063322de3321461022257806347c47ed31461024b5780634bb3df99146102745780635a91b39c1461029d5780635cf8f780146102c65780636178bad61461030357610135565b80630d9328a61461013a578063106c6dbc1461017757806315ec777a146101a05780632b798f49146101c95780632cb8f67614610206575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c9190614cc4565b61059a565b60405161016e9190614d26565b60405180910390f35b34801561018357600080fd5b5061019e60048036038101906101999190614d41565b61074e565b005b3480156101ac57600080fd5b506101c760048036038101906101c29190614d81565b6112f5565b005b3480156101d557600080fd5b506101f060048036038101906101eb9190614dae565b6113c0565b6040516101fd9190614dfd565b60405180910390f35b610220600480360381019061021b9190614d81565b61140e565b005b34801561022e57600080fd5b5061024960048036038101906102449190614dae565b61274e565b005b34801561025757600080fd5b50610272600480360381019061026d9190614d81565b612bb2565b005b34801561028057600080fd5b5061029b60048036038101906102969190614dae565b612c7d565b005b3480156102a957600080fd5b506102c460048036038101906102bf9190614dae565b61344c565b005b3480156102d257600080fd5b506102ed60048036038101906102e89190614dae565b613b53565b6040516102fa9190614dfd565b60405180910390f35b34801561030f57600080fd5b5061032a60048036038101906103259190614d81565b613ba1565b6040516103379190614ed6565b60405180910390f35b34801561034c57600080fd5b50610355613c6e565b6040516103629190614f11565b60405180910390f35b34801561037757600080fd5b50610392600480360381019061038d9190614f2c565b613c74565b60405161039f9190614f11565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca9190614f2c565b614480565b6040516103dc9190614d26565b60405180910390f35b3480156103f157600080fd5b5061040c60048036038101906104079190614d81565b6144be565b6040516104199190614d26565b60405180910390f35b34801561042e57600080fd5b5061044960048036038101906104449190614d81565b6144d6565b604051610456919061503d565b60405180910390f35b34801561046b57600080fd5b50610474614956565b60405161048191906150be565b60405180910390f35b34801561049657600080fd5b506104b160048036038101906104ac91906150d9565b61497c565b6040516104be9190614d26565b60405180910390f35b3480156104d357600080fd5b506104dc6149a1565b6040516104e9919061514c565b60405180910390f35b3480156104fe57600080fd5b506105076149c7565b6040516105149190614dfd565b60405180910390f35b34801561052957600080fd5b50610544600480360381019061053f9190614dae565b6149ed565b6040516105549493929190615167565b60405180910390f35b34801561056957600080fd5b50610584600480360381019061057f9190614d81565b614a4a565b6040516105919190614ed6565b60405180910390f35b600080600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206003015490506000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206002015490506000600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060010154905060008314156106b85760009350505050610747565b808511156106f2576040517f6aff58d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606463bbf81e0085858560648b61070b91906151db565b6107159190615264565b61071f91906151db565b61072991906151db565b6107339190615264565b61073d91906151db565b9050809450505050505b9392505050565b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206001015414156107dc576040517fd4ca1fe200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206001015461083d9190615295565b1015610875576040517f6fc3494000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060010160008282546109509190615295565b92505081905550600061096484338561059a565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5846040518263ffffffff1660e01b81526004016109c39190614dfd565b604080518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a12919061531c565b5090508273ffffffffffffffffffffffffffffffffffffffff166323b872dd33838588610a3f919061535c565b6040518463ffffffff1660e01b8152600401610a5d939291906153b2565b602060405180830381600087803b158015610a7757600080fd5b505af1158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf9190615421565b508073ffffffffffffffffffffffffffffffffffffffff1663cd682060836040518263ffffffff1660e01b8152600401610ae99190614d26565b600060405180830381600087803b158015610b0357600080fd5b505af1158015610b17573d6000803e3d6000fd5b505050506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010154141561129a5760005b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610f175785600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610c9057610c8f61544e565b5b90600052602060002001541415610f0457600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050610da99190615295565b81548110610dba57610db961544e565b5b9060005260206000200154600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610e5357610e5261544e565b5b9060005260206000200181905550600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480610eed57610eec61547d565b5b600190038181906000526020600020016000905590555b8080610f0f906154ac565b915050610b7a565b506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905014156112995760005b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015611297578373ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106110555761105461544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561128457600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061112a9190615295565b8154811061113b5761113a61544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106111b7576111b661544e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548061124e5761124d61547d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b808061128f906154ac565b915050610fa3565b505b5b3373ffffffffffffffffffffffffffffffffffffffff167f3d3dc018f55160b3fa5bcc9f5f8f595211524dd7cc1320607df0a09c236dd50e848787866040516112e69493929190615167565b60405180910390a25050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461137c576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660205281600052604060002081815481106113dc57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005461141d82600080613c74565b13611454576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004790506000805b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015611aa2576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106114fa576114f961544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561161157808461160a919061535c565b93506117a9565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663635bc0c284600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401611694939291906153b2565b60206040518083038186803b1580156116ac57600080fd5b505afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e4919061550a565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9f5c0584600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401611767939291906153b2565b600060405180830381600087803b15801561178157600080fd5b505af1158015611795573d6000803e3d6000fd5b5050505080856117a5919061535c565b9450505b6000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020868154811061183d5761183c61544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506119349190615295565b815481106119455761194461544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106119c1576119c061544e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480611a5857611a5761547d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550508080611a9a906154ac565b91505061145d565b5060005b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156125a1576000806000600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110611b4657611b4561544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060005b600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015611ff9576000600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208681548110611c8d57611c8c61544e565b5b906000526020600020015490506000600a60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015490506000611cff838c8461059a565b90508082611d0d919061535c565b87611d18919061535c565b96508086611d26919061535c565b95506000600a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060010181905550600960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600960008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611e899190615295565b81548110611e9a57611e9961544e565b5b9060005260206000200154600960008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208581548110611f3357611f3261544e565b5b9060005260206000200181905550600960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480611fcd57611fcc61547d565b5b600190038181906000526020600020016000905590555050508480611ff1906154ac565b955050611b76565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561206357828561205c9190615295565b94506121fb565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663635bc0c283600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518463ffffffff1660e01b81526004016120e6939291906153b2565b60206040518083038186803b1580156120fe57600080fd5b505afa158015612112573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612136919061550a565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9f5c05600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846040518463ffffffff1660e01b81526004016121b9939291906153b2565b600060405180830381600087803b1580156121d357600080fd5b505af11580156121e7573d6000803e3d6000fd5b5050505080866121f79190615295565b9550505b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5836040518263ffffffff1660e01b81526004016122589190614dfd565b604080518083038186803b15801561226f57600080fd5b505afa158015612283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a7919061531c565b5090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82866040518363ffffffff1660e01b81526004016122e5929190615537565b602060405180830381600087803b1580156122ff57600080fd5b505af1158015612313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123379190615421565b508073ffffffffffffffffffffffffffffffffffffffff1663cd682060846040518263ffffffff1660e01b81526004016123719190614d26565b600060405180830381600087803b15801561238b57600080fd5b505af115801561239f573d6000803e3d6000fd5b50505050600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506124319190615295565b815481106124425761244161544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086815481106124be576124bd61544e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806125555761255461547d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050508080612599906154ac565b915050611aa6565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016125ff929190615537565b602060405180830381600087803b15801561261957600080fd5b505af115801561262d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126519190615421565b50600047905060003373ffffffffffffffffffffffffffffffffffffffff16848361267c9190615295565b60405161268890615591565b60006040518083038185875af1925050503d80600081146126c5576040519150601f19603f3d011682016040523d82523d6000602084013e6126ca565b606091505b505090508061270e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270590615603565b60405180910390fd5b7f2c84ea15e82e281260950b7aac966ce1bffefd1627caf5e54ad38c2bbc5b1324853360405161273f929190615623565b60405180910390a15050505050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5856040518263ffffffff1660e01b81526004016127ac9190614dfd565b604080518083038186803b1580156127c357600080fd5b505afa1580156127d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fb919061531c565b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612866576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6b204fce5e3e250261100000008361287d83614b17565b61288791906151db565b10156128bf576040517f779423de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016128fc939291906153b2565b602060405180830381600087803b15801561291657600080fd5b505af115801561292a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294e9190615421565b5060011515612a20600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612a1557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116129cb575b505050505086614ba7565b15151415612ac957600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b55919061535c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb759534d8717c1bc7cde21fa6affd5a9d205d5ab4c3bce20bd815a13976029228585604051612ba4929190615537565b60405180910390a250505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c39576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d079190615295565b108015612d5657506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050115b15612d8d576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5846040518263ffffffff1660e01b8152600401612dea9190614dfd565b604080518083038186803b158015612e0157600080fd5b505afa158015612e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e39919061531c565b9150506402540be400600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ec883614b17565b612ed291906151db565b1015612f5857600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fe49190615295565b925050819055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401613026929190615537565b602060405180830381600087803b15801561304057600080fd5b505af1158015613054573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130789190615421565b506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156133f75760005b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156133f5578373ffffffffffffffffffffffffffffffffffffffff16600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106131b3576131b261544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156133e257600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506132889190615295565b815481106132995761329861544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106133155761331461544e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806133ac576133ab61547d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b80806133ed906154ac565b915050613101565b505b3373ffffffffffffffffffffffffffffffffffffffff167fcfe1e6d30a42cc481f02ea9cce49c86f8ae93242f28b0622f864b30a35bbb2d2848460405161343f929190615537565b60405180910390a2505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5846040518263ffffffff1660e01b81526004016134a99190614dfd565b604080518083038186803b1580156134c057600080fd5b505afa1580156134d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f8919061531c565b509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613562576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054613570338585613c74565b126135a7576040517f6fc3494000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec836040518263ffffffff1660e01b81526004016135e09190614d26565b600060405180830381600087803b1580156135fa57600080fd5b505af115801561360e573d6000803e3d6000fd5b50505050600115156136e3600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156136d857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161368e575b505050505085614ba7565b1515141561378c57600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054908060018154018082558091505060019003906000526020600020016000909190919091505560405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020014281526020018273ffffffffffffffffffffffffffffffffffffffff16636140dfd06040518163ffffffff1660e01b815260040160206040518083038186803b1580156138e757600080fd5b505afa1580156138fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391f919061550a565b815250600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301559050508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401613a54929190615537565b602060405180830381600087803b158015613a6e57600080fd5b505af1158015613a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa69190615421565b506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613af7919061535c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fde1ec58d6821a902fd200541e0254901c79b0c05f4a9d50d6dad669c8645805f8484604051613b46929190615537565b60405180910390a2505050565b60076020528160005260406000208181548110613b6f57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613c6257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613c18575b50505050509050919050565b60005481565b6000806000806000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5886040518263ffffffff1660e01b8152600401613cd79190614dfd565b604080518083038186803b158015613cee57600080fd5b505afa158015613d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d26919061531c565b9150915060008614158015613d685750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15613d95576000613d7882614b17565b90508681613d86919061564c565b84613d919190615763565b9350505b60005b600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015613fcf576000600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110613e3557613e3461544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5846040518263ffffffff1660e01b8152600401613f409190614dfd565b604080518083038186803b158015613f5757600080fd5b505afa158015613f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8f919061531c565b9150506000613f9d82614b17565b90508281613fab919061564c565b89613fb69190615763565b9850505050508080613fc7906154ac565b915050613d98565b5060005b600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561445a576000600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106140705761406f61544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8180549050811015614444576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008484815481106141825761418161544e565b5b906000526020600020015481526020019081526020016000206002015490506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008585815481106141f7576141f661544e565b5b906000526020600020015481526020019081526020016000206001015490506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086868154811061426c5761426b61544e565b5b9060005260206000200154815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008787815481106143015761430061544e565b5b90600052602060002001548152602001908152602001600020600301549050600063bbf81e0082868661433491906151db565b61433e91906151db565b6143489190615264565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5856040518263ffffffff1660e01b81526004016143a79190614dfd565b604080518083038186803b1580156143be57600080fd5b505afa1580156143d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143f6919061531c565b915050600061440482614b17565b90508583614412919061535c565b8161441d919061564c565b8e6144289190615763565b9d5050505050505050808061443c906154ac565b915050614120565b5050508080614452906154ac565b915050613fd3565b5083606484614469919061564c565b61447391906157f7565b9450505050509392505050565b600960205282600052604060002060205281600052604060002081815481106144a857600080fd5b9060005260206000200160009250925050505481565b60086020528060005260406000206000915090505481565b60606000805b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561464157600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106145b8576145b761544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508261462c919061535c565b91508080614639906154ac565b9150506144dc565b5060008167ffffffffffffffff81111561465e5761465d615861565b5b60405190808252806020026020018201604052801561468c5781602001602082028036833780820191505090505b5090506000805b600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561494a5760005b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106147725761477161544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561493657600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106148745761487361544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481106148eb576148ea61544e565b5b90600052602060002001548484815181106149095761490861544e565b5b6020026020010181815250508280614920906154ac565b935050808061492e906154ac565b9150506146e0565b508080614942906154ac565b915050614693565b50819350505050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052816000526040600020602052806000526040600020600091509150505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015614b0b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311614ac1575b50505050509050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015614b6057600080fd5b505afa158015614b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b9891906158fe565b50505091505080915050919050565b6000806001905060005b8451811015614c2057848181518110614bcd57614bcc61544e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614c0d57600091505b8080614c18906154ac565b915050614bb1565b508091505092915050565b600080fd5b6000819050919050565b614c4381614c30565b8114614c4e57600080fd5b50565b600081359050614c6081614c3a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614c9182614c66565b9050919050565b614ca181614c86565b8114614cac57600080fd5b50565b600081359050614cbe81614c98565b92915050565b600080600060608486031215614cdd57614cdc614c2b565b5b6000614ceb86828701614c51565b9350506020614cfc86828701614caf565b9250506040614d0d86828701614c51565b9150509250925092565b614d2081614c30565b82525050565b6000602082019050614d3b6000830184614d17565b92915050565b60008060408385031215614d5857614d57614c2b565b5b6000614d6685828601614c51565b9250506020614d7785828601614c51565b9150509250929050565b600060208284031215614d9757614d96614c2b565b5b6000614da584828501614caf565b91505092915050565b60008060408385031215614dc557614dc4614c2b565b5b6000614dd385828601614caf565b9250506020614de485828601614c51565b9150509250929050565b614df781614c86565b82525050565b6000602082019050614e126000830184614dee565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614e4d81614c86565b82525050565b6000614e5f8383614e44565b60208301905092915050565b6000602082019050919050565b6000614e8382614e18565b614e8d8185614e23565b9350614e9883614e34565b8060005b83811015614ec9578151614eb08882614e53565b9750614ebb83614e6b565b925050600181019050614e9c565b5085935050505092915050565b60006020820190508181036000830152614ef08184614e78565b905092915050565b6000819050919050565b614f0b81614ef8565b82525050565b6000602082019050614f266000830184614f02565b92915050565b600080600060608486031215614f4557614f44614c2b565b5b6000614f5386828701614caf565b9350506020614f6486828701614caf565b9250506040614f7586828701614c51565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614fb481614c30565b82525050565b6000614fc68383614fab565b60208301905092915050565b6000602082019050919050565b6000614fea82614f7f565b614ff48185614f8a565b9350614fff83614f9b565b8060005b838110156150305781516150178882614fba565b975061502283614fd2565b925050600181019050615003565b5085935050505092915050565b600060208201905081810360008301526150578184614fdf565b905092915050565b6000819050919050565b600061508461507f61507a84614c66565b61505f565b614c66565b9050919050565b600061509682615069565b9050919050565b60006150a88261508b565b9050919050565b6150b88161509d565b82525050565b60006020820190506150d360008301846150af565b92915050565b600080604083850312156150f0576150ef614c2b565b5b60006150fe85828601614caf565b925050602061510f85828601614caf565b9150509250929050565b600061512482615069565b9050919050565b600061513682615119565b9050919050565b6151468161512b565b82525050565b6000602082019050615161600083018461513d565b92915050565b600060808201905061517c6000830187614dee565b6151896020830186614d17565b6151966040830185614d17565b6151a36060830184614d17565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006151e682614c30565b91506151f183614c30565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561522a576152296151ac565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061526f82614c30565b915061527a83614c30565b92508261528a57615289615235565b5b828204905092915050565b60006152a082614c30565b91506152ab83614c30565b9250828210156152be576152bd6151ac565b5b828203905092915050565b60006152d482614c86565b9050919050565b6152e4816152c9565b81146152ef57600080fd5b50565b600081519050615301816152db565b92915050565b60008151905061531681614c98565b92915050565b6000806040838503121561533357615332614c2b565b5b6000615341858286016152f2565b925050602061535285828601615307565b9150509250929050565b600061536782614c30565b915061537283614c30565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156153a7576153a66151ac565b5b828201905092915050565b60006060820190506153c76000830186614dee565b6153d46020830185614dee565b6153e16040830184614d17565b949350505050565b60008115159050919050565b6153fe816153e9565b811461540957600080fd5b50565b60008151905061541b816153f5565b92915050565b60006020828403121561543757615436614c2b565b5b60006154458482850161540c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006154b782614c30565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156154ea576154e96151ac565b5b600182019050919050565b60008151905061550481614c3a565b92915050565b6000602082840312156155205761551f614c2b565b5b600061552e848285016154f5565b91505092915050565b600060408201905061554c6000830185614dee565b6155596020830184614d17565b9392505050565b600081905092915050565b50565b600061557b600083615560565b91506155868261556b565b600082019050919050565b600061559c8261556e565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006155ed6014836155a6565b91506155f8826155b7565b602082019050919050565b6000602082019050818103600083015261561c816155e0565b9050919050565b60006040820190506156386000830185614dee565b6156456020830184614dee565b9392505050565b600061565782614ef8565b915061566283614ef8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156156a1576156a06151ac565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156156de576156dd6151ac565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561571b5761571a6151ac565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615615758576157576151ac565b5b828202905092915050565b600061576e82614ef8565b915061577983614ef8565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156157b4576157b36151ac565b5b817f80000000000000000000000000000000000000000000000000000000000000000383126000831216156157ec576157eb6151ac565b5b828201905092915050565b600061580282614ef8565b915061580d83614ef8565b92508261581d5761581c615235565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615615856576158556151ac565b5b828205905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600069ffffffffffffffffffff82169050919050565b6158af81615890565b81146158ba57600080fd5b50565b6000815190506158cc816158a6565b92915050565b6158db81614ef8565b81146158e657600080fd5b50565b6000815190506158f8816158d2565b92915050565b600080600080600060a0868803121561591a57615919614c2b565b5b6000615928888289016158bd565b9550506020615939888289016158e9565b945050604061594a888289016154f5565b935050606061595b888289016154f5565b925050608061596c888289016158bd565b915050929550929590935056fea2646970667358221220812a0f3e6243e0a2cc9f006e7fd63d0b4fc06968f1230e126628004743b0a48d64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c80636fb49d73116100ab578063c31c9c071161006f578063c31c9c071461045f578063cc218ece1461048a578063dbf50bfc146104c7578063dc73e49c146104f2578063e0b1d2371461051d578063ed903f7a1461055d57610135565b80636fb49d7314610340578063784eddd81461036b57806383eaf8bc146103a8578063b2f7f916146103e5578063b3f8d9001461042257610135565b8063322de332116100fd578063322de3321461022257806347c47ed31461024b5780634bb3df99146102745780635a91b39c1461029d5780635cf8f780146102c65780636178bad61461030357610135565b80630d9328a61461013a578063106c6dbc1461017757806315ec777a146101a05780632b798f49146101c95780632cb8f67614610206575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c9190614cc4565b61059a565b60405161016e9190614d26565b60405180910390f35b34801561018357600080fd5b5061019e60048036038101906101999190614d41565b61074e565b005b3480156101ac57600080fd5b506101c760048036038101906101c29190614d81565b6112f5565b005b3480156101d557600080fd5b506101f060048036038101906101eb9190614dae565b6113c0565b6040516101fd9190614dfd565b60405180910390f35b610220600480360381019061021b9190614d81565b61140e565b005b34801561022e57600080fd5b5061024960048036038101906102449190614dae565b61274e565b005b34801561025757600080fd5b50610272600480360381019061026d9190614d81565b612bb2565b005b34801561028057600080fd5b5061029b60048036038101906102969190614dae565b612c7d565b005b3480156102a957600080fd5b506102c460048036038101906102bf9190614dae565b61344c565b005b3480156102d257600080fd5b506102ed60048036038101906102e89190614dae565b613b53565b6040516102fa9190614dfd565b60405180910390f35b34801561030f57600080fd5b5061032a60048036038101906103259190614d81565b613ba1565b6040516103379190614ed6565b60405180910390f35b34801561034c57600080fd5b50610355613c6e565b6040516103629190614f11565b60405180910390f35b34801561037757600080fd5b50610392600480360381019061038d9190614f2c565b613c74565b60405161039f9190614f11565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca9190614f2c565b614480565b6040516103dc9190614d26565b60405180910390f35b3480156103f157600080fd5b5061040c60048036038101906104079190614d81565b6144be565b6040516104199190614d26565b60405180910390f35b34801561042e57600080fd5b5061044960048036038101906104449190614d81565b6144d6565b604051610456919061503d565b60405180910390f35b34801561046b57600080fd5b50610474614956565b60405161048191906150be565b60405180910390f35b34801561049657600080fd5b506104b160048036038101906104ac91906150d9565b61497c565b6040516104be9190614d26565b60405180910390f35b3480156104d357600080fd5b506104dc6149a1565b6040516104e9919061514c565b60405180910390f35b3480156104fe57600080fd5b506105076149c7565b6040516105149190614dfd565b60405180910390f35b34801561052957600080fd5b50610544600480360381019061053f9190614dae565b6149ed565b6040516105549493929190615167565b60405180910390f35b34801561056957600080fd5b50610584600480360381019061057f9190614d81565b614a4a565b6040516105919190614ed6565b60405180910390f35b600080600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206003015490506000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206002015490506000600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060010154905060008314156106b85760009350505050610747565b808511156106f2576040517f6aff58d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606463bbf81e0085858560648b61070b91906151db565b6107159190615264565b61071f91906151db565b61072991906151db565b6107339190615264565b61073d91906151db565b9050809450505050505b9392505050565b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206001015414156107dc576040517fd4ca1fe200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206001015461083d9190615295565b1015610875576040517f6fc3494000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060010160008282546109509190615295565b92505081905550600061096484338561059a565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5846040518263ffffffff1660e01b81526004016109c39190614dfd565b604080518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a12919061531c565b5090508273ffffffffffffffffffffffffffffffffffffffff166323b872dd33838588610a3f919061535c565b6040518463ffffffff1660e01b8152600401610a5d939291906153b2565b602060405180830381600087803b158015610a7757600080fd5b505af1158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf9190615421565b508073ffffffffffffffffffffffffffffffffffffffff1663cd682060836040518263ffffffff1660e01b8152600401610ae99190614d26565b600060405180830381600087803b158015610b0357600080fd5b505af1158015610b17573d6000803e3d6000fd5b505050506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010154141561129a5760005b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610f175785600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610c9057610c8f61544e565b5b90600052602060002001541415610f0457600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050610da99190615295565b81548110610dba57610db961544e565b5b9060005260206000200154600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610e5357610e5261544e565b5b9060005260206000200181905550600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480610eed57610eec61547d565b5b600190038181906000526020600020016000905590555b8080610f0f906154ac565b915050610b7a565b506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905014156112995760005b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015611297578373ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106110555761105461544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561128457600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061112a9190615295565b8154811061113b5761113a61544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106111b7576111b661544e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548061124e5761124d61547d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b808061128f906154ac565b915050610fa3565b505b5b3373ffffffffffffffffffffffffffffffffffffffff167f3d3dc018f55160b3fa5bcc9f5f8f595211524dd7cc1320607df0a09c236dd50e848787866040516112e69493929190615167565b60405180910390a25050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461137c576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660205281600052604060002081815481106113dc57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005461141d82600080613c74565b13611454576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004790506000805b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015611aa2576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106114fa576114f961544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561161157808461160a919061535c565b93506117a9565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663635bc0c284600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401611694939291906153b2565b60206040518083038186803b1580156116ac57600080fd5b505afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e4919061550a565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9f5c0584600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401611767939291906153b2565b600060405180830381600087803b15801561178157600080fd5b505af1158015611795573d6000803e3d6000fd5b5050505080856117a5919061535c565b9450505b6000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020868154811061183d5761183c61544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506119349190615295565b815481106119455761194461544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106119c1576119c061544e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480611a5857611a5761547d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550508080611a9a906154ac565b91505061145d565b5060005b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156125a1576000806000600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110611b4657611b4561544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060005b600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015611ff9576000600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208681548110611c8d57611c8c61544e565b5b906000526020600020015490506000600a60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015490506000611cff838c8461059a565b90508082611d0d919061535c565b87611d18919061535c565b96508086611d26919061535c565b95506000600a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060010181905550600960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600960008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611e899190615295565b81548110611e9a57611e9961544e565b5b9060005260206000200154600960008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208581548110611f3357611f3261544e565b5b9060005260206000200181905550600960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480611fcd57611fcc61547d565b5b600190038181906000526020600020016000905590555050508480611ff1906154ac565b955050611b76565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561206357828561205c9190615295565b94506121fb565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663635bc0c283600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518463ffffffff1660e01b81526004016120e6939291906153b2565b60206040518083038186803b1580156120fe57600080fd5b505afa158015612112573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612136919061550a565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9f5c05600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846040518463ffffffff1660e01b81526004016121b9939291906153b2565b600060405180830381600087803b1580156121d357600080fd5b505af11580156121e7573d6000803e3d6000fd5b5050505080866121f79190615295565b9550505b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5836040518263ffffffff1660e01b81526004016122589190614dfd565b604080518083038186803b15801561226f57600080fd5b505afa158015612283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a7919061531c565b5090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82866040518363ffffffff1660e01b81526004016122e5929190615537565b602060405180830381600087803b1580156122ff57600080fd5b505af1158015612313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123379190615421565b508073ffffffffffffffffffffffffffffffffffffffff1663cd682060846040518263ffffffff1660e01b81526004016123719190614d26565b600060405180830381600087803b15801561238b57600080fd5b505af115801561239f573d6000803e3d6000fd5b50505050600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506124319190615295565b815481106124425761244161544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086815481106124be576124bd61544e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806125555761255461547d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050508080612599906154ac565b915050611aa6565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016125ff929190615537565b602060405180830381600087803b15801561261957600080fd5b505af115801561262d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126519190615421565b50600047905060003373ffffffffffffffffffffffffffffffffffffffff16848361267c9190615295565b60405161268890615591565b60006040518083038185875af1925050503d80600081146126c5576040519150601f19603f3d011682016040523d82523d6000602084013e6126ca565b606091505b505090508061270e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270590615603565b60405180910390fd5b7f2c84ea15e82e281260950b7aac966ce1bffefd1627caf5e54ad38c2bbc5b1324853360405161273f929190615623565b60405180910390a15050505050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5856040518263ffffffff1660e01b81526004016127ac9190614dfd565b604080518083038186803b1580156127c357600080fd5b505afa1580156127d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fb919061531c565b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612866576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6b204fce5e3e250261100000008361287d83614b17565b61288791906151db565b10156128bf576040517f779423de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016128fc939291906153b2565b602060405180830381600087803b15801561291657600080fd5b505af115801561292a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294e9190615421565b5060011515612a20600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612a1557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116129cb575b505050505086614ba7565b15151415612ac957600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b55919061535c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb759534d8717c1bc7cde21fa6affd5a9d205d5ab4c3bce20bd815a13976029228585604051612ba4929190615537565b60405180910390a250505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c39576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d079190615295565b108015612d5657506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050115b15612d8d576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5846040518263ffffffff1660e01b8152600401612dea9190614dfd565b604080518083038186803b158015612e0157600080fd5b505afa158015612e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e39919061531c565b9150506402540be400600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ec883614b17565b612ed291906151db565b1015612f5857600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fe49190615295565b925050819055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401613026929190615537565b602060405180830381600087803b15801561304057600080fd5b505af1158015613054573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130789190615421565b506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156133f75760005b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156133f5578373ffffffffffffffffffffffffffffffffffffffff16600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106131b3576131b261544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156133e257600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506132889190615295565b815481106132995761329861544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106133155761331461544e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806133ac576133ab61547d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b80806133ed906154ac565b915050613101565b505b3373ffffffffffffffffffffffffffffffffffffffff167fcfe1e6d30a42cc481f02ea9cce49c86f8ae93242f28b0622f864b30a35bbb2d2848460405161343f929190615537565b60405180910390a2505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5846040518263ffffffff1660e01b81526004016134a99190614dfd565b604080518083038186803b1580156134c057600080fd5b505afa1580156134d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f8919061531c565b509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613562576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054613570338585613c74565b126135a7576040517f6fc3494000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec836040518263ffffffff1660e01b81526004016135e09190614d26565b600060405180830381600087803b1580156135fa57600080fd5b505af115801561360e573d6000803e3d6000fd5b50505050600115156136e3600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156136d857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161368e575b505050505085614ba7565b1515141561378c57600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054908060018154018082558091505060019003906000526020600020016000909190919091505560405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020014281526020018273ffffffffffffffffffffffffffffffffffffffff16636140dfd06040518163ffffffff1660e01b815260040160206040518083038186803b1580156138e757600080fd5b505afa1580156138fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391f919061550a565b815250600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301559050508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401613a54929190615537565b602060405180830381600087803b158015613a6e57600080fd5b505af1158015613a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa69190615421565b506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613af7919061535c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fde1ec58d6821a902fd200541e0254901c79b0c05f4a9d50d6dad669c8645805f8484604051613b46929190615537565b60405180910390a2505050565b60076020528160005260406000208181548110613b6f57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613c6257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613c18575b50505050509050919050565b60005481565b6000806000806000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5886040518263ffffffff1660e01b8152600401613cd79190614dfd565b604080518083038186803b158015613cee57600080fd5b505afa158015613d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d26919061531c565b9150915060008614158015613d685750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15613d95576000613d7882614b17565b90508681613d86919061564c565b84613d919190615763565b9350505b60005b600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015613fcf576000600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110613e3557613e3461544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5846040518263ffffffff1660e01b8152600401613f409190614dfd565b604080518083038186803b158015613f5757600080fd5b505afa158015613f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8f919061531c565b9150506000613f9d82614b17565b90508281613fab919061564c565b89613fb69190615763565b9850505050508080613fc7906154ac565b915050613d98565b5060005b600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561445a576000600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106140705761406f61544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8180549050811015614444576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008484815481106141825761418161544e565b5b906000526020600020015481526020019081526020016000206002015490506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008585815481106141f7576141f661544e565b5b906000526020600020015481526020019081526020016000206001015490506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086868154811061426c5761426b61544e565b5b9060005260206000200154815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008787815481106143015761430061544e565b5b90600052602060002001548152602001908152602001600020600301549050600063bbf81e0082868661433491906151db565b61433e91906151db565b6143489190615264565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663989796b5856040518263ffffffff1660e01b81526004016143a79190614dfd565b604080518083038186803b1580156143be57600080fd5b505afa1580156143d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143f6919061531c565b915050600061440482614b17565b90508583614412919061535c565b8161441d919061564c565b8e6144289190615763565b9d5050505050505050808061443c906154ac565b915050614120565b5050508080614452906154ac565b915050613fd3565b5083606484614469919061564c565b61447391906157f7565b9450505050509392505050565b600960205282600052604060002060205281600052604060002081815481106144a857600080fd5b9060005260206000200160009250925050505481565b60086020528060005260406000206000915090505481565b60606000805b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561464157600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106145b8576145b761544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508261462c919061535c565b91508080614639906154ac565b9150506144dc565b5060008167ffffffffffffffff81111561465e5761465d615861565b5b60405190808252806020026020018201604052801561468c5781602001602082028036833780820191505090505b5090506000805b600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561494a5760005b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106147725761477161544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561493657600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106148745761487361544e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481106148eb576148ea61544e565b5b90600052602060002001548484815181106149095761490861544e565b5b6020026020010181815250508280614920906154ac565b935050808061492e906154ac565b9150506146e0565b508080614942906154ac565b915050614693565b50819350505050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052816000526040600020602052806000526040600020600091509150505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015614b0b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311614ac1575b50505050509050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015614b6057600080fd5b505afa158015614b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b9891906158fe565b50505091505080915050919050565b6000806001905060005b8451811015614c2057848181518110614bcd57614bcc61544e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614c0d57600091505b8080614c18906154ac565b915050614bb1565b508091505092915050565b600080fd5b6000819050919050565b614c4381614c30565b8114614c4e57600080fd5b50565b600081359050614c6081614c3a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614c9182614c66565b9050919050565b614ca181614c86565b8114614cac57600080fd5b50565b600081359050614cbe81614c98565b92915050565b600080600060608486031215614cdd57614cdc614c2b565b5b6000614ceb86828701614c51565b9350506020614cfc86828701614caf565b9250506040614d0d86828701614c51565b9150509250925092565b614d2081614c30565b82525050565b6000602082019050614d3b6000830184614d17565b92915050565b60008060408385031215614d5857614d57614c2b565b5b6000614d6685828601614c51565b9250506020614d7785828601614c51565b9150509250929050565b600060208284031215614d9757614d96614c2b565b5b6000614da584828501614caf565b91505092915050565b60008060408385031215614dc557614dc4614c2b565b5b6000614dd385828601614caf565b9250506020614de485828601614c51565b9150509250929050565b614df781614c86565b82525050565b6000602082019050614e126000830184614dee565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614e4d81614c86565b82525050565b6000614e5f8383614e44565b60208301905092915050565b6000602082019050919050565b6000614e8382614e18565b614e8d8185614e23565b9350614e9883614e34565b8060005b83811015614ec9578151614eb08882614e53565b9750614ebb83614e6b565b925050600181019050614e9c565b5085935050505092915050565b60006020820190508181036000830152614ef08184614e78565b905092915050565b6000819050919050565b614f0b81614ef8565b82525050565b6000602082019050614f266000830184614f02565b92915050565b600080600060608486031215614f4557614f44614c2b565b5b6000614f5386828701614caf565b9350506020614f6486828701614caf565b9250506040614f7586828701614c51565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614fb481614c30565b82525050565b6000614fc68383614fab565b60208301905092915050565b6000602082019050919050565b6000614fea82614f7f565b614ff48185614f8a565b9350614fff83614f9b565b8060005b838110156150305781516150178882614fba565b975061502283614fd2565b925050600181019050615003565b5085935050505092915050565b600060208201905081810360008301526150578184614fdf565b905092915050565b6000819050919050565b600061508461507f61507a84614c66565b61505f565b614c66565b9050919050565b600061509682615069565b9050919050565b60006150a88261508b565b9050919050565b6150b88161509d565b82525050565b60006020820190506150d360008301846150af565b92915050565b600080604083850312156150f0576150ef614c2b565b5b60006150fe85828601614caf565b925050602061510f85828601614caf565b9150509250929050565b600061512482615069565b9050919050565b600061513682615119565b9050919050565b6151468161512b565b82525050565b6000602082019050615161600083018461513d565b92915050565b600060808201905061517c6000830187614dee565b6151896020830186614d17565b6151966040830185614d17565b6151a36060830184614d17565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006151e682614c30565b91506151f183614c30565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561522a576152296151ac565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061526f82614c30565b915061527a83614c30565b92508261528a57615289615235565b5b828204905092915050565b60006152a082614c30565b91506152ab83614c30565b9250828210156152be576152bd6151ac565b5b828203905092915050565b60006152d482614c86565b9050919050565b6152e4816152c9565b81146152ef57600080fd5b50565b600081519050615301816152db565b92915050565b60008151905061531681614c98565b92915050565b6000806040838503121561533357615332614c2b565b5b6000615341858286016152f2565b925050602061535285828601615307565b9150509250929050565b600061536782614c30565b915061537283614c30565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156153a7576153a66151ac565b5b828201905092915050565b60006060820190506153c76000830186614dee565b6153d46020830185614dee565b6153e16040830184614d17565b949350505050565b60008115159050919050565b6153fe816153e9565b811461540957600080fd5b50565b60008151905061541b816153f5565b92915050565b60006020828403121561543757615436614c2b565b5b60006154458482850161540c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006154b782614c30565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156154ea576154e96151ac565b5b600182019050919050565b60008151905061550481614c3a565b92915050565b6000602082840312156155205761551f614c2b565b5b600061552e848285016154f5565b91505092915050565b600060408201905061554c6000830185614dee565b6155596020830184614d17565b9392505050565b600081905092915050565b50565b600061557b600083615560565b91506155868261556b565b600082019050919050565b600061559c8261556e565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006155ed6014836155a6565b91506155f8826155b7565b602082019050919050565b6000602082019050818103600083015261561c816155e0565b9050919050565b60006040820190506156386000830185614dee565b6156456020830184614dee565b9392505050565b600061565782614ef8565b915061566283614ef8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156156a1576156a06151ac565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156156de576156dd6151ac565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561571b5761571a6151ac565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615615758576157576151ac565b5b828202905092915050565b600061576e82614ef8565b915061577983614ef8565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156157b4576157b36151ac565b5b817f80000000000000000000000000000000000000000000000000000000000000000383126000831216156157ec576157eb6151ac565b5b828201905092915050565b600061580282614ef8565b915061580d83614ef8565b92508261581d5761581c615235565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615615856576158556151ac565b5b828205905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600069ffffffffffffffffffff82169050919050565b6158af81615890565b81146158ba57600080fd5b50565b6000815190506158cc816158a6565b92915050565b6158db81614ef8565b81146158e657600080fd5b50565b6000815190506158f8816158d2565b92915050565b600080600080600060a0868803121561591a57615919614c2b565b5b6000615928888289016158bd565b9550506020615939888289016158e9565b945050604061594a888289016154f5565b935050606061595b888289016154f5565b925050608061596c888289016158bd565b915050929550929590935056fea2646970667358221220812a0f3e6243e0a2cc9f006e7fd63d0b4fc06968f1230e126628004743b0a48d64736f6c63430008090033",
  "devdoc": {
    "details": "Manages lending, borrowing, and collateral operations for a decentralized finance platform. Utilizes external price feeds for valuation and includes functionality for yield farming. This contract is responsible for tracking user interactions with lending pools and their collateralized positions.",
    "kind": "dev",
    "methods": {
      "accruedInterest(uint256,address,uint256)": {
        "details": "Calculates interest based on the borrowing APY and time elapsed since the token was borrowed.",
        "params": {
          "_id": "The unique identifier of the borrow receipt.",
          "_user": "The address of the borrower.",
          "tokenAmount": "The amount of the borrowed token being returned."
        },
        "returns": {
          "_0": "uint256 The accrued interest."
        }
      },
      "addSwapRouter(address)": {
        "details": "Only the owner can call this function.",
        "params": {
          "_swapRouter": "The address of the new SwapRouter contract."
        }
      },
      "addSwapToken(address)": {
        "details": "Only the owner can call this function.",
        "params": {
          "newSwapToken": "The address of the new swap token."
        }
      },
      "borrowToken(address,uint256)": {
        "details": "The function checks for sufficient liquidity and adherence to the loan-to-value (LTV) ratio before permitting the borrow. Updates the user's borrow receipts to keep track of the borrowed amount and terms.",
        "params": {
          "tokenAddress": "The address of the token the user wishes to borrow.",
          "tokenAmount": "The amount of tokens the user wants to borrow."
        }
      },
      "getBorrowedReceipts(address)": {
        "params": {
          "user": "The address of the user."
        },
        "returns": {
          "_0": "uint256[] An array of borrow receipt IDs."
        }
      },
      "getBorrowedTokens(address)": {
        "params": {
          "user": "The address of the user."
        },
        "returns": {
          "_0": "address[] An array of borrowed token addresses."
        }
      },
      "getCollateralTokens(address)": {
        "params": {
          "user": "The address of the user."
        },
        "returns": {
          "_0": "address[] An array of collateral token addresses."
        }
      },
      "liquidityTreshold(address,address,uint256)": {
        "details": "Used to determine if a user's borrowings are within permissible limits. Can also factor in an additional amount being borrowed or provided as collateral.",
        "params": {
          "additionalTokenAddress": "Optionally, the address of a token being considered for borrowing/collateral.",
          "tokenAmount": "Optionally, the amount of the additional token being considered.",
          "user": "The address of the user."
        },
        "returns": {
          "_0": "The LTV ratio as a percentage."
        }
      },
      "returnBorrowedToken(uint256,uint256)": {
        "details": "Calculates interest based on the borrowing APY and time elapsed since the token was borrowed.",
        "params": {
          "id": "The unique identifier of the borrow receipt.",
          "tokenAmount": "The amount of the borrowed token being returned."
        }
      },
      "stakeCollateral(address,uint256)": {
        "details": "Transfers tokens from the user to this contract for collateralization. Updates the collateral tracking mappings.",
        "params": {
          "tokenAddress": "The address of the token being staked as collateral.",
          "tokenAmount": "The amount of the token to stake."
        }
      },
      "terminateCollateral(address)": {
        "details": "Meant to be called by an external mechanism (like a keeper) that monitors LTV ratios.",
        "params": {
          "userAddress": "The address of the user whose collateral is being liquidated."
        }
      },
      "unstakeCollateral(address,uint256)": {
        "details": "Ensures that the withdrawal does not violate the loan-to-value (LTV) requirements.",
        "params": {
          "tokenAddress": "The address of the token to unstake.",
          "tokenAmount": "The amount of the token to unstake."
        }
      }
    },
    "title": "LendingTracker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accruedInterest(uint256,address,uint256)": {
        "notice": "Computes the accrued interest on a loan."
      },
      "addSwapRouter(address)": {
        "notice": "Allows the owner to set the SwapRouter contract address."
      },
      "addSwapToken(address)": {
        "notice": "Sets the swap token address for liquidations."
      },
      "borrowToken(address,uint256)": {
        "notice": "Allows a user to borrow tokens from a specific lending pool."
      },
      "getBorrowedReceipts(address)": {
        "notice": "Retrieves an array of borrow receipt IDs for a user."
      },
      "getBorrowedTokens(address)": {
        "notice": "Retrieves an array of token addresses borrowed by a user."
      },
      "getCollateralTokens(address)": {
        "notice": "Retrieves an array of token addresses used as collateral by a user."
      },
      "liquidityTreshold(address,address,uint256)": {
        "notice": "Computes the current loan-to-value (LTV) ratio for a user's borrowed funds against their staked collateral."
      },
      "returnBorrowedToken(uint256,uint256)": {
        "notice": "Allows a user to return borrowed tokens along with any accrued interest."
      },
      "stakeCollateral(address,uint256)": {
        "notice": "Allows users to stake tokens as collateral for borrowing."
      },
      "terminateCollateral(address)": {
        "notice": "Initiates the liquidation of a user's collateral if their LTV ratio exceeds the maximum permitted value, the terminator get the remaining collateral."
      },
      "unstakeCollateral(address,uint256)": {
        "notice": "Permits users to withdraw their staked collateral, provided they have no outstanding loans."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3215,
        "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
        "label": "ltv",
        "offset": 0,
        "slot": "0",
        "type": "t_int256"
      },
      {
        "astId": 3217,
        "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3220,
        "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
        "label": "swapRouter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(SwapRouter)3158"
      },
      {
        "astId": 3222,
        "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
        "label": "swapToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3225,
        "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
        "label": "lendingTracker",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(LendingTracker)5415"
      },
      {
        "astId": 3268,
        "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
        "label": "collateral",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3273,
        "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
        "label": "collateralTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3278,
        "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
        "label": "borrowedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3282,
        "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
        "label": "borrowingId",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3289,
        "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
        "label": "userBorrowReceipts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 3296,
        "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
        "label": "borrowReceiptData",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(borrowReceipt)3262_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(LendingTracker)5415": {
        "encoding": "inplace",
        "label": "contract LendingTracker",
        "numberOfBytes": "20"
      },
      "t_contract(SwapRouter)3158": {
        "encoding": "inplace",
        "label": "contract SwapRouter",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(borrowReceipt)3262_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct BorrowingTracker.borrowReceipt))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(borrowReceipt)3262_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(borrowReceipt)3262_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BorrowingTracker.borrowReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(borrowReceipt)3262_storage"
      },
      "t_struct(borrowReceipt)3262_storage": {
        "encoding": "inplace",
        "label": "struct BorrowingTracker.borrowReceipt",
        "members": [
          {
            "astId": 3255,
            "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3257,
            "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3259,
            "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
            "label": "time",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3261,
            "contract": "contracts/Lending/BorrowingTracker.sol:BorrowingTracker",
            "label": "apy",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}