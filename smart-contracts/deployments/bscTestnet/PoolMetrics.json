{
  "address": "0xCFa1b4381C4C62cf4B92e955dB1AEDA04bf55F81",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethPriceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress2",
          "type": "address"
        }
      ],
      "name": "dailyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress2",
          "type": "address"
        }
      ],
      "name": "dailyRoi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "marketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress2",
          "type": "address"
        }
      ],
      "name": "pairMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress2",
          "type": "address"
        }
      ],
      "name": "pairTvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolTracker",
      "outputs": [
        {
          "internalType": "contract PoolTracker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress2",
          "type": "address"
        }
      ],
      "name": "totalRoi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "tvlRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "usdValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xebfe143bf02aa6a0e0a90636471091c30a5a82d3557609ed911224907795ea2e",
  "receipt": {
    "to": null,
    "from": "0x540467feca43907A701311D0721df481D1f9e238",
    "contractAddress": "0xCFa1b4381C4C62cf4B92e955dB1AEDA04bf55F81",
    "transactionIndex": 5,
    "gasUsed": "1669542",
    "logsBloom": "0x
    "blockHash": "0x279cdbc6ef3d029bbab5161ca7cc7ad4ff5f3174d1684e92a75a0ffab757f726",
    "transactionHash": "0xebfe143bf02aa6a0e0a90636471091c30a5a82d3557609ed911224907795ea2e",
    "logs": [],
    "blockNumber": 38280445,
    "cumulativeGasUsed": "1938063",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46439AdBfA62FF3DC6Cd66A95e36279956ea32ba",
    "0x143db3CEEfbdfe5631aDD3E50f7614B6ba708BA7"
  ],
  "numDeployments": 5,
  "solcInputHash": "a491286b4e87cc4d72fac35e4211eb53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethPriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress2\",\"type\":\"address\"}],\"name\":\"dailyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress2\",\"type\":\"address\"}],\"name\":\"dailyRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"marketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress2\",\"type\":\"address\"}],\"name\":\"pairMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress2\",\"type\":\"address\"}],\"name\":\"pairTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTracker\",\"outputs\":[{\"internalType\":\"contract PoolTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress2\",\"type\":\"address\"}],\"name\":\"totalRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tvlRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"usdValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract for computing various on chain metrics related to liquidity pools and tokens.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor function initializes the PoolTracker and ETH price feed addresses.\",\"params\":{\"_ethPriceFeed\":\"Address of the ETH price feed contract.\",\"_poolTracker\":\"Address of the PoolTracker contract.\"}},\"dailyRate(address,address)\":{\"details\":\"Computes the daily yield rate for a liquidity pool with two tokens.\",\"params\":{\"tokenAddress\":\"Address of the first token.\",\"tokenAddress2\":\"Address of the second token.\"},\"returns\":{\"_0\":\"The daily yield rate of the liquidity pool.\"}},\"dailyRoi(address,address)\":{\"details\":\"Computes the daily ROI for a liquidity pool with two tokens.\",\"params\":{\"tokenAddress\":\"Address of the first token.\",\"tokenAddress2\":\"Address of the second token.\"},\"returns\":{\"_0\":\"The daily ROI of the liquidity pool.\"}},\"marketCap(address)\":{\"details\":\"Computes the market capitalization of a token.\",\"params\":{\"tokenAddress\":\"Address of the token.\"},\"returns\":{\"_0\":\"The market capitalization of the token.\"}},\"pairMarketCap(address,address)\":{\"details\":\"Computes the combined market capitalization of two tokens.\",\"params\":{\"tokenAddress\":\"Address of the first token.\",\"tokenAddress2\":\"Address of the second token.\"},\"returns\":{\"_0\":\"The combined market capitalization of the two tokens.\"}},\"pairTvl(address,address)\":{\"details\":\"Computes the combined TVL of two tokens in a liquidity pool.\",\"params\":{\"tokenAddress\":\"Address of the first token.\",\"tokenAddress2\":\"Address of the second token.\"},\"returns\":{\"_0\":\"The combined TVL of the two tokens.\"}},\"totalRoi(address,address)\":{\"details\":\"Computes the total return on investment (ROI) for a liquidity pool with two tokens.\",\"params\":{\"tokenAddress\":\"Address of the first token.\",\"tokenAddress2\":\"Address of the second token.\"},\"returns\":{\"_0\":\"The total ROI of the liquidity pool.\"}},\"tvl(address)\":{\"details\":\"Computes the total value locked (TVL) in a liquidity pool for a given token.\",\"params\":{\"tokenAddress\":\"Address of the token.\"},\"returns\":{\"_0\":\"The TVL of the token.\"}},\"tvlRatio(address)\":{\"details\":\"Computes the TVL ratio of a token, which is TVL divided by market capitalization.\",\"params\":{\"tokenAddress\":\"Address of the token.\"},\"returns\":{\"_0\":\"The TVL ratio of the token.\"}},\"usdValue(address,uint256)\":{\"details\":\"Computes the USD value of a token based on its amount and price feed.\",\"params\":{\"tokenAddress\":\"Address of the token.\",\"tokenAmount\":\"Amount of the token.\"},\"returns\":{\"_0\":\"The USD value of the token.\"}}},\"title\":\"PoolMetrics\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex/PoolMetrics.sol\":\"PoolMetrics\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Dex/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../Router/InterfaceBridge.sol\\\";\\nimport \\\"./PoolTracker.sol\\\";\\n\\n// Custom errors for more descriptive and gas-efficient failure handling.\\nerror assetNotCorrect();\\nerror notEnoughTokens();\\nerror notEnoughGas();\\nerror notEnoughTimePassed();\\nerror initialLiquidityAlreadyProvided();\\nerror addressNotCorrect();\\nerror amountTooBig();\\nerror needToCallExistingFunction();\\n\\n/**\\n * @title LiquidityPool\\n * @notice Manages liquidity provision, asset swapping, and yield generation in a decentralized manner.\\n * @dev Implements IZKBridgeReceiver interface for cross-chain interactions and yield farming computations.\\n */\\ncontract LiquidityPool is IZKBridgeReceiver {\\n    // Events\\n    event priceChanged(address _asset, uint256 price);\\n    event liquidityAdded(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event liquidityRemoved(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event yieldFarmed(address indexed _address, uint256 _amount);\\n\\n    // State variables\\n    address public assetOneAddress;\\n    address public assetTwoAddress;\\n    uint256 public initialLiquidity;\\n    uint256 public liquidity;\\n    uint256 public yield;\\n    uint256 public swapFee = 1000000000000000;\\n    address public owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\\n    mapping(address => uint256) public lpTokenQuantity;\\n\\n    // Daily yield tracking\\n    mapping(address => uint256) public yieldTaken;\\n\\n    // Timestamp mapping for yield farming\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n    mapping(address => uint256) public initialLiquidityProvidedTime;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions only to the owner.\\n     */\\n    modifier onlyOwner() {\\n        msg.sender == owner;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\\n     * @param _assetOneAddress The address of the first asset.\\n     * @param _assetTwoAddress The address of the second asset.\\n     */\\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\\n        assetOneAddress = _assetOneAddress;\\n        assetTwoAddress = _assetTwoAddress;\\n        owner = msg.sender;\\n        swapFee = 1000000000000000; // 0.001 ether\\n    }\\n\\n    /**\\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _assetOneAmount The amount of the first asset to add.\\n     * @param _assetTwoAmount The amount of the second asset to add.\\n     */\\n    function addInitialLiquidity(\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    ) public onlyOwner {\\n        if (initialLiquidityProvidedTime[owner] > 0) {\\n            revert initialLiquidityAlreadyProvided();\\n        }\\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\\n\\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetOneAmount\\n        );\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetTwoAmount\\n        );\\n\\n        // SET THE INITIAL LIQUIDITY\\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\\n        liquidity = initialLiquidity;\\n\\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\\n        lpTokenQuantity[msg.sender] = initialLiquidity;\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\\n    }\\n\\n    /**\\n     * @dev Function to add additional liquidity to the pool.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _asset The address of the first asset.\\n     * @param _secondAsset The address of the second asset.\\n     * @param _amount The amount of the first asset to add.\\n     */\\n    function addLiquidity(\\n        address _asset,\\n        address _secondAsset,\\n        uint256 _amount\\n    ) external noReentrancy {\\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\\n        IERC20(_secondAsset).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOfOppositeTokenNeeded(_asset, _amount)\\n        );\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n\\n        // give lp tokens to new liquidity provider\\n        lpTokenQuantity[msg.sender] += (_amount *\\n            amountOfOppositeTokenNeeded(_asset, _amount));\\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(\\n            msg.sender,\\n            amountOfOppositeTokenNeeded(_asset, _amount),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to remove liquidity from the pool.\\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\\n     */\\n    function removeLiquidity(uint256 _amount) external noReentrancy {\\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) /\\n            100; // How much out of their liquidity they want to withdraw in percentage\\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) /\\n            1 ether;\\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) /\\n            1 ether;\\n        // condition for owner, because of the initial liquidity timer\\n        if (\\n            (msg.sender == owner) &&\\n            (isTimeInitialLiquidity() == false) &&\\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) <\\n                initialLiquidity)\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\\n        if (\\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\\n\\n        // EMIT EVENT\\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\\n    }\\n\\n    /**\\n     * @dev Function to sell the first asset and receive the second asset.\\n     * @param _amount The amount of the first asset to sell.\\n     */\\n    function sellAssetOne(uint256 _amount) external payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetOne()) {\\n            payable(msg.sender).transfer(msg.value);\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetTwo();\\n        uint256 assetOne = getAssetOne() + _amount;\\n        uint256 assetTwo = liquidity / assetOne;\\n        uint256 result = n - assetTwo;\\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to sell the second asset and receive the first asset.\\n     * @param _amount The amount of the second asset to sell.\\n     */\\n    function sellAssetTwo(uint256 _amount) external payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetTwo()) {\\n            payable(msg.sender).transfer(msg.value); // Transfer value back\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetOne();\\n        uint256 assetTwo = getAssetTwo() + _amount;\\n        uint256 assetOne = liquidity / assetTwo;\\n        uint256 result = n - assetOne;\\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetOneAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to get the current balance of a given asset held by the contract.\\n     * @param _address The address of the asset.\\n     * @return The current balance of the asset.\\n     */\\n    function getAssetBalace(address _address) public view returns (uint256) {\\n        return IERC20(_address).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the first asset in terms of the second asset.\\n     * @return The current price of the first asset * 10**18.\\n     */\\n    function assetOnePrice() public view returns (uint256) {\\n        return (getAssetTwo() * 1 ether) / getAssetOne();\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the second asset in terms of the first asset.\\n     * @return The current price of the second asset * 10**18.\\n     */\\n    function assetTwoPrice() public view returns (uint256) {\\n        return (getAssetOne() * 1 ether) / getAssetTwo();\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the first asset held by the contract.\\n     * @return The current balance of the first asset.\\n     */\\n    function getAssetOne() public view returns (uint256) {\\n        return IERC20(assetOneAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the second asset held by the contract.\\n     * @return The current balance of the second asset.\\n     */\\n    function getAssetTwo() public view returns (uint256) {\\n        return IERC20(assetTwoAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\\n     * @param _address The address of the LP token holder.\\n     * @return The quantity of LP tokens owned by the address.\\n     */\\n    function getLpTokenQuantity(\\n        address _address\\n    ) public view returns (uint256) {\\n        if (msg.sender != owner && _address == msg.sender) {\\n            revert addressNotCorrect();\\n        }\\n        return lpTokenQuantity[_address];\\n    }\\n\\n    /**\\n     * @dev Function to get the current ETH balance of the contract.\\n     * @return The current ETH balance of the contract.\\n     */\\n    function addressBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\\n     * @param sellingAsset The address of the asset being sold.\\n     * @param _amount The amount of the first asset being sold.\\n     * @return The quantity of the second asset that would be returned\\n     */\\n    function getSwapQuantity(\\n        address sellingAsset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        if (sellingAsset == assetOneAddress) {\\n            uint256 newAssetOne = getAssetOne() + _amount;\\n            uint256 newAssetTwo = liquidity / newAssetOne;\\n            return getAssetTwo() - newAssetTwo;\\n        } else if (sellingAsset == assetTwoAddress) {\\n            uint256 newAssetTwo = getAssetTwo() + _amount;\\n            uint256 newAssetOne = liquidity / newAssetTwo;\\n            return getAssetOne() - newAssetOne;\\n        } else {\\n            revert assetNotCorrect();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\\n     * @param _asset The address of the asset.\\n     * @param _amount The amount of the asset.\\n     * @return The quantity of the second asset needed for providing liquidity.\\n     */\\n    function amountOfOppositeTokenNeeded(\\n        address _asset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        uint256 ratio;\\n        if (_asset == assetOneAddress) {\\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\\n        } else {\\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\\n        }\\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\\n        return amountNeeded;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    // Yield Farming and Time Locks\\n\\n    /**\\n     * @dev Function to allow users to claim their yield. Can be called once a day.\\n     *\\n     * @notice sends the request to yield Calculator smart contract to compute yield with lower gas fee\\n     */\\n    function getYield() public payable {\\n        if (isTime() == false) {\\n            revert notEnoughTimePassed();\\n        }\\n        //NOW SEND BACK THE AVAILABLE YIELD\\n        uint16 destinationChain = PoolTracker(owner).destinationChain();\\n        IZKBridge zkBridge = PoolTracker(owner).zkBridge();\\n        address yieldCalculator = PoolTracker(owner).yieldCalculator();\\n        bytes memory newPayload = abi.encode(msg.sender);\\n        uint256 fee = zkBridge.estimateFee(destinationChain);\\n        zkBridge.send{value: fee}(\\n            destinationChain,\\n            yieldCalculator,\\n            newPayload\\n        );\\n        // Pay this to our contract which will fund the bridge contract with tokens\\n        uint256 bridgeFee = zkBridge.estimateFee(destinationChain);\\n        (bool sent, ) = payable(owner).call{value: bridgeFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the request for lower gas fee computation\\n     *\\n     * @param payload returns the computation\\n     *\\n     */\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external {\\n        (uint256 availableYield, address user) = abi.decode(\\n            payload,\\n            (uint256, address)\\n        );\\n        //TODO handle your business\\n        if (availableYield > address(this).balance) {\\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[user] += availableYield;\\n        (bool sent, ) = payable(user).call{value: availableYield}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        // EMIT EVENT\\n        emit yieldFarmed(msg.sender, availableYield);\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed for the user to claim yield.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTime() public view returns (bool) {\\n        lastYieldFarmedTime[msg.sender];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTimeInitialLiquidity() public view returns (bool) {\\n        if (\\n            block.timestamp >\\n            (initialLiquidityProvidedTime[msg.sender] + 365 days)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    fallback() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    receive() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0x70f1fdb35d530a58ce00d90f1d00ea62d10e57055b152a3930b3e58ef64634e8\",\"license\":\"MIT\"},\"contracts/Dex/PoolMetrics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"./PoolTracker.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title PoolMetrics\\n * @dev Smart contract for computing various on chain metrics related to liquidity pools and tokens.\\n */\\ncontract PoolMetrics {\\n    // State variables\\n    PoolTracker public poolTracker;\\n    address public ethPriceFeed;\\n\\n    /**\\n     * @dev Constructor function initializes the PoolTracker and ETH price feed addresses.\\n     * @param _poolTracker Address of the PoolTracker contract.\\n     * @param _ethPriceFeed Address of the ETH price feed contract.\\n     */\\n    constructor(address _poolTracker, address _ethPriceFeed) {\\n        poolTracker = PoolTracker(_poolTracker);\\n        ethPriceFeed = _ethPriceFeed;\\n    }\\n\\n    /**\\n     * @dev Computes the market capitalization of a token.\\n     * @param tokenAddress Address of the token.\\n     * @return The market capitalization of the token.\\n     */\\n    function marketCap(address tokenAddress) public view returns (uint256) {\\n        return usdValue(tokenAddress, IERC20(tokenAddress).totalSupply());\\n    }\\n\\n    /**\\n     * @dev Computes the combined market capitalization of two tokens.\\n     * @param tokenAddress Address of the first token.\\n     * @param tokenAddress2 Address of the second token.\\n     * @return The combined market capitalization of the two tokens.\\n     */\\n    function pairMarketCap(\\n        address tokenAddress,\\n        address tokenAddress2\\n    ) external view returns (uint256) {\\n        uint256 tokenAmount = IERC20(tokenAddress).totalSupply();\\n        uint256 tokenAmount2 = IERC20(tokenAddress2).totalSupply();\\n        uint256 totalMarketCap = usdValue(tokenAddress, tokenAmount) +\\n            usdValue(tokenAddress2, tokenAmount2);\\n        return totalMarketCap;\\n    }\\n\\n    /**\\n     * @dev Computes the total value locked (TVL) in a liquidity pool for a given token.\\n     * @param tokenAddress Address of the token.\\n     * @return The TVL of the token.\\n     */\\n    function tvl(address tokenAddress) public view returns (uint256) {\\n        uint256 tokensLocked;\\n        uint256 poolPairLength = poolTracker.getPoolPairsLength(tokenAddress);\\n        for (uint256 i; i < poolPairLength; i++) {\\n            address tokenAddress2 = poolTracker.poolPairs(tokenAddress, i);\\n            LiquidityPool pool = poolTracker.pairToPool(\\n                tokenAddress,\\n                tokenAddress2\\n            );\\n            tokensLocked += IERC20(tokenAddress).balanceOf(address(pool));\\n        }\\n        return usdValue(tokenAddress, tokensLocked);\\n    }\\n\\n    /**\\n     * @dev Computes the combined TVL of two tokens in a liquidity pool.\\n     * @param tokenAddress Address of the first token.\\n     * @param tokenAddress2 Address of the second token.\\n     * @return The combined TVL of the two tokens.\\n     */\\n    function pairTvl(\\n        address tokenAddress,\\n        address tokenAddress2\\n    ) public view returns (uint256) {\\n        LiquidityPool pool = poolTracker.pairToPool(\\n            tokenAddress,\\n            tokenAddress2\\n        );\\n        uint256 tokenAmount = IERC20(tokenAddress).balanceOf(address(pool));\\n        uint256 tokenAmount2 = IERC20(tokenAddress2).balanceOf(address(pool));\\n        uint256 totalTvl = usdValue(tokenAddress, tokenAmount) +\\n            usdValue(tokenAddress2, tokenAmount2);\\n        return totalTvl;\\n    }\\n\\n    /**\\n     * @dev Computes the TVL ratio of a token, which is TVL divided by market capitalization.\\n     * @param tokenAddress Address of the token.\\n     * @return The TVL ratio of the token.\\n     */\\n    function tvlRatio(address tokenAddress) public view returns (uint256) {\\n        return (tvl(tokenAddress) * 100) / marketCap(tokenAddress);\\n    }\\n\\n    /**\\n     * @dev Computes the total return on investment (ROI) for a liquidity pool with two tokens.\\n     * @param tokenAddress Address of the first token.\\n     * @param tokenAddress2 Address of the second token.\\n     * @return The total ROI of the liquidity pool.\\n     */\\n    function totalRoi(\\n        address tokenAddress,\\n        address tokenAddress2\\n    ) public view returns (uint256) {\\n        LiquidityPool pool = poolTracker.pairToPool(\\n            tokenAddress,\\n            tokenAddress2\\n        );\\n        uint256 profit = pool.yield() * uint256(usdConverter(ethPriceFeed));\\n        uint256 tokenAmount = IERC20(tokenAddress).balanceOf(address(pool));\\n        uint256 tokenAmount2 = IERC20(tokenAddress2).balanceOf(address(pool));\\n        return\\n            (profit * 100) /\\n            (usdValue(tokenAddress, tokenAmount) +\\n                usdValue(tokenAddress2, tokenAmount2));\\n    }\\n\\n    /**\\n     * @dev Computes the daily ROI for a liquidity pool with two tokens.\\n     * @param tokenAddress Address of the first token.\\n     * @param tokenAddress2 Address of the second token.\\n     * @return The daily ROI of the liquidity pool.\\n     */\\n    function dailyRoi(\\n        address tokenAddress,\\n        address tokenAddress2\\n    ) public view returns (uint256) {\\n        return\\n            (uint256(usdConverter(ethPriceFeed)) *\\n                dailyRate(tokenAddress, tokenAddress2) *\\n                1000000000000000000) / pairTvl(tokenAddress, tokenAddress2);\\n    }\\n\\n    /**\\n     * @dev Computes the daily yield rate for a liquidity pool with two tokens.\\n     * @param tokenAddress Address of the first token.\\n     * @param tokenAddress2 Address of the second token.\\n     * @return The daily yield rate of the liquidity pool.\\n     */\\n    function dailyRate(\\n        address tokenAddress,\\n        address tokenAddress2\\n    ) public view returns (uint256) {\\n        LiquidityPool pool = poolTracker.pairToPool(\\n            tokenAddress,\\n            tokenAddress2\\n        );\\n        uint256 yield = pool.yield();\\n        uint256 deployTimeStamp = pool.initialLiquidityProvidedTime(\\n            pool.owner()\\n        );\\n        uint256 daysSinceDeployed = (block.timestamp - deployTimeStamp) /\\n            60 /\\n            24; // seconds / hours / days\\n        return yield / daysSinceDeployed;\\n    }\\n\\n    /**\\n     * @dev Computes the USD value of a token based on its amount and price feed.\\n     * @param tokenAddress Address of the token.\\n     * @param tokenAmount Amount of the token.\\n     * @return The USD value of the token.\\n     */\\n    function usdValue(\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    ) public view returns (uint256) {\\n        // If it is a routing token\\n        for (uint256 i; i < poolTracker.getRoutingAddressesLength(); i++) {\\n            (address routingAddress, address priceFeed) = poolTracker\\n                .routingAddresses(i);\\n            if (routingAddress == tokenAddress) {\\n                return uint256(usdConverter(priceFeed)) * tokenAmount;\\n            }\\n        }\\n        // If there is a direct pool with routing token\\n        for (uint256 i; i < poolTracker.getRoutingAddressesLength(); i++) {\\n            (address routingAddress, address priceFeed) = poolTracker\\n                .routingAddresses(i);\\n            if (\\n                address(poolTracker.pairToPool(tokenAddress, routingAddress)) !=\\n                address(0)\\n            ) {\\n                // Token value\\n                uint256 tokenValue = LiquidityPool(\\n                    poolTracker.pairToPool(tokenAddress, routingAddress)\\n                ).getSwapQuantity(tokenAddress, 1);\\n                return\\n                    uint256(usdConverter(priceFeed)) * tokenValue * tokenAmount;\\n            }\\n        }\\n        // If there is no possible USD conversion\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Retrieves the latest TOKEN to USD conversion rate from the price feed.\\n     * @param priceAddress Address of the TOKEN price feed.\\n     * @return The latest TOKEN to USD conversion rate.\\n     */\\n    function usdConverter(address priceAddress) internal view returns (int) {\\n        (, int answer, , , ) = AggregatorV3Interface(priceAddress)\\n            .latestRoundData();\\n        return answer;\\n    }\\n}\\n\",\"keccak256\":\"0x3edba7806f8f5aec599ee012ee165734fe0c71331e3fef5d3b37654302e3c8b4\",\"license\":\"MIT\"},\"contracts/Dex/PoolTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../Router/InterfaceBridge.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror PoolTracker_pairAlreadyExists();\\nerror PoolTracker_cantSwapSameToken();\\n\\n/**\\n * @title PoolTracker\\n * @dev Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem.\\n * Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions.\\n * Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\\n */\\ncontract PoolTracker {\\n    // Tracker for created pools, will add to database\\n    event poolCreated(LiquidityPool pool, address assetOne, address assetTwo);\\n\\n    // The owner of the PoolTracker contract, set to the deployer.\\n    address private owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // Hardcoded destination chain identifier and ZK Bridge address\\n    uint16 public destinationChain = 23;\\n    IZKBridge public zkBridge =\\n        IZKBridge(0xb20F0105f3598652a3bE569132F7b3F341106dDC);\\n\\n    // Address of the yield calculator contract, for bridging computational parts.\\n    address public yieldCalculator;\\n\\n    // Constructor: Sets the contract deployer as the owner.\\n    constructor(address _yieldCalculator) {\\n        owner = msg.sender;\\n        yieldCalculator = _yieldCalculator;\\n    }\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert();\\n        }\\n        _;\\n    }\\n\\n    // Mapping of pool Pairs, to store existing ones\\n    mapping(address => address[]) public poolPairs;\\n\\n    // Mapping a pool to the contracts, in case we wont store it in the database\\n    mapping(address => mapping(address => LiquidityPool)) public pairToPool;\\n\\n    // All the available tokens\\n    address[] public tokens;\\n\\n    /**\\n     * @dev Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial\\n     * transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings.\\n     * Emits a PoolCreated event upon successful creation.\\n     *\\n     * Requirements:\\n     * - The token pair must not already have an existing pool.\\n     * - The caller must have approved the contract to spend the necessary token amounts.\\n     *\\n     * @param _assetOneAddress The address of the first token in the pair.\\n     * @param _assetTwoAddress The address of the second token in the pair.\\n     * @param amountOne The amount of the first token to add to the pool.\\n     * @param amountTwo The amount of the second token to add to the pool.\\n     */\\n    function createPool(\\n        address _assetOneAddress,\\n        address _assetTwoAddress,\\n        uint256 amountOne,\\n        uint256 amountTwo\\n    ) external noReentrancy {\\n        if (\\n            exists(_assetOneAddress, _assetTwoAddress)\\n        ) // To prevent duplicate pools\\n        {\\n            revert PoolTracker_pairAlreadyExists();\\n        }\\n        // Transfer of tokens\\n        IERC20(_assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOne\\n        );\\n        IERC20(_assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountTwo\\n        );\\n        // Creation of pool\\n        LiquidityPool poolAddress = new LiquidityPool(\\n            _assetOneAddress,\\n            _assetTwoAddress\\n        );\\n        // Approve\\n        IERC20(_assetOneAddress).approve(address(poolAddress), amountOne);\\n        IERC20(_assetTwoAddress).approve(address(poolAddress), amountTwo);\\n        // Add initial liquidity\\n        poolAddress.addInitialLiquidity(amountOne, amountTwo);\\n        // Update mappings\\n        poolPairs[_assetOneAddress].push(_assetTwoAddress);\\n        poolPairs[_assetTwoAddress].push(_assetOneAddress);\\n        pairToPool[_assetOneAddress][_assetTwoAddress] = poolAddress;\\n        pairToPool[_assetTwoAddress][_assetOneAddress] = poolAddress;\\n\\n        if (tokenExists(_assetOneAddress) == false) {\\n            tokens.push(_assetOneAddress);\\n        }\\n        if (tokenExists(_assetTwoAddress) == false) {\\n            tokens.push(_assetTwoAddress);\\n        }\\n        // Emit the event\\n        emit poolCreated(poolAddress, _assetOneAddress, _assetTwoAddress);\\n    }\\n\\n    /**\\n     * @dev Checks if a liquidity pool exists for a given pair of tokens.\\n     *\\n     * @param token1 The address of the first token.\\n     * @param token2 The address of the second token.\\n     * @return bool Returns true if the pool exists, false otherwise.\\n     */\\n    function exists(address token1, address token2) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < poolPairs[token1].length; i++) {\\n            if (poolPairs[token1][i] == token2) {\\n                exist = true;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    /**\\n     * @dev Checks if a token is already tracked by the contract.\\n     *\\n     * @param tokenAddress The address of the token to check.\\n     * @return bool Returns true if the token is tracked, false otherwise.\\n     */\\n    function tokenExists(address tokenAddress) internal view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokenAddress == tokens[i]) {\\n                exist = true;\\n                break;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    // Routing token\\n    struct routingAddress {\\n        address tokenAddress;\\n        address priceFeed;\\n    }\\n\\n    // Array of routing Tokens\\n    routingAddress[] public routingAddresses;\\n\\n    /**\\n     * @dev Allows the contract owner to add or update the routing address for a token.\\n     * This is used for token swaps and price feed lookups.\\n     *\\n     * @param tokenAddress The token for which to set the routing.\\n     * @param priceFeed The Chainlink price feed address for the token.\\n     */\\n    function addRoutingAddress(\\n        address tokenAddress,\\n        address priceFeed\\n    ) external onlyOwner {\\n        if (routingAddresses.length == 0) {\\n            routingAddresses.push(routingAddress(tokenAddress, priceFeed));\\n        } else {\\n            for (uint256 i = 0; i < routingAddresses.length; i++) {\\n                if (routingAddresses[i].tokenAddress == tokenAddress) {\\n                    routingAddresses[i] = routingAddress(\\n                        tokenAddress,\\n                        priceFeed\\n                    );\\n                    break;\\n                } else if (i == routingAddresses.length - 1) {\\n                    routingAddresses.push(\\n                        routingAddress(tokenAddress, priceFeed)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Determines the optimal routing token for a swap between two tokens,\\n     * based on available liquidity and price feeds.\\n     *\\n     * @param address1 The address of the first token.\\n     * @param address2 The address of the second token.\\n     * @return address The address of the optimal routing token.\\n     */\\n    function tokenToRoute(\\n        address address1,\\n        address address2\\n    ) external view returns (address) {\\n        if (address1 == address2) {\\n            revert PoolTracker_cantSwapSameToken();\\n        }\\n        address[] memory token1pairs = poolPairs[address1];\\n        address[] memory token2pairs = poolPairs[address2];\\n\\n        address routingToken;\\n        int routingTokenLiquidity;\\n\\n        for (uint256 i; i < token1pairs.length; i++) {\\n            for (uint256 a; a < token2pairs.length; a++) {\\n                if (token1pairs[i] == token2pairs[a]) {\\n                    for (uint256 b; b < routingAddresses.length; b++) {\\n                        if (\\n                            routingAddresses[b].tokenAddress == token1pairs[i]\\n                        ) {\\n                            (, int answer, , , ) = AggregatorV3Interface(\\n                                routingAddresses[b].priceFeed\\n                            ).latestRoundData();\\n                            int liquidity;\\n                            LiquidityPool pool1 = pairToPool[address1][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            LiquidityPool pool2 = pairToPool[address2][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            uint256 balance1 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool1));\\n                            uint256 balance2 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool2));\\n                            liquidity =\\n                                (int(balance1) + int(balance2)) *\\n                                answer;\\n                            if (liquidity > routingTokenLiquidity) {\\n                                // Best choice so far if the liquidity is bigger than previous best token\\n                                routingToken = routingAddresses[b].tokenAddress;\\n                                routingTokenLiquidity = liquidity;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return routingToken;\\n    }\\n\\n    /**\\n     * @dev Returns all array of all tradable tokens on the platform\\n     *\\n     * @return array Returns tokens array.\\n     */\\n    function tokenList() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    /**\\n     * @dev Returns length or routingAddresses array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getRoutingAddressesLength() external view returns (uint256) {\\n        return routingAddresses.length;\\n    }\\n\\n    /**\\n     * @dev Returns length or poolPairs array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getPoolPairsLength(\\n        address tokenAddress\\n    ) external view returns (uint256) {\\n        return poolPairs[tokenAddress].length;\\n    }\\n\\n    /**\\n     * @dev owner can withdraw the fees to deposit to yield Calculator\\n     */\\n    function withdrawEther() external onlyOwner {\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1e28b114bbb312ef730baff55fee62eb2d231840eed9a442a378f6edabf3746f\",\"license\":\"MIT\"},\"contracts/Router/InterfaceBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IZKBridge {\\n    // @notice send a zkBridge message to the specified address at a zkBridge endpoint.\\n    // @param dstChainId - the destination chain identifier\\n    // @param dstAddress - the address on destination chain\\n    // @param payload - a custom bytes payload to send to the destination contract\\n    function send(\\n        uint16 dstChainId,\\n        address dstAddress,\\n        bytes memory payload\\n    ) external payable returns (uint64 nonce);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param dstChainId - the destination chain identifier\\n    function estimateFee(uint16 dstChainId) external view returns (uint256 fee);\\n}\\n\\ninterface IZKBridgeReceiver {\\n    // @notice zkBridge endpoint will invoke this function to deliver the message on the destination\\n    // @param srcChainId - the source endpoint identifier\\n    // @param srcAddress - the source sending contract address from the source chain\\n    // @param nonce - the ordered message nonce\\n    // @param payload - a custom bytes payload from send chain\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x57b2588179cffda143a904e7f55db5eebc526fa479fd3004ea2f521a7fa438a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001dd638038062001dd683398181016040528101906200003791906200012a565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000171565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b60008060408385031215620001445762000143620000c0565b5b6000620001548582860162000113565b9250506020620001678582860162000113565b9150509250929050565b611c5580620001816000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063af7665ce11610071578063af7665ce1461018c578063bca04ec4146101aa578063c26fa28d146101da578063c4fb32c31461020a578063e75db6161461023a578063ef610d8d1461026a576100a9565b80631212033b146100ae57806328a724ac146100de5780634e5a9729146100fc5780636d3e08b71461012c578063931f63f81461015c575b600080fd5b6100c860048036038101906100c391906115c8565b61029a565b6040516100d59190611621565b60405180910390f35b6100e66103cd565b6040516100f3919061169b565b60405180910390f35b610116600480360381019061011191906115c8565b6103f1565b6040516101239190611621565b60405180910390f35b610146600480360381019061014191906115c8565b6105ea565b6040516101539190611621565b60405180910390f35b610176600480360381019061017191906115c8565b610866565b6040516101839190611621565b60405180910390f35b610194610b28565b6040516101a191906116c5565b60405180910390f35b6101c460048036038101906101bf91906116e0565b610b4e565b6040516101d19190611621565b60405180910390f35b6101f460048036038101906101ef91906115c8565b610b7f565b6040516102019190611621565b60405180910390f35b610224600480360381019061021f91906116e0565b610bef565b6040516102319190611621565b60405180910390f35b610254600480360381019061024f91906116e0565b610c7f565b6040516102619190611621565b60405180910390f35b610284600480360381019061027f9190611739565b610f5a565b6040516102919190611621565b60405180910390f35b6000808373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e357600080fd5b505afa1580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b919061178e565b905060008373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561036557600080fd5b505afa158015610379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039d919061178e565b905060006103ab8583610f5a565b6103b58785610f5a565b6103bf91906117ea565b905080935050505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b815260040161044f929190611840565b60206040518083038186803b15801561046757600080fd5b505afa15801561047b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049f91906118b9565b905060008473ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016104dc91906116c5565b60206040518083038186803b1580156104f457600080fd5b505afa158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c919061178e565b905060008473ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040161056991906116c5565b60206040518083038186803b15801561058157600080fd5b505afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b9919061178e565b905060006105c78683610f5a565b6105d18885610f5a565b6105db91906117ea565b90508094505050505092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b8152600401610648929190611840565b60206040518083038186803b15801561066057600080fd5b505afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069891906118b9565b905060008173ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e257600080fd5b505afa1580156106f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a919061178e565b905060008273ffffffffffffffffffffffffffffffffffffffff16638477a6348473ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561078057600080fd5b505afa158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b891906118fb565b6040518263ffffffff1660e01b81526004016107d491906116c5565b60206040518083038186803b1580156107ec57600080fd5b505afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610824919061178e565b905060006018603c83426108389190611928565b610842919061198b565b61084c919061198b565b9050808361085a919061198b565b94505050505092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b81526004016108c4929190611840565b60206040518083038186803b1580156108dc57600080fd5b505afa1580156108f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091491906118b9565b90506000610943600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114d5565b8273ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b15801561098957600080fd5b505afa15801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c1919061178e565b6109cb91906119bc565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401610a0891906116c5565b60206040518083038186803b158015610a2057600080fd5b505afa158015610a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a58919061178e565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401610a9591906116c5565b60206040518083038186803b158015610aad57600080fd5b505afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae5919061178e565b9050610af18682610f5a565b610afb8884610f5a565b610b0591906117ea565b606484610b1291906119bc565b610b1c919061198b565b94505050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610b5982610bef565b6064610b6484610c7f565b610b6e91906119bc565b610b78919061198b565b9050919050565b6000610b8b83836103f1565b670de0b6b3a7640000610b9e85856105ea565b610bc9600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114d5565b610bd391906119bc565b610bdd91906119bc565b610be7919061198b565b905092915050565b6000610c78828373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3b57600080fd5b505afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c73919061178e565b610f5a565b9050919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5ff5061856040518263ffffffff1660e01b8152600401610cde91906116c5565b60206040518083038186803b158015610cf657600080fd5b505afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e919061178e565b905060005b81811015610f465760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c75d89d87846040518363ffffffff1660e01b8152600401610d99929190611a16565b60206040518083038186803b158015610db157600080fd5b505afa158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de991906118fb565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888846040518363ffffffff1660e01b8152600401610e49929190611840565b60206040518083038186803b158015610e6157600080fd5b505afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9991906118b9565b90508673ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b8152600401610ed491906116c5565b60206040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f24919061178e565b85610f2f91906117ea565b945050508080610f3e90611a3f565b915050610d33565b50610f518483610f5a565b92505050919050565b6000805b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663941230606040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc919061178e565b8110156111195760008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930186f2846040518263ffffffff1660e01b815260040161105f9190611621565b604080518083038186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190611a88565b915091508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561110457846110f0826114d5565b6110fa91906119bc565b93505050506114cf565b5050808061111190611a3f565b915050610f5e565b5060005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663941230606040518163ffffffff1660e01b815260040160206040518083038186803b15801561118357600080fd5b505afa158015611197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bb919061178e565b8110156114c95760008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930186f2846040518263ffffffff1660e01b815260040161121e9190611621565b604080518083038186803b15801561123557600080fd5b505afa158015611249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126d9190611a88565b91509150600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b81526004016112e4929190611840565b60206040518083038186803b1580156112fc57600080fd5b505afa158015611310573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133491906118b9565b73ffffffffffffffffffffffffffffffffffffffff16146114b45760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b81526004016113ad929190611840565b60206040518083038186803b1580156113c557600080fd5b505afa1580156113d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fd91906118b9565b73ffffffffffffffffffffffffffffffffffffffff166328da1aef8860016040518363ffffffff1660e01b8152600401611438929190611b03565b60206040518083038186803b15801561145057600080fd5b505afa158015611464573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611488919061178e565b90508581611495846114d5565b61149f91906119bc565b6114a991906119bc565b9450505050506114cf565b505080806114c190611a3f565b91505061111d565b50600090505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561151e57600080fd5b505afa158015611532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115569190611ba4565b50505091505080915050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115958261156a565b9050919050565b6115a58161158a565b81146115b057600080fd5b50565b6000813590506115c28161159c565b92915050565b600080604083850312156115df576115de611565565b5b60006115ed858286016115b3565b92505060206115fe858286016115b3565b9150509250929050565b6000819050919050565b61161b81611608565b82525050565b60006020820190506116366000830184611612565b92915050565b6000819050919050565b600061166161165c6116578461156a565b61163c565b61156a565b9050919050565b600061167382611646565b9050919050565b600061168582611668565b9050919050565b6116958161167a565b82525050565b60006020820190506116b0600083018461168c565b92915050565b6116bf8161158a565b82525050565b60006020820190506116da60008301846116b6565b92915050565b6000602082840312156116f6576116f5611565565b5b6000611704848285016115b3565b91505092915050565b61171681611608565b811461172157600080fd5b50565b6000813590506117338161170d565b92915050565b600080604083850312156117505761174f611565565b5b600061175e858286016115b3565b925050602061176f85828601611724565b9150509250929050565b6000815190506117888161170d565b92915050565b6000602082840312156117a4576117a3611565565b5b60006117b284828501611779565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006117f582611608565b915061180083611608565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611835576118346117bb565b5b828201905092915050565b600060408201905061185560008301856116b6565b61186260208301846116b6565b9392505050565b60006118748261156a565b9050919050565b600061188682611869565b9050919050565b6118968161187b565b81146118a157600080fd5b50565b6000815190506118b38161188d565b92915050565b6000602082840312156118cf576118ce611565565b5b60006118dd848285016118a4565b91505092915050565b6000815190506118f58161159c565b92915050565b60006020828403121561191157611910611565565b5b600061191f848285016118e6565b91505092915050565b600061193382611608565b915061193e83611608565b925082821015611951576119506117bb565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061199682611608565b91506119a183611608565b9250826119b1576119b061195c565b5b828204905092915050565b60006119c782611608565b91506119d283611608565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a0b57611a0a6117bb565b5b828202905092915050565b6000604082019050611a2b60008301856116b6565b611a386020830184611612565b9392505050565b6000611a4a82611608565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a7d57611a7c6117bb565b5b600182019050919050565b60008060408385031215611a9f57611a9e611565565b5b6000611aad858286016118e6565b9250506020611abe858286016118e6565b9150509250929050565b6000819050919050565b6000611aed611ae8611ae384611ac8565b61163c565b611608565b9050919050565b611afd81611ad2565b82525050565b6000604082019050611b1860008301856116b6565b611b256020830184611af4565b9392505050565b600069ffffffffffffffffffff82169050919050565b611b4b81611b2c565b8114611b5657600080fd5b50565b600081519050611b6881611b42565b92915050565b6000819050919050565b611b8181611b6e565b8114611b8c57600080fd5b50565b600081519050611b9e81611b78565b92915050565b600080600080600060a08688031215611bc057611bbf611565565b5b6000611bce88828901611b59565b9550506020611bdf88828901611b8f565b9450506040611bf088828901611779565b9350506060611c0188828901611779565b9250506080611c1288828901611b59565b915050929550929590935056fea264697066735822122088d23d4cd26adc74dec07d722d6602011112c2ba3f9f511db0bd2a44cdbc5b2e64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063af7665ce11610071578063af7665ce1461018c578063bca04ec4146101aa578063c26fa28d146101da578063c4fb32c31461020a578063e75db6161461023a578063ef610d8d1461026a576100a9565b80631212033b146100ae57806328a724ac146100de5780634e5a9729146100fc5780636d3e08b71461012c578063931f63f81461015c575b600080fd5b6100c860048036038101906100c391906115c8565b61029a565b6040516100d59190611621565b60405180910390f35b6100e66103cd565b6040516100f3919061169b565b60405180910390f35b610116600480360381019061011191906115c8565b6103f1565b6040516101239190611621565b60405180910390f35b610146600480360381019061014191906115c8565b6105ea565b6040516101539190611621565b60405180910390f35b610176600480360381019061017191906115c8565b610866565b6040516101839190611621565b60405180910390f35b610194610b28565b6040516101a191906116c5565b60405180910390f35b6101c460048036038101906101bf91906116e0565b610b4e565b6040516101d19190611621565b60405180910390f35b6101f460048036038101906101ef91906115c8565b610b7f565b6040516102019190611621565b60405180910390f35b610224600480360381019061021f91906116e0565b610bef565b6040516102319190611621565b60405180910390f35b610254600480360381019061024f91906116e0565b610c7f565b6040516102619190611621565b60405180910390f35b610284600480360381019061027f9190611739565b610f5a565b6040516102919190611621565b60405180910390f35b6000808373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e357600080fd5b505afa1580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b919061178e565b905060008373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561036557600080fd5b505afa158015610379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039d919061178e565b905060006103ab8583610f5a565b6103b58785610f5a565b6103bf91906117ea565b905080935050505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b815260040161044f929190611840565b60206040518083038186803b15801561046757600080fd5b505afa15801561047b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049f91906118b9565b905060008473ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016104dc91906116c5565b60206040518083038186803b1580156104f457600080fd5b505afa158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c919061178e565b905060008473ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040161056991906116c5565b60206040518083038186803b15801561058157600080fd5b505afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b9919061178e565b905060006105c78683610f5a565b6105d18885610f5a565b6105db91906117ea565b90508094505050505092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b8152600401610648929190611840565b60206040518083038186803b15801561066057600080fd5b505afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069891906118b9565b905060008173ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e257600080fd5b505afa1580156106f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a919061178e565b905060008273ffffffffffffffffffffffffffffffffffffffff16638477a6348473ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561078057600080fd5b505afa158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b891906118fb565b6040518263ffffffff1660e01b81526004016107d491906116c5565b60206040518083038186803b1580156107ec57600080fd5b505afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610824919061178e565b905060006018603c83426108389190611928565b610842919061198b565b61084c919061198b565b9050808361085a919061198b565b94505050505092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b81526004016108c4929190611840565b60206040518083038186803b1580156108dc57600080fd5b505afa1580156108f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091491906118b9565b90506000610943600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114d5565b8273ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b15801561098957600080fd5b505afa15801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c1919061178e565b6109cb91906119bc565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401610a0891906116c5565b60206040518083038186803b158015610a2057600080fd5b505afa158015610a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a58919061178e565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401610a9591906116c5565b60206040518083038186803b158015610aad57600080fd5b505afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae5919061178e565b9050610af18682610f5a565b610afb8884610f5a565b610b0591906117ea565b606484610b1291906119bc565b610b1c919061198b565b94505050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610b5982610bef565b6064610b6484610c7f565b610b6e91906119bc565b610b78919061198b565b9050919050565b6000610b8b83836103f1565b670de0b6b3a7640000610b9e85856105ea565b610bc9600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114d5565b610bd391906119bc565b610bdd91906119bc565b610be7919061198b565b905092915050565b6000610c78828373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3b57600080fd5b505afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c73919061178e565b610f5a565b9050919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5ff5061856040518263ffffffff1660e01b8152600401610cde91906116c5565b60206040518083038186803b158015610cf657600080fd5b505afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e919061178e565b905060005b81811015610f465760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c75d89d87846040518363ffffffff1660e01b8152600401610d99929190611a16565b60206040518083038186803b158015610db157600080fd5b505afa158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de991906118fb565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888846040518363ffffffff1660e01b8152600401610e49929190611840565b60206040518083038186803b158015610e6157600080fd5b505afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9991906118b9565b90508673ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b8152600401610ed491906116c5565b60206040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f24919061178e565b85610f2f91906117ea565b945050508080610f3e90611a3f565b915050610d33565b50610f518483610f5a565b92505050919050565b6000805b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663941230606040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc919061178e565b8110156111195760008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930186f2846040518263ffffffff1660e01b815260040161105f9190611621565b604080518083038186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190611a88565b915091508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561110457846110f0826114d5565b6110fa91906119bc565b93505050506114cf565b5050808061111190611a3f565b915050610f5e565b5060005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663941230606040518163ffffffff1660e01b815260040160206040518083038186803b15801561118357600080fd5b505afa158015611197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bb919061178e565b8110156114c95760008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930186f2846040518263ffffffff1660e01b815260040161121e9190611621565b604080518083038186803b15801561123557600080fd5b505afa158015611249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126d9190611a88565b91509150600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b81526004016112e4929190611840565b60206040518083038186803b1580156112fc57600080fd5b505afa158015611310573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133491906118b9565b73ffffffffffffffffffffffffffffffffffffffff16146114b45760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b81526004016113ad929190611840565b60206040518083038186803b1580156113c557600080fd5b505afa1580156113d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fd91906118b9565b73ffffffffffffffffffffffffffffffffffffffff166328da1aef8860016040518363ffffffff1660e01b8152600401611438929190611b03565b60206040518083038186803b15801561145057600080fd5b505afa158015611464573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611488919061178e565b90508581611495846114d5565b61149f91906119bc565b6114a991906119bc565b9450505050506114cf565b505080806114c190611a3f565b91505061111d565b50600090505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561151e57600080fd5b505afa158015611532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115569190611ba4565b50505091505080915050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115958261156a565b9050919050565b6115a58161158a565b81146115b057600080fd5b50565b6000813590506115c28161159c565b92915050565b600080604083850312156115df576115de611565565b5b60006115ed858286016115b3565b92505060206115fe858286016115b3565b9150509250929050565b6000819050919050565b61161b81611608565b82525050565b60006020820190506116366000830184611612565b92915050565b6000819050919050565b600061166161165c6116578461156a565b61163c565b61156a565b9050919050565b600061167382611646565b9050919050565b600061168582611668565b9050919050565b6116958161167a565b82525050565b60006020820190506116b0600083018461168c565b92915050565b6116bf8161158a565b82525050565b60006020820190506116da60008301846116b6565b92915050565b6000602082840312156116f6576116f5611565565b5b6000611704848285016115b3565b91505092915050565b61171681611608565b811461172157600080fd5b50565b6000813590506117338161170d565b92915050565b600080604083850312156117505761174f611565565b5b600061175e858286016115b3565b925050602061176f85828601611724565b9150509250929050565b6000815190506117888161170d565b92915050565b6000602082840312156117a4576117a3611565565b5b60006117b284828501611779565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006117f582611608565b915061180083611608565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611835576118346117bb565b5b828201905092915050565b600060408201905061185560008301856116b6565b61186260208301846116b6565b9392505050565b60006118748261156a565b9050919050565b600061188682611869565b9050919050565b6118968161187b565b81146118a157600080fd5b50565b6000815190506118b38161188d565b92915050565b6000602082840312156118cf576118ce611565565b5b60006118dd848285016118a4565b91505092915050565b6000815190506118f58161159c565b92915050565b60006020828403121561191157611910611565565b5b600061191f848285016118e6565b91505092915050565b600061193382611608565b915061193e83611608565b925082821015611951576119506117bb565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061199682611608565b91506119a183611608565b9250826119b1576119b061195c565b5b828204905092915050565b60006119c782611608565b91506119d283611608565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a0b57611a0a6117bb565b5b828202905092915050565b6000604082019050611a2b60008301856116b6565b611a386020830184611612565b9392505050565b6000611a4a82611608565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a7d57611a7c6117bb565b5b600182019050919050565b60008060408385031215611a9f57611a9e611565565b5b6000611aad858286016118e6565b9250506020611abe858286016118e6565b9150509250929050565b6000819050919050565b6000611aed611ae8611ae384611ac8565b61163c565b611608565b9050919050565b611afd81611ad2565b82525050565b6000604082019050611b1860008301856116b6565b611b256020830184611af4565b9392505050565b600069ffffffffffffffffffff82169050919050565b611b4b81611b2c565b8114611b5657600080fd5b50565b600081519050611b6881611b42565b92915050565b6000819050919050565b611b8181611b6e565b8114611b8c57600080fd5b50565b600081519050611b9e81611b78565b92915050565b600080600080600060a08688031215611bc057611bbf611565565b5b6000611bce88828901611b59565b9550506020611bdf88828901611b8f565b9450506040611bf088828901611779565b9350506060611c0188828901611779565b9250506080611c1288828901611b59565b915050929550929590935056fea264697066735822122088d23d4cd26adc74dec07d722d6602011112c2ba3f9f511db0bd2a44cdbc5b2e64736f6c63430008090033",
  "devdoc": {
    "details": "Smart contract for computing various on chain metrics related to liquidity pools and tokens.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor function initializes the PoolTracker and ETH price feed addresses.",
        "params": {
          "_ethPriceFeed": "Address of the ETH price feed contract.",
          "_poolTracker": "Address of the PoolTracker contract."
        }
      },
      "dailyRate(address,address)": {
        "details": "Computes the daily yield rate for a liquidity pool with two tokens.",
        "params": {
          "tokenAddress": "Address of the first token.",
          "tokenAddress2": "Address of the second token."
        },
        "returns": {
          "_0": "The daily yield rate of the liquidity pool."
        }
      },
      "dailyRoi(address,address)": {
        "details": "Computes the daily ROI for a liquidity pool with two tokens.",
        "params": {
          "tokenAddress": "Address of the first token.",
          "tokenAddress2": "Address of the second token."
        },
        "returns": {
          "_0": "The daily ROI of the liquidity pool."
        }
      },
      "marketCap(address)": {
        "details": "Computes the market capitalization of a token.",
        "params": {
          "tokenAddress": "Address of the token."
        },
        "returns": {
          "_0": "The market capitalization of the token."
        }
      },
      "pairMarketCap(address,address)": {
        "details": "Computes the combined market capitalization of two tokens.",
        "params": {
          "tokenAddress": "Address of the first token.",
          "tokenAddress2": "Address of the second token."
        },
        "returns": {
          "_0": "The combined market capitalization of the two tokens."
        }
      },
      "pairTvl(address,address)": {
        "details": "Computes the combined TVL of two tokens in a liquidity pool.",
        "params": {
          "tokenAddress": "Address of the first token.",
          "tokenAddress2": "Address of the second token."
        },
        "returns": {
          "_0": "The combined TVL of the two tokens."
        }
      },
      "totalRoi(address,address)": {
        "details": "Computes the total return on investment (ROI) for a liquidity pool with two tokens.",
        "params": {
          "tokenAddress": "Address of the first token.",
          "tokenAddress2": "Address of the second token."
        },
        "returns": {
          "_0": "The total ROI of the liquidity pool."
        }
      },
      "tvl(address)": {
        "details": "Computes the total value locked (TVL) in a liquidity pool for a given token.",
        "params": {
          "tokenAddress": "Address of the token."
        },
        "returns": {
          "_0": "The TVL of the token."
        }
      },
      "tvlRatio(address)": {
        "details": "Computes the TVL ratio of a token, which is TVL divided by market capitalization.",
        "params": {
          "tokenAddress": "Address of the token."
        },
        "returns": {
          "_0": "The TVL ratio of the token."
        }
      },
      "usdValue(address,uint256)": {
        "details": "Computes the USD value of a token based on its amount and price feed.",
        "params": {
          "tokenAddress": "Address of the token.",
          "tokenAmount": "Amount of the token."
        },
        "returns": {
          "_0": "The USD value of the token."
        }
      }
    },
    "title": "PoolMetrics",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1285,
        "contract": "contracts/Dex/PoolMetrics.sol:PoolMetrics",
        "label": "poolTracker",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PoolTracker)2469"
      },
      {
        "astId": 1287,
        "contract": "contracts/Dex/PoolMetrics.sol:PoolMetrics",
        "label": "ethPriceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(PoolTracker)2469": {
        "encoding": "inplace",
        "label": "contract PoolTracker",
        "numberOfBytes": "20"
      }
    }
  }
}