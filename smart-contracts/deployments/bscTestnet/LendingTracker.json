{
  "address": "0x12fcA4F204D216244E89E5eed86c7aF9469736A6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "lendingTracker_addressNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lendingTracker_amountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lendingTracker_poolExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lendingTracker_poolNotAvailable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userFarmedYield",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userLended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "userWithdrawnLendedTokens",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBorrowingContract",
          "type": "address"
        }
      ],
      "name": "addBorrowingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceAddress",
          "type": "address"
        }
      ],
      "name": "addTokenPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allAvailableTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "availableTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newAPY",
          "type": "uint256"
        }
      ],
      "name": "changeBorrowingAPY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceAddress",
          "type": "address"
        }
      ],
      "name": "changePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getLoanedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "lendToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToPool",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLendedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userLendedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLendedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc54d69e27c3f0a9339d910c053e8bad63ce9a6477f5e6fe3612f3a7dc2380843",
  "receipt": {
    "to": null,
    "from": "0x540467feca43907A701311D0721df481D1f9e238",
    "contractAddress": "0x12fcA4F204D216244E89E5eed86c7aF9469736A6",
    "transactionIndex": 19,
    "gasUsed": "3159035",
    "logsBloom": "0x
    "blockHash": "0x1fabd41151964cd04e98c3b20472a17c9b972882c6d4d53a2f7d579450255201",
    "transactionHash": "0xc54d69e27c3f0a9339d910c053e8bad63ce9a6477f5e6fe3612f3a7dc2380843",
    "logs": [],
    "blockNumber": 38169077,
    "cumulativeGasUsed": "6559846",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "00e357b9c196a5a5714c5de0e52b371d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"lendingTracker_addressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lendingTracker_amountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lendingTracker_poolExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lendingTracker_poolNotAvailable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userFarmedYield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userLended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"userWithdrawnLendedTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowingContract\",\"type\":\"address\"}],\"name\":\"addBorrowingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceAddress\",\"type\":\"address\"}],\"name\":\"addTokenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allAvailableTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAPY\",\"type\":\"uint256\"}],\"name\":\"changeBorrowingAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceAddress\",\"type\":\"address\"}],\"name\":\"changePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLoanedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"lendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToPool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLendedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLendedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLendedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages lending, borrowing, and collateral operations for a decentralized finance platform. Utilizes external price feeds for valuation and includes functionality for yield farming. This contract is responsible for tracking user interactions with lending pools and their collateralized positions.\",\"kind\":\"dev\",\"methods\":{\"addTokenPool(address,address)\":{\"details\":\"Deploys a new Lending contract for the token and registers it along with its price feed.\",\"params\":{\"priceAddress\":\"Address of the Chainlink price feed for the token.\",\"tokenAddress\":\"Address of the token for the new lending pool.\"}},\"changeBorrowingAPY(address,uint256)\":{\"params\":{\"newAPY\":\"The new annual percentage yield for borrowing.\",\"tokenAddress\":\"Address of the token whose lending pool APY is to be changed.\"}},\"changePriceFeed(address,address)\":{\"details\":\"Allows the contract owner to update the price feed address in case of changes or migration.\",\"params\":{\"priceAddress\":\"New address of the Chainlink price feed.\",\"tokenAddress\":\"Address of the token whose price feed is being updated.\"}},\"getYield(address)\":{\"details\":\"Calculates the yield based on the amount lent and the time passed, then transfers the yield to the user.\",\"params\":{\"tokenAddress\":\"The address of the token for which yield is being claimed.\"}},\"lendToken(address,uint256)\":{\"details\":\"Transfers tokens from the user to the lending pool contract and updates the tracking of lent amounts. Requires token approval from the user to the LendingTracker contract.\",\"params\":{\"tokenAddress\":\"The address of the token being lent.\",\"tokenAmount\":\"The amount of tokens the user is lending.\"}},\"withdrawLendedToken(address,uint256)\":{\"details\":\"Ensures the user cannot withdraw more than they have lent. Adjusts the user's lent amount record accordingly.\",\"params\":{\"tokenAddress\":\"The address of the token to withdraw from the lending pool.\",\"tokenAmount\":\"The amount of tokens to withdraw.\"}}},\"title\":\"LendingTracker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTokenPool(address,address)\":{\"notice\":\"Adds a new token pool for lending and borrowing.\"},\"changeBorrowingAPY(address,uint256)\":{\"notice\":\"Updates the borrowing APY for a specified token pool.\"},\"changePriceFeed(address,address)\":{\"notice\":\"Changes the price feed for a given token.\"},\"getYield(address)\":{\"notice\":\"Claims yield for the user based on the tokens they have lent to the pool.\"},\"lendToken(address,uint256)\":{\"notice\":\"Enables a user to lend tokens to a specific pool.\"},\"withdrawLendedToken(address,uint256)\":{\"notice\":\"Withdraws tokens previously lent to the lending pool by the user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lending/LendingTracker.sol\":\"LendingTracker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Lending/LendingTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror lendingTracker_addressNotAllowed();\\nerror lendingTracker_poolNotAvailable();\\nerror lendingTracker_amountTooHigh();\\nerror lendingTracker_receiptDoesntExist();\\nerror lendingTracker_poolExists();\\n\\n/**\\n * @title LendingTracker\\n * @dev Manages lending, borrowing, and collateral operations for a decentralized finance platform.\\n * Utilizes external price feeds for valuation and includes functionality for yield farming.\\n * This contract is responsible for tracking user interactions with lending pools and their collateralized positions.\\n */\\ncontract LendingTracker {\\n    // Events for logging various actions within the contract\\n    event userLended(\\n        address indexed user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n    event userWithdrawnLendedTokens(\\n        address indexed user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n    event userFarmedYield(\\n        address user,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    );\\n\\n    // Owner of the contract, set at deployment\\n    address owner;\\n\\n    // Borrowing contract\\n    address public borrowingContract;\\n\\n    // Constructor sets the deploying address as the owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Struct to hold lending pool and its associated price feed information\\n    struct tokenPool {\\n        Pool poolAddress; // ERC-20 Token address\\n        address priceAddress; // Chainlink price feed\\n    }\\n\\n    // Struct to track borrowing receipts for users\\n    struct borrowReceipt {\\n        address tokenAddress;\\n        uint256 amount;\\n        uint256 time;\\n        uint256 apy;\\n    }\\n\\n    // Mappings to track lending pools, user interactions, and collateral\\n    mapping(address => tokenPool) public tokenToPool; // To find pool for specific ERC20 address\\n    address[] public availableTokens; // All available tokens to lend, borrow and collateralize\\n\\n    mapping(address => mapping(address => uint256)) public userLendedAmount; // Lended amout of specific token for user\\n    mapping(address => address[]) public userLendedTokens; // All lended token addresses of user\\n\\n    /**\\n     * @notice Adds a new token pool for lending and borrowing.\\n     * @dev Deploys a new Lending contract for the token and registers it along with its price feed.\\n     * @param tokenAddress Address of the token for the new lending pool.\\n     * @param priceAddress Address of the Chainlink price feed for the token.\\n     */\\n    function addTokenPool(address tokenAddress, address priceAddress) public {\\n        if (msg.sender != owner) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        if (address(tokenToPool[tokenAddress].poolAddress) != address(0)) {\\n            revert lendingTracker_poolExists();\\n        }\\n        Pool newPool = new Pool(tokenAddress, borrowingContract);\\n        tokenToPool[tokenAddress] = tokenPool(newPool, priceAddress);\\n        availableTokens.push(tokenAddress);\\n    }\\n\\n    /**\\n     * @notice Changes the price feed for a given token.\\n     * @dev Allows the contract owner to update the price feed address in case of changes or migration.\\n     * @param tokenAddress Address of the token whose price feed is being updated.\\n     * @param priceAddress New address of the Chainlink price feed.\\n     */\\n    function changePriceFeed(\\n        address tokenAddress,\\n        address priceAddress\\n    ) public {\\n        // Checks if address is allowed to call this\\n        if (msg.sender != owner) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        // Checks if the pool exists\\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        tokenToPool[tokenAddress].priceAddress = priceAddress;\\n    }\\n\\n    /**\\n     * @notice Updates the borrowing APY for a specified token pool.\\n     * @param tokenAddress Address of the token whose lending pool APY is to be changed.\\n     * @param newAPY The new annual percentage yield for borrowing.\\n     */\\n    function changeBorrowingAPY(address tokenAddress, uint256 newAPY) public {\\n        if (msg.sender != owner) {\\n            revert lendingTracker_addressNotAllowed();\\n        }\\n        tokenToPool[tokenAddress].poolAddress.setBorrowingAPY(newAPY);\\n    }\\n\\n    /**\\n     * @notice Enables a user to lend tokens to a specific pool.\\n     * @dev Transfers tokens from the user to the lending pool contract and updates the tracking of lent amounts.\\n     * Requires token approval from the user to the LendingTracker contract.\\n     * @param tokenAddress The address of the token being lent.\\n     * @param tokenAmount The amount of tokens the user is lending.\\n     */\\n    function lendToken(address tokenAddress, uint256 tokenAmount) public {\\n        // Checks if pool exists\\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        // Transfer and approve tokens\\n        IERC20(tokenAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenAmount\\n        );\\n        IERC20(tokenAddress).approve(\\n            address(tokenToPool[tokenAddress].poolAddress),\\n            tokenAmount\\n        );\\n        // Maps the token address if needed\\n        if (\\n            newTokenChecker(userLendedTokens[msg.sender], tokenAddress) == true\\n        ) {\\n            userLendedTokens[msg.sender].push(tokenAddress);\\n        }\\n        // Add funds to mapping\\n        userLendedAmount[msg.sender][tokenAddress] += tokenAmount;\\n        tokenToPool[tokenAddress].poolAddress.lend(tokenAmount);\\n\\n        // Event\\n        emit userLended(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens previously lent to the lending pool by the user.\\n     * @dev Ensures the user cannot withdraw more than they have lent. Adjusts the user's lent amount record accordingly.\\n     * @param tokenAddress The address of the token to withdraw from the lending pool.\\n     * @param tokenAmount The amount of tokens to withdraw.\\n     */\\n    function withdrawLendedToken(\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    ) public {\\n        // Checks if pool exists\\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\\n            revert lendingTracker_poolNotAvailable();\\n        }\\n        // Checks if there is enough tokens in the pool\\n        if (userLendedAmount[msg.sender][tokenAddress] < tokenAmount) {\\n            revert lendingTracker_amountTooHigh();\\n        }\\n        userLendedAmount[msg.sender][tokenAddress] -= tokenAmount;\\n        tokenToPool[tokenAddress].poolAddress.withdraw(tokenAmount);\\n        // Transfer tokens to user\\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n\\n        // // Pop the lended token from the array\\n        if (userLendedAmount[msg.sender][tokenAddress] == 0) {\\n            for (uint256 i; i < userLendedTokens[msg.sender].length; i++) {\\n                if (userLendedTokens[msg.sender][i] == tokenAddress) {\\n                    userLendedTokens[msg.sender][i] ==\\n                        userLendedTokens[msg.sender][\\n                            userLendedTokens[msg.sender].length - 1\\n                        ];\\n                    userLendedTokens[msg.sender].pop();\\n                }\\n            }\\n        }\\n        // Event\\n        emit userWithdrawnLendedTokens(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Checks if a new token is not already tracked by the user's token array.\\n     * @dev Utility function to prevent duplicate entries in user token arrays.\\n     * @param userTokens Array of token addresses the user has interacted with.\\n     * @param token Address of the token to check.\\n     * @return bool True if the token is not in the array, false otherwise.\\n     */\\n    function newTokenChecker(\\n        address[] memory userTokens,\\n        address token\\n    ) internal pure returns (bool) {\\n        bool newToken = true;\\n        for (uint256 i; i < userTokens.length; i++) {\\n            if (token == userTokens[i]) {\\n                newToken = false;\\n            }\\n        }\\n        return newToken;\\n    }\\n\\n    /**\\n     * @notice Claims yield for the user based on the tokens they have lent to the pool.\\n     * @dev Calculates the yield based on the amount lent and the time passed, then transfers the yield to the user.\\n     * @param tokenAddress The address of the token for which yield is being claimed.\\n     */\\n    function getYield(address tokenAddress) public {\\n        uint256 yield = tokenToPool[tokenAddress].poolAddress.getYield(\\n            msg.sender,\\n            userLendedAmount[msg.sender][tokenAddress]\\n        );\\n        IERC20(tokenAddress).transfer(msg.sender, yield);\\n\\n        // Event\\n        emit userFarmedYield(msg.sender, tokenAddress, yield);\\n    }\\n\\n    function allAvailableTokens() public view returns (address[] memory) {\\n        return availableTokens;\\n    }\\n\\n    function addBorrowingContract(address newBorrowingContract) public {\\n        borrowingContract = newBorrowingContract;\\n    }\\n\\n    // Get all loaned tokens based on user\\n    function getLoanedTokens(\\n        address user\\n    ) public view returns (address[] memory) {\\n        return userLendedTokens[user];\\n    }\\n}\\n\\n// Additional idea:\\n// If yield number gets too high(uint256), we open up a new pool with same stats\\n// If we make new pool with same token and price address we need to restore lended amount for each person(refreshPool())\\n\",\"keccak256\":\"0xd8fab93206ac46f5cdf3120e1da11421bb8e797dfdf233080943b93b2822850e\",\"license\":\"MIT\"},\"contracts/Lending/Pool.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.9;\\n\\n// OpenZeppelin's ERC20 interface for interactions with ERC20 tokens.\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n// Custom errors for specific failure conditions.\\nerror lending_outOfReserve();\\nerror lending_addressNotAllowed();\\nerror lending_reserveNotAvailable();\\nerror lending_notEnoughTimePassed();\\n\\n/**\\n * @title Lending\\n * @dev Implements lending and yield farming functionalities for a specific ERC20 token.\\n * This contract allows tokens to be lent out and borrowed, tracks yield farming activities,\\n * and allows for the accumulation and withdrawal of yield based on predefined APY.\\n */\\ncontract Pool {\\n    // The ERC20 token used for lending and borrowing.\\n    IERC20 public token;\\n\\n    // Address of the owner contract.\\n    address public ownerContract;\\n    address public borrowingContract;\\n\\n    // Total amount of tokens lent out.\\n    uint256 public amoutLended;\\n\\n    // Available reserve for borrowing.\\n    uint256 public reserve;\\n\\n    // Annual Percentage Yield for borrowing.\\n    uint256 public borrowingAPY;\\n\\n    // Total yield generated.\\n    uint256 public yield;\\n\\n    // Yield already farmed.\\n    uint256 public farmedYield;\\n\\n    // Mapping of addresses to their last yield farming timestamp.\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n\\n    // Mapping of addresses to the amount of yield they have taken.\\n    mapping(address => uint256) public yieldTaken;\\n\\n    /**\\n     * @dev Ensures that only the owner contract can call the modified function.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != ownerContract && msg.sender != borrowingContract) {\\n            revert lending_addressNotAllowed();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @param _token The ERC20 token address for lending and borrowing.\\n     */\\n    constructor(address _token, address newBorrowingContract) {\\n        borrowingContract = newBorrowingContract;\\n        token = IERC20(_token);\\n        ownerContract = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Allows the owner to borrow tokens from the reserve.\\n     * @param amount The amount of tokens to borrow.\\n     */\\n    function borrow(uint256 amount) public onlyOwner {\\n        if (reserve - amount < 0) {\\n            revert lending_outOfReserve();\\n        }\\n        token.transfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to lend tokens to the contract.\\n     * @param amount The amount of tokens to lend.\\n     */\\n    function lend(uint256 amount) public onlyOwner {\\n        token.transferFrom(msg.sender, address(this), amount);\\n        reserve += amount;\\n    }\\n\\n    /**\\n     * @notice Sets the borrowing APY.\\n     * @param newAPY The new APY value.\\n     */\\n    function setBorrowingAPY(uint256 newAPY) public onlyOwner {\\n        borrowingAPY = newAPY;\\n    }\\n\\n    /**\\n     * @notice Checks if enough time has passed for a user to farm yield again.\\n     * @param user The address of the user.\\n     * @return bool True if enough time has passed, false otherwise.\\n     */\\n    function isTime(address user) public view returns (bool) {\\n        lastYieldFarmedTime[user];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[user] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens from the reserve.\\n     * This function allows the owner to withdraw tokens from the available reserve, reducing the reserve balance.\\n     * @param amount The amount of tokens to withdraw from the reserve.\\n     */\\n    function withdraw(uint256 amount) public onlyOwner {\\n        if (reserve - amount < 0) {\\n            revert lending_reserveNotAvailable();\\n        }\\n        token.transfer(msg.sender, amount);\\n        reserve -= amount;\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the available yield for a user.\\n     * This function updates the yield taken and farmed yield accordingly.\\n     * @param user The address of the user farming yield.\\n     * @param tokenAmount The amount of tokens used for calculating the user's share of the yield.\\n     * @return uint256 The amount of yield available for the user.\\n     */\\n    function getYield(\\n        address user,\\n        uint256 tokenAmount\\n    ) public onlyOwner returns (uint256) {\\n        if (isTime(user) == false) {\\n            revert lending_notEnoughTimePassed();\\n        }\\n        lastYieldFarmedTime[user] = block.timestamp; // Reentrancy guard\\n        uint256 yieldSoFar = yieldTaken[user];\\n        uint256 userLiquidity = (tokenAmount * 100) / amoutLended;\\n        uint256 availableYield = ((yield -\\n            ((yieldSoFar * 100) / userLiquidity)) * userLiquidity) / 100;\\n\\n        if (availableYield > yield - farmedYield) {\\n            revert lending_notEnoughTimePassed(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[msg.sender] += availableYield;\\n        farmedYield += availableYield;\\n        return availableYield;\\n    }\\n\\n    // To book how much yield came to the contract\\n    function bookYield(uint256 _yield) public onlyOwner {\\n        yield += _yield;\\n    }\\n}\\n\",\"keccak256\":\"0x482131afb79f674700dd567bc4f717675614d7ab98cccc828fdf6d49ba1ecf7c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506137fc806100606000396000f3fe60806040523480156200001157600080fd5b5060043610620001005760003560e01c806364c339771162000099578063a0638ddd116200006f578063a0638ddd146200028a578063ad64d06814620002ac578063e1a777a014620002e2578063ff87fe8114620003185762000100565b806364c33977146200021157806384a965ed1462000231578063989796b514620002535762000100565b80633e1a52b411620000db5780633e1a52b4146200017b57806341d12657146200019b57806343b9130314620001d157806359c9851614620001f15762000100565b806302201c7014620001055780632547035514620001255780632921f3921462000145575b600080fd5b6200012360048036038101906200011d919062001c99565b62000338565b005b6200014360048036038101906200013d919062001d1b565b6200050d565b005b6200016360048036038101906200015d919062001c99565b62000a9e565b60405162000172919062001d73565b60405180910390f35b62000199600480360381019062000193919062001d1b565b62000ac3565b005b620001b96004803603810190620001b3919062001d90565b6200120b565b604051620001c8919062001e90565b60405180910390f35b620001ef6004803603810190620001e9919062001c99565b620012da565b005b6200020f600480360381019062000209919062001d1b565b62001603565b005b6200022f600480360381019062000229919062001d90565b6200175e565b005b6200023b620019a8565b6040516200024a919062001ec5565b60405180910390f35b6200027160048036038101906200026b919062001d90565b620019ce565b6040516200028192919062001f4d565b60405180910390f35b6200029462001a32565b604051620002a3919062001e90565b60405180910390f35b620002ca6004803603810190620002c4919062001f7a565b62001ac2565b604051620002d9919062001ec5565b60405180910390f35b620003006004803603810190620002fa919062001d1b565b62001b02565b6040516200030f919062001ec5565b60405180910390f35b62000336600480360381019062000330919062001d90565b62001b51565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620003be576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000488576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620005d7576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401620006169392919062001fac565b602060405180830381600087803b1580156200063157600080fd5b505af115801562000646573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200066c919062002026565b508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016200070c92919062002058565b602060405180830381600087803b1580156200072757600080fd5b505af11580156200073c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000762919062002026565b506001151562000838600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200082c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620007e1575b50505050508462001b95565b15151415620008e257600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620009709190620020b4565b92505081905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6aa57ce826040518263ffffffff1660e01b815260040162000a14919062001d73565b600060405180830381600087803b15801562000a2f57600080fd5b505af115801562000a44573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167fbae46e7122b75f20fe8069d88135321512a64b320000386d592d5082c26afb64838360405162000a9292919062002058565b60405180910390a25050565b6004602052816000526040600020602052806000526040600020600091509150505481565b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000b8d576040517f4ba53a4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101562000c44576040517f6fc3494000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462000cd2919062002111565b92505081905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040162000d76919062001d73565b600060405180830381600087803b15801562000d9157600080fd5b505af115801562000da6573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040162000de792919062002058565b602060405180830381600087803b15801562000e0257600080fd5b505af115801562000e17573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e3d919062002026565b506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415620011b55760005b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015620011b3578273ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811062000f7d5762000f7c6200214c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156200119d57600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905062001055919062002111565b815481106200106957620010686200214c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110620010fe57620010fd6200214c565b5b9060005260206000200160009054906101000a90505050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806200116757620011666200217b565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b8080620011aa90620021aa565b91505062000ec7565b505b3373ffffffffffffffffffffffffffffffffffffffff167f86c5c7a77e073d103cb6d0edf1f3809dbf9b9dfbf09656d8ecc9515a4782e3858383604051620011ff92919062002058565b60405180910390a25050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620012ce57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162001283575b50505050509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001360576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462001429576040517f8324c21500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516200145d9062001c21565b6200146a929190620021f8565b604051809103906000f08015801562001487573d6000803e3d6000fd5b50905060405180604001604052808273ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815250600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506003839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001689576040517f56f37e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639770b125826040518263ffffffff1660e01b815260040162001726919062001d73565b600060405180830381600087803b1580156200174157600080fd5b505af115801562001756573d6000803e3d6000fd5b505050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f88cc4a233600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b81526004016200187b92919062002058565b602060405180830381600087803b1580156200189657600080fd5b505af1158015620018ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018d191906200223c565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016200191092919062002058565b602060405180830381600087803b1580156200192b57600080fd5b505af115801562001940573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001966919062002026565b507fb24f6706501e087731866f09ba73332b50d43f9f408403653052ab002c45612a3383836040516200199c9392919062001fac565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6060600380548060200260200160405190810160405280929190818152602001828054801562001ab857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162001a6d575b5050505050905090565b6003818154811062001ad357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052816000526040600020818154811062001b1f57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806001905060005b845181101562001c165784818151811062001bbf5762001bbe6200214c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141562001c0057600091505b808062001c0d90620021aa565b91505062001b9f565b508091505092915050565b611558806200226f83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001c618262001c34565b9050919050565b62001c738162001c54565b811462001c7f57600080fd5b50565b60008135905062001c938162001c68565b92915050565b6000806040838503121562001cb35762001cb262001c2f565b5b600062001cc38582860162001c82565b925050602062001cd68582860162001c82565b9150509250929050565b6000819050919050565b62001cf58162001ce0565b811462001d0157600080fd5b50565b60008135905062001d158162001cea565b92915050565b6000806040838503121562001d355762001d3462001c2f565b5b600062001d458582860162001c82565b925050602062001d588582860162001d04565b9150509250929050565b62001d6d8162001ce0565b82525050565b600060208201905062001d8a600083018462001d62565b92915050565b60006020828403121562001da95762001da862001c2f565b5b600062001db98482850162001c82565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62001df98162001c54565b82525050565b600062001e0d838362001dee565b60208301905092915050565b6000602082019050919050565b600062001e338262001dc2565b62001e3f818562001dcd565b935062001e4c8362001dde565b8060005b8381101562001e8357815162001e67888262001dff565b975062001e748362001e19565b92505060018101905062001e50565b5085935050505092915050565b6000602082019050818103600083015262001eac818462001e26565b905092915050565b62001ebf8162001c54565b82525050565b600060208201905062001edc600083018462001eb4565b92915050565b6000819050919050565b600062001f0d62001f0762001f018462001c34565b62001ee2565b62001c34565b9050919050565b600062001f218262001eec565b9050919050565b600062001f358262001f14565b9050919050565b62001f478162001f28565b82525050565b600060408201905062001f64600083018562001f3c565b62001f73602083018462001eb4565b9392505050565b60006020828403121562001f935762001f9262001c2f565b5b600062001fa38482850162001d04565b91505092915050565b600060608201905062001fc3600083018662001eb4565b62001fd2602083018562001eb4565b62001fe1604083018462001d62565b949350505050565b60008115159050919050565b620020008162001fe9565b81146200200c57600080fd5b50565b600081519050620020208162001ff5565b92915050565b6000602082840312156200203f576200203e62001c2f565b5b60006200204f848285016200200f565b91505092915050565b60006040820190506200206f600083018562001eb4565b6200207e602083018462001d62565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620020c18262001ce0565b9150620020ce8362001ce0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562002106576200210562002085565b5b828201905092915050565b60006200211e8262001ce0565b91506200212b8362001ce0565b92508282101562002141576200214062002085565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000620021b78262001ce0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620021ed57620021ec62002085565b5b600182019050919050565b60006040820190506200220f600083018562001eb4565b6200221e602083018462001eb4565b9392505050565b600081519050620022368162001cea565b92915050565b60006020828403121562002255576200225462001c2f565b5b6000620022658482850162002225565b9150509291505056fe60806040523480156200001157600080fd5b50604051620015583803806200155883398181016040528101906200003791906200016b565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001b2565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001338262000106565b9050919050565b620001458162000126565b81146200015157600080fd5b50565b60008151905062000165816200013a565b92915050565b6000806040838503121562000185576200018462000101565b5b6000620001958582860162000154565b9250506020620001a88582860162000154565b9150509250929050565b61139680620001c26000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063a2b2c32a116100a2578063cd68206011610071578063cd68206014610294578063ed433abc146102b0578063f88cc4a2146102ce578063fc0c546a146102fe578063ffebfc8c1461031c5761010b565b8063a2b2c32a14610220578063a6aa57ce1461023e578063c5ebeaec1461025a578063cd3293de146102765761010b565b80637f74ac15116100de5780637f74ac151461019857806384a965ed146101b65780639770b125146101d45780639a61c36a146101f05761010b565b806328593984146101105780632e1a7d4d1461012e57806359eec95b1461014a5780636140dfd01461017a575b600080fd5b61011861034c565b6040516101259190610f16565b60405180910390f35b61014860048036038101906101439190610f62565b610352565b005b610164600480360381019061015f9190610fed565b610547565b6040516101719190611035565b60405180910390f35b6101826105f8565b60405161018f9190610f16565b60405180910390f35b6101a06105fe565b6040516101ad919061105f565b60405180910390f35b6101be610624565b6040516101cb919061105f565b60405180910390f35b6101ee60048036038101906101e99190610f62565b61064a565b005b61020a60048036038101906102059190610fed565b610737565b6040516102179190610f16565b60405180910390f35b61022861074f565b6040516102359190610f16565b60405180910390f35b61025860048036038101906102539190610f62565b610755565b005b610274600480360381019061026f9190610f62565b610904565b005b61027e610ae0565b60405161028b9190610f16565b60405180910390f35b6102ae60048036038101906102a99190610f62565b610ae6565b005b6102b8610be5565b6040516102c59190610f16565b60405180910390f35b6102e860048036038101906102e3919061107a565b610beb565b6040516102f59190610f16565b60405180910390f35b610306610ec1565b6040516103139190611119565b60405180910390f35b61033660048036038101906103319190610fed565b610ee5565b6040516103439190610f16565b60405180910390f35b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156103fe5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610435576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816004546104459190611163565b101561047d576040517f5a6c8ab300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016104d8929190611197565b602060405180830381600087803b1580156104f257600080fd5b505af1158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a91906111ec565b50806004600082825461053d9190611163565b9250508190555050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205060004290508062015180600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105dd9190611219565b10156105ed5760019150506105f3565b60009150505b919050565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156106f65750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561072d576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060058190555050565b60096020528060005260406000206000915090505481565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156108015750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610838576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016108959392919061126f565b602060405180830381600087803b1580156108af57600080fd5b505af11580156108c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e791906111ec565b5080600460008282546108fa9190611219565b9250508190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156109b05750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156109e7576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816004546109f79190611163565b1015610a2f576040517f810ffca300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610a8a929190611197565b602060405180830381600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc91906111ec565b5050565b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610b925750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610bc9576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060066000828254610bdb9190611219565b9250508190555050565b60075481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610c995750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610cd0576040517feed3ab2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60001515610cdd84610547565b15151415610d17576040517f1fa8d33700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600354606485610db191906112a6565b610dbb919061132f565b9050600060648283606486610dd091906112a6565b610dda919061132f565b600654610de79190611163565b610df191906112a6565b610dfb919061132f565b9050600754600654610e0d9190611163565b811115610e46576040517f1fa8d33700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e959190611219565b925050819055508060076000828254610eae9190611219565b9250508190555080935050505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915090505481565b6000819050919050565b610f1081610efd565b82525050565b6000602082019050610f2b6000830184610f07565b92915050565b600080fd5b610f3f81610efd565b8114610f4a57600080fd5b50565b600081359050610f5c81610f36565b92915050565b600060208284031215610f7857610f77610f31565b5b6000610f8684828501610f4d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fba82610f8f565b9050919050565b610fca81610faf565b8114610fd557600080fd5b50565b600081359050610fe781610fc1565b92915050565b60006020828403121561100357611002610f31565b5b600061101184828501610fd8565b91505092915050565b60008115159050919050565b61102f8161101a565b82525050565b600060208201905061104a6000830184611026565b92915050565b61105981610faf565b82525050565b60006020820190506110746000830184611050565b92915050565b6000806040838503121561109157611090610f31565b5b600061109f85828601610fd8565b92505060206110b085828601610f4d565b9150509250929050565b6000819050919050565b60006110df6110da6110d584610f8f565b6110ba565b610f8f565b9050919050565b60006110f1826110c4565b9050919050565b6000611103826110e6565b9050919050565b611113816110f8565b82525050565b600060208201905061112e600083018461110a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061116e82610efd565b915061117983610efd565b92508282101561118c5761118b611134565b5b828203905092915050565b60006040820190506111ac6000830185611050565b6111b96020830184610f07565b9392505050565b6111c98161101a565b81146111d457600080fd5b50565b6000815190506111e6816111c0565b92915050565b60006020828403121561120257611201610f31565b5b6000611210848285016111d7565b91505092915050565b600061122482610efd565b915061122f83610efd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561126457611263611134565b5b828201905092915050565b60006060820190506112846000830186611050565b6112916020830185611050565b61129e6040830184610f07565b949350505050565b60006112b182610efd565b91506112bc83610efd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112f5576112f4611134565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061133a82610efd565b915061134583610efd565b92508261135557611354611300565b5b82820490509291505056fea26469706673582212203967d8b5db79bfbded4c52563adf75c7a27d247add181573115d4df3256bece964736f6c63430008090033a26469706673582212206d84cb90c359657fafa0a3c48d4bac192901bd79b446c10f21f3fc79a237e3c264736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Manages lending, borrowing, and collateral operations for a decentralized finance platform. Utilizes external price feeds for valuation and includes functionality for yield farming. This contract is responsible for tracking user interactions with lending pools and their collateralized positions.",
    "kind": "dev",
    "methods": {
      "addTokenPool(address,address)": {
        "details": "Deploys a new Lending contract for the token and registers it along with its price feed.",
        "params": {
          "priceAddress": "Address of the Chainlink price feed for the token.",
          "tokenAddress": "Address of the token for the new lending pool."
        }
      },
      "changeBorrowingAPY(address,uint256)": {
        "params": {
          "newAPY": "The new annual percentage yield for borrowing.",
          "tokenAddress": "Address of the token whose lending pool APY is to be changed."
        }
      },
      "changePriceFeed(address,address)": {
        "details": "Allows the contract owner to update the price feed address in case of changes or migration.",
        "params": {
          "priceAddress": "New address of the Chainlink price feed.",
          "tokenAddress": "Address of the token whose price feed is being updated."
        }
      },
      "getYield(address)": {
        "details": "Calculates the yield based on the amount lent and the time passed, then transfers the yield to the user.",
        "params": {
          "tokenAddress": "The address of the token for which yield is being claimed."
        }
      },
      "lendToken(address,uint256)": {
        "details": "Transfers tokens from the user to the lending pool contract and updates the tracking of lent amounts. Requires token approval from the user to the LendingTracker contract.",
        "params": {
          "tokenAddress": "The address of the token being lent.",
          "tokenAmount": "The amount of tokens the user is lending."
        }
      },
      "withdrawLendedToken(address,uint256)": {
        "details": "Ensures the user cannot withdraw more than they have lent. Adjusts the user's lent amount record accordingly.",
        "params": {
          "tokenAddress": "The address of the token to withdraw from the lending pool.",
          "tokenAmount": "The amount of tokens to withdraw."
        }
      }
    },
    "title": "LendingTracker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTokenPool(address,address)": {
        "notice": "Adds a new token pool for lending and borrowing."
      },
      "changeBorrowingAPY(address,uint256)": {
        "notice": "Updates the borrowing APY for a specified token pool."
      },
      "changePriceFeed(address,address)": {
        "notice": "Changes the price feed for a given token."
      },
      "getYield(address)": {
        "notice": "Claims yield for the user based on the tokens they have lent to the pool."
      },
      "lendToken(address,uint256)": {
        "notice": "Enables a user to lend tokens to a specific pool."
      },
      "withdrawLendedToken(address,uint256)": {
        "notice": "Withdraws tokens previously lent to the lending pool by the user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4193,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4195,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "borrowingContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4224,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "tokenToPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(tokenPool)4210_storage)"
      },
      {
        "astId": 4227,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "availableTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4233,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "userLendedAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4238,
        "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
        "label": "userLendedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(Pool)5018": {
        "encoding": "inplace",
        "label": "contract Pool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(tokenPool)4210_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LendingTracker.tokenPool)",
        "numberOfBytes": "32",
        "value": "t_struct(tokenPool)4210_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(tokenPool)4210_storage": {
        "encoding": "inplace",
        "label": "struct LendingTracker.tokenPool",
        "members": [
          {
            "astId": 4207,
            "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
            "label": "poolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(Pool)5018"
          },
          {
            "astId": 4209,
            "contract": "contracts/Lending/LendingTracker.sol:LendingTracker",
            "label": "priceAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}